<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grammar on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/grammar/</link>
    <description>Recent content in Grammar on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 05 Mar 2017 10:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/grammar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl 6 Gramamr 指南</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-perl-6-grammar-%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-perl-6-grammar-%E6%8C%87%E5%8D%97/</guid>
      <description>开始之前 为什么是 grammars? Grammars 解析字符串并从这些字符串返回数据结构。Grammars 可用于编写执行程序以确定程序是否可以运行（如果它是一个有效的程序），将网页分解成组成部分，或在其它的东西中识别句子的不同部分。
我什么时候该使用 grammars? 如果你有驯服或解释的字符串，grammar 提供工具来完成这项工作。
该字符串可能是一个文件, 您想把它拆分成多个章节; 也许是一个协议，比如 SMTP，你需要指定哪些“命令”来自用户提供的数据;也许你正在设计自己的领域特定语言。Grammars 可以提供帮助。
grammars 的广义概念 正则表达式（Regexes）适用于查找字符串中的模式。然而，对于一些任务来说，如同时查找多个模式，或者组合模式，或者单独测试可能围绕字符串正则表达式的模式是不够的。
在使用 HTML 时，您可以定义一个 grammar 来识别 HTML 标记，包括开始和结束元素以及它们之间的文本。然后，您可以将这些元素组织到数据结构中，例如数组或散列。
Grammar 指南 你总是会遇到令人头疼的字符串解析。举个例子, 据说 HTML 不能被有效地分解和解析，只需使用正则表达式来排序元素。另一个例子是定义单词和符号可能构成语言并提供含义的顺序。这正 和 Perl 的 Gramamr 系统完美契合。
Grammar 非常适合接受字符串，试图理解它们，然后将它们保存到一个你实际可以使用的数据结构中。如果你有某种带顺序或解释类型的字符串，Grammar 给你一些很强大的工具，使解析字符串更容易。
你的字符串可能是整个文件，你需要分成几个部分。也或许是一行一行的。也许你有一个正在使用的 SMTP 那样的协议，想要一个方便有条理的方式来定义哪些“命令”需要在用户数据的后面，使协议工作。也许你想创建自己的基于字符串的协议。也许你正在设计自己的语言。
正则表达式（regex）很好地在字符串中查找模式并操作它们。然而，当你需要同时找到多个模式，或者需要组合模式，或者测试可能围绕字符串的模式或其他模式 - 单单用正则表达式是不够的。
Grammar 提供了一种方式来定义如何使用正则表达式来检查字符串，并且可以将这些正则表达式组合在一起以提供更多的意义。
例如，在HTML的情况下，您可以定义一个语法，它可以识别HTML标记（开始和结束元素以及它们之间的文本），并通过将这些元素填充到数据结构中来对这些元素进行操作，例如数组或散列，然后可以轻松使用。实质上，Grammar 提供了一种定义可用于解析任意大小和复杂度的字符串的完整语言或规范的手段。
更多 Grammar 技术 概念描述 Gramamr 被定义为对象, 就像 Perl 中的其它东西。从技术上讲, Gramamr 是普通的类加上一点额外的魔法, 我们稍后就说到它 &amp;ndash; 还有一点限制。你像类那样命名和定义一个 Grammar, 除了使用「grammar」关键字代替「class」。
grammar My::Gram { ..methods &#39;n stuff.</description>
    </item>
    
    <item>
      <title>通过模块学习 Grammar</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>学习 Perl 6 Grammar 的一个很好的地方是 GitHub 上的模块仓库, 里面有不少模块使用了 Grammar 来编写。下面我们列举出哪些模块值得我们学习。
 Perl 6 STD 使用 Grammar 解析 YAML 使用 Grammar 解析 TAP 测试文件 使用 Grammar 解析 CSS 解析和操纵 CSS 解析 CSS 属性定义 使用 Perl 6 Gramamr 解析 fortran 源代码 用 Perl 6 写的 Grammar 引擎 解析 BNF 和 ABNF grammars 并从中生成 Perl 6 grammars Perl 6 Gramamr 调试 使用 Perl 6 Grammars 解析 HTTP 头, 消息体, 和 URIs Perl 6 PDF Grammars 解析 URI 解析 ini 文件 解析 .</description>
    </item>
    
    <item>
      <title>Perl 6 Grammar 之分割结构化文本</title>
      <link>https://ohmysummer.github.io/post/2016-11-01-perl6-grammar%E4%B9%8B%E5%88%86%E5%89%B2%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC/</link>
      <pubDate>Tue, 01 Nov 2016 02:05:48 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-11-01-perl6-grammar%E4%B9%8B%E5%88%86%E5%89%B2%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC/</guid>
      <description>如何使用 Grammar 分割一个有规律的文本文件? 首先这个文本有规律, 但是却是多行的。 我想将这样的文档分为独立的. 比如下面这个例子, 我想将他们分成3个独立的文本, 每个文本包含: [时间] Title 以及下面的 content lines. 实际的文件会有上千个, 最终输出的文本的名字是按照括号里面的时间来。
sample.txt
[28/04/2015 12:32] Title1 content line 1 content line 2 content line 3 content line 4 content line 5 balabala balabala [28/04/2015 12:16] Title2 content line 6 balabala content line 7 [27/04/2015 17:30] ​Title3 content line 8 content line 9 content line 10  下面是解析：
use Grammar::Tracer; # 开启 Grammar 调试有助于排错 grammar StructedText { token TOP { ^ &amp;lt;entry&amp;gt;+ $ } token entry { &amp;lt;head&amp;gt; \s* # 每一项有一个标题 &amp;lt;line&amp;gt;+ \s* # 每个标题下面有很多行 } token head { &#39;[&#39; &amp;lt;datetime&amp;gt; &#39;]&#39; \s+ &amp;lt;title&amp;gt; } token datetime { &amp;lt;filedate&amp;gt; \s+ &amp;lt;filetime&amp;gt; } token filedate { [\d+]+ % &#39;/&#39; } token filetime { [\d+]+ % &#39;:&#39; } token title { \N+ } token line { [ &amp;lt;!</description>
    </item>
    
    <item>
      <title>关于 Perl 6 你要知道的 10 件事</title>
      <link>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eperl6%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Sat, 22 Oct 2016 00:52:52 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eperl6%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</guid>
      <description>Ten Things You Need To Know about Perl 6 Jeffrey Goff, Evozon Systems LLC OSCON London 2016 https://github.com/drforr http://theperlfisher.blogspot.ro  资源  perl6.org (obviously) docs.perl6.org - Online documentation modules.perl6.org - CPAN Lite
 rakudo.org - Where to get the latest
 https://github.com/tadzik/rakudobrew - Perlbrew for Perl 6
 https://github.com/tadzik/panda/ - Module installer
 irc://irc.freenode.org/perl6 - #perl6 on IRC.freenode.org
 http://rosettacode.org/wiki/Category:Perl_6 - Sample source
  要闻  干净, 一次性的可解析的文法 对用户友好的错误信息 友好的 Unicode 对初学者有帮助的符号 Math that works 函数签名 用正则表达式引导 OO with a type lattice built on a Metaprogramming model 自定义运算符 内置并发  一次性文法 my @doctor = { :first(&#39;Christopher&#39;), :last(&#39;Eccleston&#39;), years =&amp;gt; 1 }, { :first(&#39;David&#39;), :last(&#39;Tennant&#39;), years =&amp;gt; 4 }, { :first(&#39;Matt&#39;), :last(&#39;Smith&#39;), years =&amp;gt; 4 }, { :first(&#39;Peter&#39;), :last(&#39;Capaldi&#39;), years =&amp;gt; 3 }; say &#39;First New Who Doctor: &#39;, @doctor[0]{&#39;first&#39;}, &#39; &#39;, @doctor[0]&amp;lt;last&amp;gt;; say &amp;quot;Average run: &amp;quot; ~ @doctor.</description>
    </item>
    
    <item>
      <title>解析命令行输出</title>
      <link>https://ohmysummer.github.io/post/2016-09-27-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 27 Sep 2016 07:51:05 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-27-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA/</guid>
      <description>哦, 列, 你在哪里? 当 ramiroencinas 给 Perl 6 的生态系统增加 FileSystem::Capacity::VolumesInfo模块的时候, 我说他没有添加 macOS 支持。而当我尝试为这个模块贡献源代码时我才发现知道一丢丢 Perl 6 的特性就能节省很多时间。 FileSystem::Capacity::VolumesInfo 这个模块所做的就是解析 df 命令的输出, 它看起来长这样:
$ df -k -P Filesystem 1024-blocks Used Available Capacity Mounted on /dev/disk3 1219749248 341555644 877937604 29% / devfs 343 343 0 100% /dev /dev/disk1s4 133638140 101950628 31687512 77% /Volumes/Untitled map -hosts 0 0 0 100% /net map auto_home 0 0 0 100% /home map -fstab 0 0 0 100% /Network/Servers //Pawel%20Pabian@biala-skrzynka.</description>
    </item>
    
    <item>
      <title>如何在Perl6中创建Grammar</title>
      <link>https://ohmysummer.github.io/post/2016-05-14-%E5%A6%82%E4%BD%95%E5%9C%A8perl6%E4%B8%AD%E5%88%9B%E5%BB%BAgrammar/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-14-%E5%A6%82%E4%BD%95%E5%9C%A8perl6%E4%B8%AD%E5%88%9B%E5%BB%BAgrammar/</guid>
      <description>检查 module 的名字是否 遵循 Perl 6 的命名规范。模块的名字可以是使用 2 个冒号分割的标识符, 例如 File::Compare 。标识符必须以字母字符 (a-z) 或下划线开头， 后面跟着 0 个 或多个字母数字字符。但是并没有那么简单, 有些模块的名字只有一个标识符而没有冒号，例如 Bailador ， 而其它模块可能有多个标识符和 :: 组成。这看起来正符合 grammar 的胃口！
定义 grammar Perl 6 Grammars 是由 regexes 构建的。 我需要 2 个 regexes： 一个用于匹配标识符, 一个用于匹配双冒号分隔符。对于标识符 regex， 我使用：
&amp;lt;[A..Za..z_]&amp;gt; # begins with letter or underscore &amp;lt;[A..Za..z0..9]&amp;gt; ** 0..* # zero or more alpanumeric  Perl 6 中，字符类是使用 &amp;lt;[ ... ]&amp;gt; 来定义的， 范围是使用 范围操作符 .. 代替了短划线 -.</description>
    </item>
    
    <item>
      <title>Perl 6 核心骇客--词法的胡言乱语</title>
      <link>https://ohmysummer.github.io/post/2016-01-01-perl-6-%E6%A0%B8%E5%BF%83%E9%AA%87%E5%AE%A2-%E8%AF%8D%E6%B3%95%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-01-perl-6-%E6%A0%B8%E5%BF%83%E9%AA%87%E5%AE%A2-%E8%AF%8D%E6%B3%95%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</guid>
      <description>Perl 6 核心骇客: 词法的胡言乱语
喜欢修复 Perl 6 编译器中的 bug? 这儿有一个great grammar bugglet: 当 „” 引号用在引起的用空白分割的单词列表构造器中时看起来好像不能工作:
say „hello world”; .say for qww&amp;lt;„hello world”&amp;gt;; .say for qww&amp;lt;&amp;quot;hello world&amp;quot;&amp;gt;; # OUTPUT: # hello world # „hello # world” # hello world  ” 引号不应该出现在输出中并且在输出中我们应该只有 3 行输出; 这 3 行输出都是 hello world。看起来像是一个待修复的有趣的 bug! 我们进去看看。
你怎样拼写它? 事实上这段代码没能正确解析表明这是一个 grammar bug。大部分的 grammar 住在 src/Perl6/Grammar.nqp中, 但是在我们的手变脏之前, 让我们来解决我们应该查看什么。
二进制 perl6 有一个 --target 命令行参数来接收其中之一的编译步骤并且会导致那个步骤的输出被产生出来。那儿有哪些步骤? 根据你正使用的后端它们也会有所不同, 但是你可以仅仅运行 perl6 --stagestats -e &#39;&#39; 把它们都打印出来:</description>
    </item>
    
    <item>
      <title>Perl6 中的可变 Grammar</title>
      <link>https://ohmysummer.github.io/post/2015-11-16-perl6%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98grammar/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-16-perl6%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98grammar/</guid>
      <description>## A Mutable Grammar For Perl 6 Rules Rules 就像 perl5的 regexes，并且更好。它们像子例程和方法那样申明，并且还能调用其它 rules
下面是一个解析 Perl 6 基本变量名的例子：
grammar Perl6 { # among other stuff: # token alpha 是一个预定义好的 rule token identifier { &amp;lt;alpha&amp;gt; \w+ } # 匹配一个全限定名标识符 # [ ... ] 是非捕获组 token name { &amp;lt;identifier&amp;gt; [ &#39;::&#39; &amp;lt;identifier&amp;gt; ] * } # .. | .. 是分支. 最长匹配胜出. token sigil { &#39;$&#39; | &#39;@&#39; | &#39;&amp;amp;&#39; | &#39;%&#39; | &#39;::&#39; } # &amp;lt;rule&amp;gt; 调用命名 rule, 隐式地锚定在当前位置 token variable { &amp;lt;sigil&amp;gt; &amp;lt;name&amp;gt; } }  Grammars Grammar 跟类很像，含有 rules 而不是 methods。 grammars 是 rules 的集合并支持继承。</description>
    </item>
    
    <item>
      <title>从正则表达式到 Grammar</title>
      <link>https://ohmysummer.github.io/post/2015-10-29-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammar/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-29-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammar/</guid>
      <description>「原文链接」
如果你是正则表达式新人(至少当它们用于 Perl 6 中时), 那我建议你从这个系列的第一部分开始。那些掌握了一定正则表达式的人可以跳过上周的文章。现在, 继续演示!
上周轶事 我们开始开发一个接收诸如
var a = 3; console.log(&amp;quot;Hey, did you konw a = &amp;quot; + a + &amp;quot;?&amp;quot;);  Javascript 表达式的 Perl 6 编译器, 并把这段代码转换为 Rakudo Perl 那样的编译器能运行的 Perl 6 代码。在我们开始之前, 想想转换后的 Perl 6 代码看起来是什么样的可能会是个好主意。如果你已经知道了 Perl 5, 那么你应该熟悉这样的代码。
my $a = 3; say &amp;quot;Hey, did you konw a = &amp;quot; ~ $a ~ &amp;quot;?&amp;quot;;  我们将需要确保我们的正则表达式捕获到了 Javascript 的要素。如果你还记得上一次, 我们使用这样一组正则表达式来捕获我们的文本:
my rule Number { \d+ }; my rule Variable { \w+ }; my rule String { &#39;&amp;quot;&#39; &amp;lt;-[&amp;quot; ]&amp;gt;+ &#39;&amp;quot;&#39; }; my rule Assignment-Expression { var &amp;lt;Variable&amp;gt; &#39;=&#39; &amp;lt;Number&amp;gt; }; my rule Function-Call { console &#39;.</description>
    </item>
    
    <item>
      <title>日期难题</title>
      <link>https://ohmysummer.github.io/post/2015-09-15-%E6%97%A5%E6%9C%9F%E9%9A%BE%E9%A2%98/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-15-%E6%97%A5%E6%9C%9F%E9%9A%BE%E9%A2%98/</guid>
      <description>reddit 上使用 Perl 6 处理日期
描述 下面的日期, 有些使用了 M D Y 格式, 有些使用了 Y M D 格式, 还使用了任意分隔符! 请把这些散乱的文本解析成合适的 ISO 8601 (YYYY-MM-DD) 格式化日期。
假设只有以 4 个数字开头的日期使用 Y M D 格式, 其它的使用 M D Y 格式。
输入样本 2/13/15 1-31-10 5 10 2015 2012 3 17 2001-01-01 2008/01/07  输出样本 2015-02-13 2010-01-31 2015-05-10 2012-03-17 2001-01-01 2008-01-07  扩展挑战 [中级] 使用 2014-12-24 作为相对日期的基准。
当添加 days(天数) 时, 要考虑到每月会有不同的天数, 忽略闰年。
当添加月和年时, 使用整个 units, 以至于:</description>
    </item>
    
    <item>
      <title>Grammar 笔记</title>
      <link>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</guid>
      <description>一个 Grammar 解析复杂文本的例子。
一个 Grammar 调了很久, 先分解下：
 解析[ ] 里面的数据：  use v6; use Grammar::Debugger; grammar Lines { token TOP { ^ &amp;lt;line&amp;gt;+ $ } token line { \[ &amp;lt;student&amp;gt;+ % &amp;lt;semicolon&amp;gt; \] \n # 换行 \n 是最容易被忽略的地方, 坑了很多次了！ } token student { &amp;lt;myname&amp;gt;+ % &amp;lt;comma&amp;gt; # 分隔符也可以是一个 subrule } token myname { &amp;lt;[A..Za..z-]&amp;gt;+ # 字符类的写法 &amp;lt;[...]&amp;gt; } token comma { &#39;,&#39; \s+ # 逗号, 分号 不能裸露出现在 token 中 } token semicolon { &#39;;&#39; \s+ } } my $parse = Lines.</description>
    </item>
    
    <item>
      <title>Grammars generating grammars</title>
      <link>https://ohmysummer.github.io/post/2015-04-15-grammars-generating-grammars/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-15-grammars-generating-grammars/</guid>
      <description>现在你可能已经习惯了 Perl 6 中到处出现的前缀&amp;rdquo;meta&amp;rdquo;。Metaclasses, Metaobjects, Metaoperators, 还有迷一般的 Meta-Object 协议。听起来一点也不可怕, 你都见过了不是吗？今天, 在 Perl 6 Advent Calendar 上, 我们将进行完全的 meta 化(full meta)。我们将拥有能解析 grammars 的 grammars, 然后生成将用于解析 grammars 的 grammars。
Grammars 无疑是 Perl 6 的杀手级功能。我们拥有了正则表达式曾经没有的东西: 可读性、可组合性当然还有解析 Perl 6 自身的能力。— 如果这不能展示它的强大, 那我不知道什么能够!
为预定义好的 grammars(例如以 Bachus-Naur 形式)写解析器总是有点无趣, 几乎和复制粘贴一样。如果你曾经坐下来重头开始写一个解析器(或者期间温习一遍那本优秀的&amp;rdquo;让我们构建一个编译器&amp;rdquo;图书), 你可能会意识到模式是如此相似:从你的 grammar 中拿出单个 rule, 为它写一个子例程, 让它调用(可能是递归的)其它类似的为其它 grmmars rules 定义的子例程, 清洗, 重复。现在我们有了Perl 6 Grammars! 在这个新世界中, 我们不必为每个 token 写上子例程来完成工作了。 现在我们写 grammar 类, 里面放上 *tokens*、*rules*、regexes 标志。在标志里写正则表达式(或代码)并引用(可能是递归的) Perl 6 gramamr 中的其它标志。如果你曾经使用过这些东西, 你肯定会意识到 Perl 6 中的 gramamrs 是多么的方便。</description>
    </item>
    
  </channel>
</rss>