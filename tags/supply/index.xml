<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Supply on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/supply/</link>
    <description>Recent content in Supply on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 08 Jul 2018 00:00:07 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/supply/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>class Supply</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-class-supply/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-class-supply/</guid>
      <description>class Supply {}  supply 是一种线程安全的异步数据流，如 Channel，但它可以有多个订阅者（taps: 水龙头），所有订阅者都可以获得流经 supply 的相同值。
它是 观察者模式 的线程安全实现，是支持 Raku 中的反应式编程的核心。
有两种类型的 Supplies：实时(live)和按需(on demand)。当水龙头接入到实时(live)供应时，水龙头将仅在创建水龙头之后看到流经 supply 的值。这种供应(supplies)通常是无限的，例如鼠标移动。关闭这样的水龙头(tap)不会阻止鼠标事件的发生，它只是意味着值将看不见了。所有的开孔器(tappers )都看到了相同的值流(flow of values)。
在按需供应上轻敲(tap)将发起值的产生，再次轻敲(tap)供应可能会产生一组新的值。例如，每次轻敲时，Supply.interval 都会生成一个具有适当间隔的新计时器。如果水龙头(tap)关闭，计时器只会停止向该水龙头发射值。
从 Supplier 的工厂方法 Supply 获得 live Supply（实时供应）。通过在 Supplier 对象上调用 emit 来发出新值。
my $supplier = Supplier.new; my $supply = $supplier.Supply; $supplier.tap( -&amp;gt; $v { say &amp;quot;$v&amp;quot; }); $supplier.emit(42); # Will cause the tap to output &amp;quot;42&amp;quot;  实时方法在实时供应上返回 True。工厂方法如 interval，from-list 会返回按需供应(on demand supplies)。
可以使用 Supplier::Preserving创建一个直到第一次轻敲的保存值的实时供应（Supply）。</description>
    </item>
    
  </channel>
</rss>