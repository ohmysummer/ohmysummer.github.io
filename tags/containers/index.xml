<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Containers on 焉知非鱼</title>
    <link>http://ohmysummer.github.io/tags/containers/</link>
    <description>Recent content in Containers on 焉知非鱼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jun 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ohmysummer.github.io/tags/containers/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>散列也是容器</title>
      <link>http://ohmysummer.github.io/post/2015-06-28-%E6%95%A3%E5%88%97%E4%B9%9F%E6%98%AF%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ohmysummer.github.io/post/2015-06-28-%E6%95%A3%E5%88%97%E4%B9%9F%E6%98%AF%E5%AE%B9%E5%99%A8/</guid>
      <description>散列也是容器 假设我们想计算某个东西的出现次数, 我们通常的做法是弄一个 &amp;ldquo;seen-hash&amp;rdquo; 散列。有时候我们有一组待查询的键, 其中有些键可能不在我们所扫描的数据中。那是一种特殊情况, 但是 Perl 6 能够完美地解决, 因为散列也是容器, 因此我们能够拥有默认值。
my $words = &amp;lt;Hashes are containers too&amp;gt;.lc; constant alphabet = &#39;a&#39; .. &#39;z&#39;; my %seen of Int is default(0); %seen{$_}++ for $words.comb; put &amp;quot;$_: %seen{$_}&amp;quot; for alphabet;  输出结果:
a: 3 b: 0 c: 1 d: 0 e: 3 f: 0 g: 0 h: 2 i: 1 j: 0 k: 0 l: 0 m: 0 n: 2 o: 3 p: 0 q: 0 r: 2 s: 3 t: 2 u: 0 v: 0 w: 0 x: 0 y: 0 z: 0  $words 中没有出现的特殊字符由 is default(0) 处理了。 默认值可以被精心设计。我们来弄一个在数值上下文中为默认值为 0 但是在字符串上下文中为默认值为 NULL 并且总是被定义的一个散列。</description>
    </item>
    
  </channel>
</rss>