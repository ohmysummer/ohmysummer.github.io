<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>函数 on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/tags/%E5%87%BD%E6%95%B0/</link>
    <description>Recent content in 函数 on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Oct 2016 21:13:16 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl 6 中的函数</title>
      <link>https://ohmysummer.github.io/post/2016-10-17-perl6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 17 Oct 2016 21:13:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-17-perl6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</guid>
      <description>Perl 6 中的函数 例程（Routines）是 Perl 6 中代码重用的最小手段。它们有几种形式，最明显的是属于类和角色并与对象相关联的方法，还有函数, 也叫做子例程或短子程序，它们独立于对象而存在。
子例程默认是词法（my）作用域的，对它们的调用通常在编译时解析。
子例程可以具有签名，也称为*参数列表*，其指定签名期望的参数（如果有的话）。 它可以指定（或保持打开）参数的数量和类型，以及返回值。
子例程的内省通过例程提供。
定义/创建/使用 函数 子例程 创建子例程的基本方法是使用 sub 声明符，后跟可选标识符
sub my-func { say &amp;quot;Look ma, no args!&amp;quot; } my-func;  sub 声明符返回可以存储在任何容器中的 Sub 类型的值:
my &amp;amp;c = sub { say &amp;quot;Look ma, no name!&amp;quot; } c; # OUTPUT: «Look ma, no name!␤» my Any:D $f = sub { say &#39;Still nameless...&#39; } $f(); # OUTPUT: «Still nameless...␤» my Code \a = sub { say ‚raw containers don&#39;t implement postcircumfix:&amp;lt;( )&amp;gt;‘ }; a.</description>
    </item>
    
  </channel>
</rss>