<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl6intro on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/perl6intro/</link>
    <description>Recent content in Perl6intro on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 21 Dec 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/perl6intro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>perl6intro 翻译</title>
      <link>https://ohmysummer.github.io/post/2015-12-21-perl6intro-%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-21-perl6intro-%E7%BF%BB%E8%AF%91/</guid>
      <description>第八章 函数式编程 在本章中，我们将看看一些有利于函数式编程的功能。
函数是一等公民 　函数/子例程是一等公民:
 它们能作为参数传递 它们能从另外一个函数中返回 它们能被赋值给变量  map 函数是用来说明这个概念的极好例子。map 是高阶函数, 它接收另外一个函数作为参数。
脚本
my @array = &amp;lt;1 2 3 4 5&amp;gt;; sub squared($x) { $x ** 2 } say map(&amp;amp;squared, @array);  输出
(1 4 9 16 25)  解释
我们定义了一个叫做 squared 的子例程, 它接收一个数字并返回该数字的二次幂。下一步, 我们使用 map 这个高阶函数并传递给它两个参数, 一个子例程和一个数组。结果是所有数组元素的平方组成的列表。
注意当传递子例程作为参数时, 我们需要在子例程的名字前添加一个 &amp;amp; 符号。
闭包 　在 Perl 6 中所有的代码对象都是闭包, 这意味着它们能从外部作用域(outer scope)引用词法变量(lexical variables)。
匿名函数 　匿名函数也叫做拉姆达(lambda)。
匿名函数没有绑定到标识符(匿名函数没有名字)。
让我们使用匿名函数重写 map 那个例子。</description>
    </item>
    
  </channel>
</rss>