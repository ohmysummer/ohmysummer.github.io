<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/ruby/</link>
    <description>Recent content in Ruby on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 17 Oct 2016 17:55:34 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raku From Ruby - Nutshell</title>
      <link>https://ohmysummer.github.io/post/2016-10-17-rakufromruby/</link>
      <pubDate>Mon, 17 Oct 2016 17:55:34 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-17-rakufromruby/</guid>
      <description>Raku from Ruby - Nutshell
基本语法 语句结束分号 Ruby 使用换行(有几个例外)来探测大部分语句的结束, 只要表达式已经完成。通过把运算符挂在行的末尾以保证解析会继续而打断一个长的表达式的做法很常见:
foo + # 在 Ruby 中结尾的运算符意味着解析会继续 bar + baz 在 Raku 中你必须显式地使用 ; 来结束语句, 这允许更好的反馈和更灵活的断行。有两个例外不需要显式的 ;, 块儿中的最后一条语句, 在块自身的闭合花括号之后(如果那一行上没有任何其它东西):
if 5 &amp;lt; $x &amp;lt; 10 { say &amp;quot;Yep!&amp;quot;; $x = 17 # 在闭合花括号 } 之前不需要分号 ; } # 因为换行, 在闭合花括号 } 之后不需要分号 ; say &amp;quot;Done!&amp;quot;; # 如果后面什么也没有, 那么这儿的分号也不需要 空白 Ruby 中允许使用大量令人吃惊的灵活的空白, 即使在开启了严格模式和警告的情况下:
# 不符合习惯但是在 Ruby 中是合法的 puts&amp;#34;Hello &amp;#34;+ (people [ i] .</description>
    </item>
    
  </channel>
</rss>