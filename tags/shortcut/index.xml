<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shortcut on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/shortcut/</link>
    <description>Recent content in Shortcut on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 31 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/shortcut/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raku Shortcuts(第一部分)</title>
      <link>https://ohmysummer.github.io/post/2016-08-31-raku-shortcuts%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-31-raku-shortcuts%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>查看原文
快捷(Shortcuts)是一个具有争议性的话题。有些人认为它让代码更快更易读。有些人认为它让代码变得更难度如果人们不熟悉那些快捷的话。这篇文章仅仅告诉你 Shortcuts 的东西, 用不用取决于你。让我们开始把。
类属性的公开 Getter/Setter &amp;ldquo;getter&amp;rdquo; 和 &amp;ldquo;setter&amp;rdquo; 的概念在很多语言中是共通的: 在你的类中有一个 &amp;ldquo;东西&amp;rdquo;, 并且你写了一个方法来设置或获取那个东西的值。以啰嗦的 Raku 方式来写, 这样的一个设置看起来像这样:
class Foo { has $!attr = 42; method attr is rw { $!attr } } my $obj = Foo.new; say $obj.attr; $obj.attr = 72; say $obj.attr; # 输出&amp;gt;&amp;gt; # 42 # 72  这就像它本来的那样简洁, 但公共属性通常足以使编写这点儿代码变得恼人。这就是为什么 $. twigil 存在的原因。单独使用它会创建一个 &amp;ldquo;getter&amp;rdquo;; 如果你还想要一个 &amp;ldquo;setter&amp;rdquo;, 需要使用 is rw 特性:
class Foo { has $.attr is rw = 42; } my $obj = Foo.</description>
    </item>
    
  </channel>
</rss>