<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lists on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/tags/lists/</link>
    <description>Recent content in Lists on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 27 Oct 2016 22:33:17 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/lists/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl 6 中列表、序列和数组</title>
      <link>https://ohmysummer.github.io/post/2016-10-27-perl6%E4%B8%AD%E5%88%97%E8%A1%A8%E5%BA%8F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 27 Oct 2016 22:33:17 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-27-perl6%E4%B8%AD%E5%88%97%E8%A1%A8%E5%BA%8F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>列表一直是计算机的核心部分，因为之前有计算机，在这段时间里，许多恶魔占据了他们的细节。 它们实际上是 Perl 6 设计中最难的部分之一，但是通过坚持和耐心，Perl 6 已经使用了一个优雅的系统来处理它们。
Literal Lists 字面上的列表用逗号和分号不是用圆括号创建，因此：
1, 2 # This is two-element list (1, 2) # This is also a List, in parentheses (1; 2) # same List (1) # This is not a List, just a 1 in parentheses (1,) # This is a one-element List  括号可用于标记列表的开头和结尾，因此：
(1, 2), (1, 2) # This is a list of two lists.  多维字面上的列表是通过逗号和分号组合而成的。 它们可以在常规参数列表和下标中使用。
say so (1,2; 3,4) eqv ((1,2), (3,4)); # OUTPUT«True␤» say(&#39;foo&#39;;); # a list with one element and the empty list # OUTPUT«(foo)()␤»  单个元素可以使用下标从列表中拉出。 列表的第一个元素的索引号为零：</description>
    </item>
    
    <item>
      <title>S07-Lists</title>
      <link>https://ohmysummer.github.io/post/2016-02-12-s07-lists/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-12-s07-lists/</guid>
      <description>push 和 append 的表现不同, push 一次只添加单个参数到列表末端, append 一次可以添加多个参数。
use v6; my @d = ( [ 1 .. 3 ] ); @d.push( [ 4 .. 6 ] ); @d.push( [ 7 .. 9 ] ); for @d -&amp;gt; $r { say &amp;quot;$r[]&amp;quot;; } # 1 # 2 # 3 # 4 5 6 # 7 8 9 for @d -&amp;gt; $r { say $r.WHAT() } # (Int) # (Int) # (Int) # (Array) 整个数组作为单个参数 # (Array) say @d.</description>
    </item>
    
  </channel>
</rss>