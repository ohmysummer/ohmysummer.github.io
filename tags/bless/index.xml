<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bless on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/bless/</link>
    <description>Recent content in bless on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 26 Feb 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/bless/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bless</title>
      <link>https://ohmysummer.github.io/post/2016-02-26-bless/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-26-bless/</guid>
      <description>bless 方法 method bless(*%attrinit) returns Mu:D相比 new方法来说更低层级别的对象构造方法。
创建一个和调用者同类型的新对象, 使用具名参数来初始化属性, 并返回创建后的对象。
在自定义构造函数时可以使用该方法:
class Point {has $.x;has $.y;# multi 是可选的multi method new($x, $y) {self.bless(:$x, :$y);}}# 重写构造函数后, 不需要传具名参数了my $p = Point.new(-1, 1);say $p.x; # -1 虽然你可以自定义构造函数, 记得它会让子类继承变得更困难。
 use v6;# bless 的原理class Dog {has $.name;my $.counter; # 类方法# 重写 new 方法, 使用位置参数创建实例method new ($newName) {$.</description>
    </item>
    
  </channel>
</rss>