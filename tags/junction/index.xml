<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Junction on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/junction/</link>
    <description>Recent content in Junction on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 21 Dec 2017 10:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/junction/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第二十一天-数独与Junctions和集合</title>
      <link>https://ohmysummer.github.io/post/2017-12-21-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9-%E6%95%B0%E7%8B%AC%E4%B8%8Ejunctions%E5%92%8C%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 21 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-21-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9-%E6%95%B0%E7%8B%AC%E4%B8%8Ejunctions%E5%92%8C%E9%9B%86%E5%90%88/</guid>
      <description>Day 21 – Sudoku with Junctions and Sets Perl6 中有许多核心元素为您提供强大的工具，以简洁而强大的方式完成任务。其中两个是具有许多特征的联结和集合，但也是截然不同的。为了演示这些功能，我将介绍如何将它们用于一个简单的问题，Sudoku拼图。
数独：进修 所以对于那些不知道数独谜题的人来说，它是一个9乘9的网格，它提供了一些填充了数字1-9的单元格。目标是填充数字在1和9之间的所有单元格，所以没有任何行，列或子广场具有多于一个的数字。
有几种方法来表示一个数独谜题，我个人最喜欢的是 9×9 嵌套数组，例如：
my @game = [ [4,0,0,0,0,0,0,0,0], [0,9,0,3,4,6,0,5,0], [5,8,0,0,9,0,0,0,6], [0,4,0,8,1,3,0,0,9], [0,0,0,5,0,4,0,0,0], [8,0,0,6,2,9,0,4,0], [3,0,0,0,5,0,0,6,2], [0,5,0,9,3,2,0,8,0], [0,0,0,0,0,0,0,0,1] ];  在这种情况下，没有赋值的单元格被赋值为0，这样所有的单元格都有一个赋值给它们的整数值。使用这种格式要记住的主要事情是你需要使用@game [$ y] [$ x]而不是@game [$ x] [$ y]来引用单元格，
Junctions：量子逻辑测试 在 Perl6 中使用 Junction 的最简单方法之一是逻辑测试。 Junction可以表示您想要测试的值的选择。例如 ：
if ( 5 &amp;lt; 1|10 &amp;lt; 2 ) { say &amp;quot;Spooky&amp;quot; } else { say &amp;quot;Boo&amp;quot; } Spooky  因此，这不仅证明了操作符链（经验丰富的程序员可能已经看起来很困惑），而且对于5 &amp;lt;10和1 &amp;lt;2，任何连接点（1 | 10）的计算结果都为True。这样，连接点可以非常已经很强大了，当你为它们分配一个变量容器时，它变得非常有趣。</description>
    </item>
    
    <item>
      <title>Perl6 模块分析 - 并行查找文件</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-perl6%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-%E5%B9%B6%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 19 Oct 2016 19:12:22 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-perl6%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-%E5%B9%B6%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</guid>
      <description>并行查找文件 如果你没有使用 panda 或 zef 安装该模块, 你可以下载到本地：
use v6; use lib &amp;quot;C:\\Users\\Administrator\\perl6-concurrent-file-find\\lib&amp;quot;; use Concurrent::File::Find;  下面来看具体代码：
class X::IO::NotADirectory does X::IO is export { has $.path; method message { &amp;quot;«$.path» is not a directory&amp;quot; } } class X::IO::CanNotAccess does X::IO is export { has $.path; method message { &amp;quot;Cannot access «$.path»: permission denied&amp;quot; } } class X::IO::StaleSymlink does X::IO is export { has $.path; method message { &amp;quot;Stale symlink «$.path»&amp;quot; } }  上面的代码自定义了 3 个与 IO 错误相关的类并导出, 每个类中有一个 $.</description>
    </item>
    
  </channel>
</rss>