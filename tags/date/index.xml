<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Date on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/date/</link>
    <description>Recent content in Date on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 07 Jul 2018 13:33:35 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/date/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Date and Time Functions</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</link>
      <pubDate>Sat, 07 Jul 2018 13:33:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</guid>
      <description>Raku 包括几个处理时态信息的类：Date，DateTime，Instant 和 Duration。前三个是 dateish，所以它们混合了 Dateish 角色，它定义了处理日期的类应该采用的所有方法和属性。它还包括以 X::Temporal 为根的异常的类层次结构。
我们将尝试在下一个（稍微扩展）的示例中说明这些类，这个示例可用于处理目录中的所有文件（默认情况下）。在目录中使用特定扩展名（默认为 .p6），根据他们的年龄对其进行排序，并计算每月创建的文件数量，以及在几个月的范围内表示的特定时期内修改的文件数量：
use v6; sub MAIN( $path = &amp;quot;.&amp;quot;, $extension = &amp;quot;p6&amp;quot; ) { my DateTime $right = DateTime.now; my %metadata; my %files-month; my %files-period; for dir($path).grep( / \.$extension $/ ) -&amp;gt; $file { CATCH { when X::Temporal { say &amp;quot;Date-related problem&amp;quot;, .payload } when X::IO { say &amp;quot;File-related problem&amp;quot;, .payload } default { .payload.say } } my Instant $modified = $file.</description>
    </item>
    
    <item>
      <title>Dateish</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-dateish/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-dateish/</guid>
      <description>role Dateish { ... }Date 和 DateTime 都支持访问 year, month 和 day-of-month 以及相关的函数，例如计算星期几。
方法 year 方法 定义为：
method year(Date:D: --&amp;gt; Int:D)返回日期的月份(1..12)。
say Date.new(&#39;2015-12-31&#39;).month; # OUTPUT: «12» say DateTime.new(date =&amp;gt; Date.new(&#39;2015-12-24&#39;), hour =&amp;gt; 1).month; # OUTPUT: «12» day 方法 定义为：
method day(Date:D: --&amp;gt; Int:D)返回日期中月份的天(1..31)。
say Date.new(&#39;2015-12-31&#39;).day; # OUTPUT: «31» say DateTime.new(date =&amp;gt; Date.new(&#39;2015-12-24&#39;), hour =&amp;gt; 1).day; # OUTPUT: «24» formatter 方法 定义为：
method formatter(Dateish:D:)返回用于转换为Str的格式化函数。如果在对象构造时没有提供，则使用默认的格式化程序。在这种情况下，该方法将返回一个 Callable 类型的对象。
格式化函数由 DateTime 方法 Str 以 invocant 作为唯一参数来调用。</description>
    </item>
    
  </channel>
</rss>