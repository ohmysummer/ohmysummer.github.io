<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>With on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/with/</link>
    <description>Recent content in With on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 19 Oct 2016 19:17:03 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/with/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raku 中的 with</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84with/</link>
      <pubDate>Wed, 19 Oct 2016 19:17:03 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84with/</guid>
      <description>with orwith without with 语句就像 if 但是是为了测试是否定义而非真假。此外, 它主题化了条件, 这很像 given:
with &amp;quot;abc&amp;quot;.index(&amp;quot;a&amp;quot;) { .say } # print 0  代替 elsif, orwith 用于把是否定义的测试链接起来:
# The below code says &amp;quot;Found a at 0&amp;quot; my $s = &amp;quot;abc&amp;quot;; with $s.index(&amp;quot;a&amp;quot;) { say &amp;quot;Found a at $_&amp;quot; } orwith $s.index(&amp;quot;b&amp;quot;) { say &amp;quot;Found b at $_&amp;quot; } orwith $s.index(&amp;quot;c&amp;quot;) { say &amp;quot;Found c at $_&amp;quot; } else { say &amp;quot;Didn&#39;t find a, b or c&amp;quot; }  你可以混合基于 if 的从句和基于 with 的从句：</description>
    </item>
    
  </channel>
</rss>