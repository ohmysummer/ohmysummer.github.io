<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Examples on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/examples/</link>
    <description>Recent content in Examples on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 22 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raku 中的特性(一)</title>
      <link>https://ohmysummer.github.io/post/2016-04-22-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%80/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-22-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%80/</guid>
      <description>基础 数组 切片, 索引, Zen
use v6; my @primes = (2,3,5,7,11,13,17,19,23); # an array gets filled like in Perl 5 # my @primes = 2,3,5,7,11,13,17,19,23 ; # same thing, since unlike P5 round braces just do group # my @primes = &amp;lt;2 3 5 7 11 13 17 19 23&amp;gt;; # dito, &amp;lt;&amp;gt; is the new qw() say @primes[]; # 2 3 5 7 11 13 17 19 23 my $arrayref = [2,3,5,7,11,13,17,19,23]; # in scalar context you get automatically a reference say @$arrayref; # 2 3 5 7 11 13 17 19 23 my $arrayref = item @primes; # same thing, more explicit say $arrayref; my $arrayref = [13,]; # comma is the new array generator say $arrayref; my @primes = 2; # array with one element my @primes = [2,3,5,7,11,13,17,19,23]; # array with one element (arrayref) say @primes; # 2 3 5 7 11 13 17 19 23 my @dev = {&#39;dan&#39; =&amp;gt; &#39;parrot&#39;}; # array with one element (hashref) say @dev; # (&amp;quot;dan&amp;quot; =&amp;gt; &amp;quot;parrot&amp;quot;).</description>
    </item>
    
    <item>
      <title>Raku Examples</title>
      <link>https://ohmysummer.github.io/post/2016-02-14-raku-examples/</link>
      <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-14-raku-examples/</guid>
      <description>斐波拉契数列（Fibonacci Sequence）  analytic  use v6; sub fibonacci (Int $n where 0..* --&amp;gt; Int) { constant phi = (1 + sqrt 5) / 2; return round( phi**($n+1) / sqrt 5); } for 0..1000 -&amp;gt; $i { say $i.fmt(&#39;%3d&#39;), &#39;: &#39;, fibonacci($i); }  这种方法计算前1000个斐波拉契数大约为0.746s（2015.7.Rakudo, 以下都是）。
 迭代  use v6; sub fibonacci (Int $n) { state @sequence = 1,1; while @sequence.elems &amp;lt;= $n { @sequence.push( @sequence[*-2] + @sequence[*-1] ); } return @sequence[$n]; } for 0.</description>
    </item>
    
    <item>
      <title>Raku 中的特性(二)</title>
      <link>https://ohmysummer.github.io/post/2015-03-16-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%BA%8C/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-16-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%BA%8C/</guid>
      <description>Set my $keywords = set &amp;lt;if for unless while&amp;gt;; # create a set sub has-keyword(*@words) { for @words -&amp;gt; $word { return True if $word (elem) $keywords; # 依次检查数组中的元素是否属于集合 $keywords } False; } say has-keyword &#39;not&#39;, &#39;one&#39;, &#39;here&#39;; # False say has-keyword &#39;but&#39;, &#39;here&#39;, &#39;for&#39;; # True  Series Operator my @a=&amp;lt;A G C T&amp;gt;; my $x=@a; for 1 ... * -&amp;gt; $a { (( [X~] $x xx $a )).</description>
    </item>
    
  </channel>
</rss>