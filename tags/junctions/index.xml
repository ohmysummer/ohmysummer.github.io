<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Junctions on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/junctions/</link>
    <description>Recent content in Junctions on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 14 Aug 2016 13:14:00 +0100</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/junctions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>哇, Perl 6!</title>
      <link>https://ohmysummer.github.io/post/2016-08-14-%E5%93%87perl6/</link>
      <pubDate>Sun, 14 Aug 2016 13:14:00 +0100</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-14-%E5%93%87perl6/</guid>
      <description>前言 Slides 地址 视频地址
答案地址
注意 Unicode  Perl 6 允许你使用 Unicode 的项和操作符。 这些 Unicode 都有对应的只使用 ASCII 字符的 Texas 变体, 如果你更喜欢使用它们, 到 http://docs.perl6.org/language/unicode_texas 找到它们。
惰性列表和它们的使用 ## 惰性列表
我们来做点儿疯狂的事情吧&amp;hellip;例如创建一个无限列表(INIFINITE LIST)!
my @to-infinity-and-beyond = 0, 2 ... ∞; say @to-infinity-and-beyond[1008]; # 2016  来点更有用的东西: 处理大文件
for &#39;/tmp/4GB-file.txt&#39;.IO.words { .say; last if ++$ == 3; } say &amp;quot;Code took {now - INIT now} seconds to run&amp;quot;; # OUTPUT: # foo # bar # ber # Code took 0.</description>
    </item>
    
    <item>
      <title>Perl 6 的薛定谔的猫--Junctions</title>
      <link>https://ohmysummer.github.io/post/2015-03-22-perl-6-%E7%9A%84%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E7%8C%AB---junctions/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-22-perl-6-%E7%9A%84%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E7%8C%AB---junctions/</guid>
      <description>薛定谔欧文应该是喜欢 Perl 6 的, 因为他的著名的薛定谔的猫可以用 Perl 6 的 Junction表达:
my $cat = &#39;dead&#39; | &#39;alive&#39;; say &amp;quot;cat is both dead and alive&amp;quot; if $cat eq &#39;dead&#39; and $cat eq &#39;alive&#39;; # OUTPUT: # cat is both dead and alive  这里面发生了什么事情? 我会告诉你全部的!
Anyone 游戏? 拿最简单的来说, Junctions 允许你把一堆值当作单个值。例如, 你可以使用 any Junction 来测试一个变量是否等于所给定值中的任意一个:
say &#39;it matches!&#39; if &#39;foo&#39; eq &#39;foo&#39; | &#39;bar&#39; | &#39;ber&#39;; say &#39;single-digit prime&#39; if 5 == any ^9.</description>
    </item>
    
  </channel>
</rss>