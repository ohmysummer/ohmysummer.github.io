<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IRC on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/irc/</link>
    <description>Recent content in IRC on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 26 Apr 2018 10:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/irc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Awesome Async Interfaces with Raku</title>
      <link>https://ohmysummer.github.io/post/2018-04-27-raku%E4%B8%AD%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%8F%B9%E7%9A%84%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 26 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-27-raku%E4%B8%AD%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%8F%B9%E7%9A%84%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3/</guid>
      <description>2015 年圣诞节前后, 我写了我的第一个 Raku 程序 - 新年 IRC 派对机器人。这项工作包括发布了 IRC::Client 模块。我从这个语言中找到了童年的乐趣并且在假期喝了不少酒, 结果就是这个模块最终足够疯狂。
最近, 我需要一个工具来完成一些 Raku 的 bug 队列工作, 因此我决定把自己关上一个周末, 从头开始重新设计和重写这个模块。在过去的几个月里, 有好几个人请求我这么做, 所以我想我也应该写一篇关于如何使用这个模块的教程 - 作为对我这个拖延症大师的道歉。如果你对 IRC 没有兴趣的话, 我希望这篇教程可以作为 Raku 中的异步、非阻塞接口的一个一般示例。
基础 要创建一个 IRC 机器人, 请实例化一个 IRC::Client 对象, 给它一些基本信息, 然后调用 .run 方法。将所有你需要的功能实现为类, 并通过方法名匹配你想要监听的事件, 然后通过 .plugins 属性将其传递给所有的插件。当发生 IRC 事件时, 它会按照你指定的顺序传递给所有的插件, 如果有插件宣称处理了该事件就停止。
这里有一个简单的 IRC 机器人, 它可以响应在频道中找人、通知和发送给它的私人消息。下面这个响应是机器人收到的大写后的原始消息：
use IRC::Client;.run with IRC::Client.new::nick&amp;lt;MahBot&amp;gt;:host&amp;lt;irc.freenode.net&amp;gt;:channels&amp;lt;#raku&amp;gt;:debug:plugins(class { method irc-to-me ($_) { .text.uc } })这就是机器人运行时的样子：</description>
    </item>
    
  </channel>
</rss>