<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Setty on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/setty/</link>
    <description>Recent content in Setty on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 11 Dec 2016 23:50:12 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/setty/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raku 中的 Setty 和 Baggy 类型</title>
      <link>https://ohmysummer.github.io/post/2016-12-11-raku%E7%9A%84-setty-%E5%92%8C-baggy-%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 11 Dec 2016 23:50:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-11-raku%E7%9A%84-setty-%E5%92%8C-baggy-%E7%B1%BB%E5%9E%8B/</guid>
      <description>有一个很常见的计数场景。比如说计算 DNA 中各个碱基的个数:
my %counts; %counts{$_}++ for &#39;AGTCAGTCAGTCTTTCCCAAAAT&#39;.comb; say %counts&amp;lt;A T G C&amp;gt;; # (7 7 3 6) 创建一个哈希。对于每一个你想计数的东西, 每遇到一次就在那个哈希中加 1。所以有什么问题？
Raku 通常有特定的更合适的类型来做这种操作; 例如,Bag 类型：
&#39;AGTCAGTCAGTCTTTCCCAAAAT&#39;.comb.Bag&amp;lt;A T G C&amp;gt;.say; # (7 7 3 6) 我们来说说这些类型还有那些时髦的运算符！
注意 Unicode 我将在这篇文章中使用花哨的 Unicode 版本的运算符和符号,因为它们看起来很纯。 然而, 他们都有我们称之为Texas的等同物, 你可以改用它们。
准备. Set. 走起 这些类型中最简单的就是 Set。 它将仅保存每个项目之一, 因此如果您有多个相同的对象, 那么重复项将被丢弃:
say set 1, 2, 2, &amp;quot;foo&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;; # OUTPUT: set(a, foo, b, 1, 2) 集合运算符是强制的, 因此我们不需要显式地创建集合; 他们会为我们做：</description>
    </item>
    
  </channel>
</rss>