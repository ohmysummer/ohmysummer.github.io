<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Action on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/action/</link>
    <description>Recent content in Action on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 05 Mar 2017 10:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/action/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>通过模块学习 Grammar</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>学习 Raku Grammar 的一个很好的地方是 GitHub 上的模块仓库, 里面有不少模块使用了 Grammar 来编写。下面我们列举出哪些模块值得我们学习。
 Raku STD 使用 Grammar 解析 YAML 使用 Grammar 解析 TAP 测试文件 使用 Grammar 解析 CSS 解析和操纵 CSS 解析 CSS 属性定义 使用 Raku Gramamr 解析 fortran 源代码 用 Raku 写的 Grammar 引擎 解析 BNF 和 ABNF grammars 并从中生成 Raku grammars Raku Gramamr 调试 使用 Raku Grammars 解析 HTTP 头, 消息体, 和 URIs Raku PDF Grammars 解析 URI 解析 ini 文件 解析 .</description>
    </item>
    
    <item>
      <title>Actions 和抽象语法树</title>
      <link>https://ohmysummer.github.io/post/2016-05-12-actions%E5%92%8C%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-12-actions%E5%92%8C%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</guid>
      <description>有一段结构化的文本, 写一个 Grammar 来解析它：
name = Animal Facts author = jnthn [cat] desc = The smartest and cutest cuteness = 100000 [dugong] desc = The cow of the sea cuteness = -10 [magpie] desc = crow; raven; rook; jackdaw; chough; magpie; jay cuteness = 99  每一段都是一个章节, 有的章节没有[cat]这样的标题, 要求 grammar 生成一个散列, 散列的键是方括号中的单词, 如果没有就默认为 _ , 散列的值是一个散列的数组, 数组里面的每个散列的键为等号左边的单词, 键值为等号右边的字符。Grammar 如下:
use v6; #use Grammar::Debugger; grammar INIFile::Grammar { token TOP { ^ &amp;lt;entries&amp;gt; # 条目 &amp;lt;section&amp;gt;+ # 章节 $ } token section { &#39;[&#39; ~ &#39;]&#39; &amp;lt;key&amp;gt; \n &amp;lt;entries&amp;gt; # 每个章节含有多个条目 entry } token entries { [ | &amp;lt;entry&amp;gt; \n | \n # entry 可以为空 ]+ } token entry { &amp;lt;key&amp;gt; \h* &#39;=&#39; \h* &amp;lt;value&amp;gt; } token key { \w+ } token value { \N+ } } class INIFileActions { method entries($/) { my %entries; for $&amp;lt;entry&amp;gt; -&amp;gt; $e { %entries{$e&amp;lt;key&amp;gt;} := ~$e&amp;lt;value&amp;gt;; } make %entries; } method TOP($/) { my %result; %result&amp;lt;_&amp;gt; := $&amp;lt;entries&amp;gt;.</description>
    </item>
    
    <item>
      <title>Grammar 笔记</title>
      <link>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</guid>
      <description>一个 Grammar 解析复杂文本的例子。
一个 Grammar 调了很久, 先分解下：
 解析[ ] 里面的数据：  use v6; use Grammar::Debugger; grammar Lines { token TOP { ^ &amp;lt;line&amp;gt;+ $ } token line { \[ &amp;lt;student&amp;gt;+ % &amp;lt;semicolon&amp;gt; \] \n # 换行 \n 是最容易被忽略的地方, 坑了很多次了！ } token student { &amp;lt;myname&amp;gt;+ % &amp;lt;comma&amp;gt; # 分隔符也可以是一个 subrule } token myname { &amp;lt;[A..Za..z-]&amp;gt;+ # 字符类的写法 &amp;lt;[...]&amp;gt; } token comma { &#39;,&#39; \s+ # 逗号, 分号 不能裸露出现在 token 中 } token semicolon { &#39;;&#39; \s+ } } my $parse = Lines.</description>
    </item>
    
  </channel>
</rss>