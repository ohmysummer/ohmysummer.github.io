<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Glr on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/glr/</link>
    <description>Recent content in Glr on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 12 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/glr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>大列表重构</title>
      <link>https://ohmysummer.github.io/post/2016-08-12-%E5%A4%A7%E5%88%97%E8%A1%A8%E9%87%8D%E6%9E%84/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-12-%E5%A4%A7%E5%88%97%E8%A1%A8%E9%87%8D%E6%9E%84/</guid>
      <description>Raku 最近(2015.9)经历的最大的变化就是 Great List Refactor(GLR), 俗称大列表重构。
它还很难解释！但是幸好有某些历史背景能帮助我们。 在 2014 年澳大利亚 Perl Workshop 会议上讨论了很多 GLR 的东西, Patrick Michaud 在它的博客上写了很多关于 GLR 的内容。
GLE 意图强调性能和列表和相关类型操作的一致性问题。改变这样的基本数据类型将会很痛苦。
通常 Perl 5 这样展开列表:
% perl -dE 1 -MData::Dumper [...snip...] DB&amp;lt;1&amp;gt; @foos=((1,2),3) DB&amp;lt;2&amp;gt; say Dumper \@foos $VAR1 = [ 1, 2, 3 ];  开始, 很多的 Raku 行为都模仿这种展平行为但是在去年年底的时候, 使用 non-flatterning(非展平)行为以保留原始数据结构的用法越来越多。
这样做和很多边界情况不一致并且 Rakudo 内部大量使用了一种叫做 Parcel 的数据类型, 之后 Parcel 被认为是一个 Bad Idea(糟糕的设计) — 主要是因为性能问题。
2015 年 7 月, Patrick 导入了一个涵盖 &amp;ldquo;Synopsis 7&amp;rdquo; 的孪生设计草案, 随后的月份中它变成官方的 S07。</description>
    </item>
    
  </channel>
</rss>