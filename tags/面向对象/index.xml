<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面向对象 on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
    <description>Recent content in 面向对象 on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 22 Oct 2016 00:52:52 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于 Perl 6 你要知道的 10 件事</title>
      <link>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eperl6%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Sat, 22 Oct 2016 00:52:52 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eperl6%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</guid>
      <description>Ten Things You Need To Know about Perl 6 Jeffrey Goff, Evozon Systems LLC OSCON London 2016 https://github.com/drforr http://theperlfisher.blogspot.ro  资源  perl6.org (obviously) docs.perl6.org - Online documentation modules.perl6.org - CPAN Lite
 rakudo.org - Where to get the latest
 https://github.com/tadzik/rakudobrew - Perlbrew for Perl 6
 https://github.com/tadzik/panda/ - Module installer
 irc://irc.freenode.org/perl6 - #perl6 on IRC.freenode.org
 http://rosettacode.org/wiki/Category:Perl_6 - Sample source
  要闻  干净, 一次性的可解析的文法 对用户友好的错误信息 友好的 Unicode 对初学者有帮助的符号 Math that works 函数签名 用正则表达式引导 OO with a type lattice built on a Metaprogramming model 自定义运算符 内置并发  一次性文法 my @doctor = { :first(&#39;Christopher&#39;), :last(&#39;Eccleston&#39;), years =&amp;gt; 1 }, { :first(&#39;David&#39;), :last(&#39;Tennant&#39;), years =&amp;gt; 4 }, { :first(&#39;Matt&#39;), :last(&#39;Smith&#39;), years =&amp;gt; 4 }, { :first(&#39;Peter&#39;), :last(&#39;Capaldi&#39;), years =&amp;gt; 3 }; say &#39;First New Who Doctor: &#39;, @doctor[0]{&#39;first&#39;}, &#39; &#39;, @doctor[0]&amp;lt;last&amp;gt;; say &amp;quot;Average run: &amp;quot; ~ @doctor.</description>
    </item>
    
    <item>
      <title>面向对象的 Perl 6</title>
      <link>https://ohmysummer.github.io/post/2015-06-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84perl6/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84perl6/</guid>
      <description>Perl 6 有很多预先定义好的类型，这些类型可以归为 2 类：普通类型和原生类型。原生类型用于底层类型（例如 uint 64）。原生类型没有和对象同样的功能，尽管你可以在它们身上调用方法， 它们还是被包装成普通的对象。所有你能存储到变量中的东西要么是一个原生的 value， 要么是一个对象。这包括字面值、类型（类型对象）、code 和容器。
使用对象 方法可以有参数， 但是方法名和参数列表之间不可以有空格：
say &amp;quot;abc&amp;quot;.uc; # ^^^ 不带参数的方法调用 my @words = $string.comb(/\w+/); # ^^^^^^^^^^^^ 带一个参数的方法调用  另外一种方法调用的语法将方法名和参数列表用一个冒号分开(冒号紧跟方法名, 中间不能有空格):
say @*INC.join: &#39;:&#39;;  方法能返回一个可变容器, 这种情况下 你可以赋值给方法调用的返回值.
$*IN.input-line-separator = &amp;quot;\r\n&amp;quot;;  类型对象 Types本身就是对象 ，你可以使用类型的名字获取 type object :
my $int-type-obj = Int;  你可以通过调用 WHAT 方法查看任何对象的 type object(它实际上是一个方法形式的macro):
my $int-type-obj = 1.WHAT;  使用 === 操作符可以比较 类型对象的相等性：
sub f(Int $x) { if $x.</description>
    </item>
    
  </channel>
</rss>