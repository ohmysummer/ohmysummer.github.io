<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Signature on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/tags/signature/</link>
    <description>Recent content in Signature on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 12 Apr 2016 10:54:24 +0200</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/signature/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl 6 中的签名</title>
      <link>https://ohmysummer.github.io/post/2016-04-12-perl6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Tue, 12 Apr 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-12-perl6%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/</guid>
      <description>签名也是对象 class Signature {}  签名是代码对象参数列表的静态描述。即, 签名描述了你需要什么参数和多少参数传递给代码或函数以调用它们。
传递参数给签名把包含在 Capture 中的参数绑定到了签名上。
&amp;gt; sub a($a, $b) {}; &amp;gt; &amp;amp;a.signature.perl.say :($a, $b) &amp;gt; my $b = -&amp;gt; $a, $b {}; &amp;gt; $b.signature.perl.say :($a, $b)  签名是一个对象, 就像 Perl 6 中的任何其它东西一样。 任何 Callable 类型中都有签名, 并且它能使用 .signature方法获取到。
class Signature { ... }  签名字面量 签名出现在子例程和方法名后面的圆括号中, 对于 blocks 签名出现在 -&amp;gt;或 &amp;lt;-&amp;gt; 箭头后面, 或者作为变量声明符(例如 [my](https://docs.perl6.org/syntax/my) )的输入, 或者以冒号开头作为单独的项。
sub f($x) { } # ^^^^ sub f 的签名 method x() { } # ^^ 方法 x 的签名 my $s = sub (*@a) { } # ^^^^^ 匿名函数的签名 for &amp;lt;a b c&amp;gt; -&amp;gt; $x { } # ^^ Block 的签名 my ($a, @b) = 5, (6,7,8); # ^^^^^^^^ 变量声明符的签名 my $sig = :($a, $b); # ^^^^^^^^ 独立的签名对象  签名字面量可以用于定义回调或闭包的签名。</description>
    </item>
    
    <item>
      <title>探索Perl6的Signatures,第二部分</title>
      <link>https://ohmysummer.github.io/post/2015-08-29-%E6%8E%A2%E7%B4%A2perl6%E7%9A%84signatures%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-29-%E6%8E%A2%E7%B4%A2perl6%E7%9A%84signatures%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>在我们探索 Perl 6 签名的第一部分中, 我们了解了怎么使用 Perl 6 强大而灵活的类型系统来约束具名参数和位置参数是如何被传递给子例程和方法的。我们还涉及了怎么使用 slurp 签名来创建能接收任意具名和位置参数列表的可变函数。
Perl 6 的签名系统提供了更多。在这篇文章中我们将验证其中更高级的特性, 它们让 Perl 6 的调用语义更强大。
Class 约束 你可以使用签名来指定传递进函数中的参数的类型约束。你使用的类型可以是任意类名。
sub foo( Numeric $foo, Str $bar) { say &amp;quot;my string is $bar and my number is $foo&amp;quot; }  这个签名要求我们传递 Numeric 和 Str 类型的参数。但是因为 Perl 6 的内置类型实际上就是类(classes), 并且因为 Numeric 拥有几个子类型, 我们可以传递进任何数字类型, 它都能工作:
foo(42, &amp;quot;blah&amp;quot;); foo(42.99, &amp;quot;yoohoo&amp;quot;); foo(3+9i, &amp;quot;hellooooooo&amp;quot;); # etc  我们自己定义的类中签名的工作原理也一样。
class Foo { has $.prop is rw; } sub inspect-a-foo( Foo $my-foo ) { say &amp;quot;this foo&#39;s property is &amp;quot; ~ $my-foo.</description>
    </item>
    
  </channel>
</rss>