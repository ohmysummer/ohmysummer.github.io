<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Using Raku on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/using-raku/</link>
    <description>Recent content in Using Raku on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 14 Mar 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/using-raku/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Raku(二)</title>
      <link>https://ohmysummer.github.io/post/2016-03-14-using-raku%E4%BA%8C/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-14-using-raku%E4%BA%8C/</guid>
      <description>捕获 签名不仅仅是语法，它们是含有一列参数对象的 first-class 对象 。同样地，有一种含有参数集的数据结构,叫捕获。捕获有位置和命名两个部分，表现的就像列表和散列。像列表的那部分含有位置参数，而像散列的那部分含有命名参数。
创建和使用捕获 无论你什么时间写下一个子例程调用，你就隐式地创建了一个捕获。然而，它随即被调用消耗了。有时，你想做一个捕获，存储它，然后将一个或多个子例程应用到它包含的一系列参数上。为了这，使用 n(&amp;hellip;) 语法。
my @tasks = n(39, 3, action =&amp;gt; { say $^a + $^b }), n(6, 7, action =&amp;gt; { say $^a * $^b });  这里，@tasks数组最后会包含两个捕获，每个捕获各含有两个位置参数和一个命名参数。捕获中的命名参数出现在哪并没有关系，因为他们是按名字传递，而非按位置。就像数组和散列，使用 | ，捕获也能被展平到参数列表中去:
sub act($left, $right, :$action) { $action($left, $right); } for @tasks -&amp;gt; $task-args { act(|$task-args); }  However, in this case it is specifying the full set of arguments for the call, including both named and positional arguments.</description>
    </item>
    
    <item>
      <title>Using Raku(一)</title>
      <link>https://ohmysummer.github.io/post/2015-03-14-using-raku%E4%B8%80/</link>
      <pubDate>Sat, 14 Mar 2015 13:14:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-14-using-raku%E4%B8%80/</guid>
      <description>第一章 概要 Comming soon!
第二章 基础 假设有一场乒乓球比赛，比赛结果以这种格式记录： Player1 Player2 | 3:2 这意味着选手1与选手2的比分为3:2, 你需要一个脚本算出每位选手赢了几场比赛并且胜了几局。 输入数据（存储在一个叫做scores的文件中）像下面这样：
Beth Ana Charlie Dave Ana Dave | 3:0 Charlie Beth | 3:1 Ana Beth | 2:3 Dave Charlie | 3:0 Ana Charlie | 3:1 Beth Dave | 0:3  第一行是选手清单。随后每一行记录着比赛结果。
这里使用Raku给出一种解决方案：
use v6; my $file = open &#39;scores&#39;; my @names = $file.get.words ; #get方法读入一行，每调用一次get，读取一行 # &amp;gt; @names.perl # Array.new(&amp;quot;1&amp;quot;, &amp;quot;Beth&amp;quot;, &amp;quot;Ana&amp;quot;, &amp;quot;Charlie&amp;quot;, &amp;quot;Dave&amp;quot;) my %matches; # 赢得比赛次数 my %sets; # 赢得比赛局数 for $file.</description>
    </item>
    
  </channel>
</rss>