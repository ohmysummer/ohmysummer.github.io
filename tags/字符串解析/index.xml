<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>字符串解析 on 焉知非鱼</title>
    <link>http://ohmysummer.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</link>
    <description>Recent content in 字符串解析 on 焉知非鱼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Nov 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://ohmysummer.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>简单字符串解析</title>
      <link>http://ohmysummer.github.io/post/2015-11-25-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>http://ohmysummer.github.io/post/2015-11-25-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</guid>
      <description>简单字符串解析 我已经以好几种方式使用 Perl 6 解析用引号引起的字符串了。 但是我想知道有没有更好更干净的方法。下面有一个为引起的字符串准备的小型 grammar 而且还有一些测试:
grammar String::Simple::Grammar { our $quote; rule TOP {^ &amp;lt;string&amp;gt; $} # Note for now, {} gets around a rakudo binding issue token string { &amp;lt;quote&amp;gt; {} :temp $quote = $&amp;lt;quote&amp;gt;; &amp;lt;quotebody&amp;gt; $&amp;lt;quote&amp;gt; } token quote { &#39;&amp;quot;&#39; | &amp;quot;&#39;&amp;quot; } token quotebody { ( &amp;lt;escaped&amp;gt; | &amp;lt;!before $quote&amp;gt; . )* } token escaped { &#39;\\&#39; ( $quote | &#39;\\&#39; ) } } class String::Simple::Actions { method TOP($/) { make $&amp;lt;string&amp;gt;.</description>
    </item>
    
  </channel>
</rss>