<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 6 Adevnt Calendar on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/perl-6-adevnt-calendar/</link>
    <description>Recent content in Perl 6 Adevnt Calendar on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 05 Dec 2018 12:17:44 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/perl-6-adevnt-calendar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第五天 - 变量</title>
      <link>https://ohmysummer.github.io/post/2018-12-05-variables/</link>
      <pubDate>Wed, 05 Dec 2018 12:17:44 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-05-variables/</guid>
      <description>这么简单的事，不是吗？ 变量是一个保存着值的名字。
有时候，它持有的值可能会被另一个值所取代 - 因此就是名字。 （根据外科医生的说法，没有经常变化的变量应该看医生，并要求被诊断为常数。）
虽然它们很容易掌握，而且基本上每种语言都有它们，但我今天的目标是让你相信变量实际上非常棘手。 好的方式！ 我的目的是让你被这篇博文绊倒，茫然，喃喃自语“我以为我知道变量，但我真的不知道&amp;hellip;&amp;hellip;”。
接近最后，实验语言007也将会出现，我考虑变量这么多完全是这种语言的过错。
左还是右？ 变量奇怪的第一种方式是它们以两种完全不同的方式使用。
my $x = &amp;quot;Christmas&amp;quot;; say(&amp;quot;Merry &amp;quot; ~ $x); # reading $x = &amp;quot;Easter&amp;quot;; # writing  有时我们使用变量来读取值，有时我们使用它们来写一个值。但在这两种情况下，语法看起来完全一样！一些较旧的语言（例如Forth）实际上对这两种用法有不同的语法，我喜欢它们。但是这样的惯例似乎并没有幸存到现代。
相反，我们通过语法位置来区分这两种用法。如果你在赋值的左侧，那么你就被写了。否则，你正在被读取。
在文献中，这两种用途分别称为 lvalues 和 *rvalues*。分别为“左”和“右”。
Rvalues 非常正常，与我们对变量的一般考虑方式相对应;他们只是计算它们包含的值。然而，Lvalues 很奇怪。它们更像是盒子，你可以把东西放入（或内存位置？引用？），或者如果不是盒子本身，那么分离的能力放入其中。如果 lvalues 有一个类型，它看起来像 (T) -&amp;gt; void，接受 T 但不返回任何东西的东西。
参数 变量对现代编程至关重要。 还有一个原则表明它们完全没有必要。
那就对了！ Tennent 的通信原则！ （我知道你在想什么。不，我说的不是那个 Tennant。
这个原则主要指向一种在程序中重写所有变量声明的方法，因此它们是参数声明。 一个例子应该足以展示一般原则：
# Before my $veggie = &amp;quot;potato&amp;quot;; say &amp;quot;$veggie, and that&#39;s all I have to say about that!</description>
    </item>
    
    <item>
      <title>第四天 - New Perl6 Pod Features for the New Year</title>
      <link>https://ohmysummer.github.io/post/2018-12-04-new-perl6-pod-features-for-the-new-year/</link>
      <pubDate>Tue, 04 Dec 2018 22:37:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-04-new-perl6-pod-features-for-the-new-year/</guid>
      <description>介绍 Rakudo NQP 文件包含解析 Perl 6 输入文件并将其转换为正在运行的 Perl 6 程序的代码。 本文将重点介绍最近使用 Rakudo NQP 文件时的经验所学到的一些细节。 这项工作涉及实现一些尚未实现的（NYI）Perl 6 POD 功能，我希望尽快合并这些更改。
准备 使用的 NQP 文件保存在 https://github.com/rakudo/rakudo/src/Perl6 的git存储库中。 有关我的开发设置和工作流的更多背景信息，请参阅 https://perl6advent.wordpress.com/2017/12/08/ 上的 2017 年 Perl 6 Advent 条目。
背景 在我实现 NYI POD 功能的过程中，我已经给我添加到 Rakudo 仓库中的文档添加了注释: rakudo/docs/rakudo-nqp-and-pod-notes.md。我更新它，因为我发现了可能没有记录的新内容或者可能不容易找到其文档。该文件还包含一份完整的清单，通过我的计算，NYI POD 功能。以下是我已经工作了几个月的 NYI POD 功能列表，我希望在今年或新年初完成（以及每个功能的 roast 测试）:
 NYI: %config :numbered 对于段落或分隔的POD块，使用&amp;rsquo;#&amp;lsquo;别名 NYI: POD 数据块 NYI: 以defn块术语格式化代码  缺少的项目描述在由 Damian Conway 博士撰写的精美制作的概要S26中，Larry Wall 是多产的得力男人 - 世界知名的 Perl 专家和著名的 Perl 作者。（请注意，现在很少有人在积极研究 POD，我的 NYI 功能列表可能不完整.</description>
    </item>
    
    <item>
      <title>第三天 – Perl 6 – jmp 2 it</title>
      <link>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</link>
      <pubDate>Mon, 03 Dec 2018 09:54:10 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</guid>
      <description>jmp是一个Perl 6驱动的命令行程序，我每天都使用它来浏览成堆的Perl并快速跳转到我的$EDITOR。 我尝试在编码时保持流状态，并且能够快速搜索文件然后直接跳转到编辑器中。
jmp 是一个简单的基于终端的前端到您最喜欢的代码搜索工具（例如，rgrep，ag，ack，git grep等）。 它会显示一个搜索结果列表，您可以在跳转到编辑文件之前快速浏览（例如，vim，nano，comma等）。
它的工作原理如下：
最近我重构了 jmp，以便在 Terminal::Print 模块的帮助下改进用户界面。 Terminal::Print 提供了一个方便的二维网格，用于在终端屏幕上绘图。 还有一个用于异步处理用户输入的模块。
这是 jmp 代码，只要用户按下某个键，它就会响应：
my $in-supply = decoded-input-supply; my $timer = Supply.interval(1).map: { Tick }; my $supplies = Supply.merge($in-supply, $timer); react { whenever $supplies -&amp;gt; $_ { when Tick {} when &#39;CursorUp&#39; { self.pager.cursor-up; } when &#39;CursorDown&#39; { self.pager.cursor-down; } when &#39;CursorRight&#39; | &#39;PageDown&#39; { self.pager.next; } when &#39;CursorLeft&#39; | &#39;PageUp&#39; { self.pager.previous; } when &#39;x&#39; | &#39;X&#39; { self.</description>
    </item>
    
    <item>
      <title>第二天 – Like 6 Perls in a Pod: document everything (and test the documentation)</title>
      <link>https://ohmysummer.github.io/post/2018-12-02-document-every-thing/</link>
      <pubDate>Sun, 02 Dec 2018 11:01:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-02-document-every-thing/</guid>
      <description>Like 6 Perls in a Pod: document everything 圣诞节即将到来，圣诞老人很沮丧。 他的收件箱被来自全国各地的男孩和女孩的来信塞爆了。
但，
这些信是写给圣诞老人的吗？ 是否通过签名正确识别了孩子，以便将礼物送给对的人而不是给其他可能不值得的人？ 他们是针对圣诞老人的，而不是那些冒名顶替者，复活节兔子，或者更糟糕的是，三个所谓的 - 我不知道为什么 - 来自东方的智者？ 最糟糕的是，他个人是否必须通过他的王室和神圣的自我来检查所有这些东西？
没有。
Perl 6 以下面的方式来救援：
grammar
unit grammar Santa-Letter; token TOP { &amp;lt;dear&amp;gt; \v+ &amp;lt;paragraph&amp;gt; [\v+ &amp;lt;paragraph&amp;gt;]* \v+ &amp;lt;signature&amp;gt;\v*} token paragraph { &amp;lt;superword&amp;gt;[ \h+ &amp;lt;superword&amp;gt;]+ } token superword { &amp;lt;word&amp;gt; | &amp;lt;enhanced-word&amp;gt; } token word { \w+ } token enhanced-word { &amp;lt;word&amp;gt; [\,|\.|\:] } token dear { Dear \h+ [S|s]anta [\,|\:]? } token signature { \h+ \w+ \h* \w* }  该单位向圣诞老人宣布一封致敬的信，其后是一个或多个段落，最后是一个签名，其前面应有一个水平的空格，如 \h 所示。</description>
    </item>
    
    <item>
      <title>第一天 - Porting Vigilance, integrating Perl 6 with standard tools</title>
      <link>https://ohmysummer.github.io/post/2018-12-01-porting-vigilance/</link>
      <pubDate>Sat, 01 Dec 2018 21:49:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-01-porting-vigilance/</guid>
      <description>移植 Vigilance，将Perl 6与标准工具集成在一起 大家好，今天我们将采用基础设施脚本并将其从Perl 5移植到Perl 6.本文基于James Clark的一对帖子，你可以在这里找到：
 第1部分 第2部分  此脚本用于创建和验证MD5总和。 这些是128位值，可用于验证数据完整性。 虽然MD5已经被证明在防范恶意行为者方面不安全，但它对于检测磁盘损坏仍然很有用。
Perl 6生态系统正在发展，其中包含多种工具，这些工具可以从Perl 5 CPAN移植，也可以替代。 我将介绍原始脚本和移植的几个方面，并说明我为什么要进行一些特定的更改。 希望这会鼓励你出去移植你自己的小脚本。
Shebang 和导入 Perl 5版本使用一些基础设施和一些实用程序来处理Unicode并使命令行输出更好：
#!/usr/bin/perl -CSDA use strict; use warnings; use utf8; use Encode qw/encode_utf8 decode_utf8/; use Getopt::Long; use Digest::MD5; use Term::ANSIColor; use Term::ProgressBar; use File::Find; use File::Basename; use Data::Dumper;  Perl 6默认启用了警告和限制，并且内置了Unicode支持，因此我们可以将其保留。 Data::Dumper也已经实现，它具有非常有用的IO功能。 将所有这些加在一起我们可以得到一个非常精益的标头：
#!/usr/bin/env perl6 use v6; use Digest::MD5; use Terminal::ANSIColor; use Terminal::Spinners;  命令行选项 Perl 5有许多用于处理命令行参数的很棒的模块，在我们使用 Getopt::Long 的原始脚本中：</description>
    </item>
    
  </channel>
</rss>