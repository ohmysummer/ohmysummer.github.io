<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Introspection on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/introspection/</link>
    <description>Recent content in Introspection on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 25 Jul 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/introspection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introspection</title>
      <link>https://ohmysummer.github.io/post/2015-07-25-introspection/</link>
      <pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-25-introspection/</guid>
      <description>Raku 支持&amp;rdquo;泛型, roles 和 多重分发&amp;rdquo;, 它们都是很好的特点, 并且已经在其它 advent calendar 中发布过了。
但是今天我们要看的是 MOP。 &amp;ldquo;MOP&amp;rdquo;代表着元对象协议(&amp;ldquo;Meta-Object Protocol&amp;rdquo;)。那意味着, 它们实际上是你能从用户那边改变的一部分, 而不是对象、类等定义语言的东西。
实际上, 在 Raku中, 你可以为类型添加方法, 移除某个方法, 包裹方法, 使用更多能力增强类(OO::Actors 和 OO::Monitors 就是两个这样的例子), 或者你可以完全重定义它(并且, 例如, 使用 Ruby-like 的对象系统。这儿有个例子)。
但是今天, 我们首先看一下第一部分: 自省。在类型创建完之后查看它的类型, 了解它, 并使用这些信息。
我们将要创建的模块是基于 Sixcheck 模块(一个 QuickCheck-like 模块)的需求: 为某个类型生成一些随机数据, 然后把数据喂给我们正测试的函数, 并检查某些后置条件(post-condition)。
所以, 我们先写出第一个版本:
my %special-cases{Mu} = (Int) =&amp;gt; -&amp;gt; { (1..50).pick }, (Str) =&amp;gt; -&amp;gt; { (&#39;a&#39;..&#39;z&#39;).pick(50).join(&#39;&#39;) }, ; sub generate-data(Mu:U \t) { %special-cases{t} ?? %special-cases{t}() !! t.</description>
    </item>
    
  </channel>
</rss>