<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Command Line on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/command-line/</link>
    <description>Recent content in Command Line on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 03 Dec 2018 09:54:10 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/command-line/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Day 3 – Perl 6 – jmp 2 it</title>
      <link>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</link>
      <pubDate>Mon, 03 Dec 2018 09:54:10 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</guid>
      <description>jmp是一个Perl 6驱动的命令行程序，我每天都使用它来浏览成堆的Perl并快速跳转到我的$EDITOR。 我尝试在编码时保持流状态，并且能够快速搜索文件然后直接跳转到编辑器中。
jmp 是一个简单的基于终端的前端到您最喜欢的代码搜索工具（例如，rgrep，ag，ack，git grep等）。 它会显示一个搜索结果列表，您可以在跳转到编辑文件之前快速浏览（例如，vim，nano，comma等）。
它的工作原理如下：
最近我重构了 jmp，以便在 Terminal::Print 模块的帮助下改进用户界面。 Terminal::Print 提供了一个方便的二维网格，用于在终端屏幕上绘图。 还有一个用于异步处理用户输入的模块。
这是 jmp 代码，只要用户按下某个键，它就会响应：
my $in-supply = decoded-input-supply; my $timer = Supply.interval(1).map: { Tick }; my $supplies = Supply.merge($in-supply, $timer); react { whenever $supplies -&amp;gt; $_ { when Tick {} when &#39;CursorUp&#39; { self.pager.cursor-up; } when &#39;CursorDown&#39; { self.pager.cursor-down; } when &#39;CursorRight&#39; | &#39;PageDown&#39; { self.pager.next; } when &#39;CursorLeft&#39; | &#39;PageUp&#39; { self.pager.previous; } when &#39;x&#39; | &#39;X&#39; { self.</description>
    </item>
    
  </channel>
</rss>