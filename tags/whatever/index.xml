<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Whatever on 焉知非鱼</title>
    <link>http://ohmysummer.github.io/tags/whatever/</link>
    <description>Recent content in Whatever on 焉知非鱼</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2017 12:50:24 +0200</lastBuildDate>
    
	<atom:link href="http://ohmysummer.github.io/tags/whatever/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第十一天-Perl 6 中所有的星号</title>
      <link>http://ohmysummer.github.io/post/2017-12-11-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9perl6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9A%84%E6%98%9F%E5%8F%B7/</link>
      <pubDate>Mon, 11 Dec 2017 12:50:24 +0200</pubDate>
      
      <guid>http://ohmysummer.github.io/post/2017-12-11-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9perl6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9A%84%E6%98%9F%E5%8F%B7/</guid>
      <description>在今年的 Perl 6 Advent Calendar 中, 雪花被今天的博客文章承包了。 我们将检阅使用了 * 字符的结构。 在 Perl 6 中，根据上下文的不同，您可以叫它星星（或者，如果你愿意的话，可以叫它星号）或者 *whatever*。
Perl 6 不是一个隐秘的编程语言， 在许多方面它的语法比 Perl 5 更加一致。另一方面，有些地方需要花时间来开启对语法的信心。
让我们看看 * 的不同用法，从最简单的开始，旨在了解最烧脑的例如 * ** *。
前两种用法很简单，不需要太多的讨论：
1. 乘法 单个星号用于乘法。严格来讲, 这是一个中缀操作符 infix:&amp;lt;*&amp;gt;, 它的返回值为 Numeric。
say 20 * 18; # 360  2. 幂 两个星号 ** 是幂操作符。再次, 这是一个中缀操作符 infix:&amp;lt;**&amp;gt;, 它返回 Numeric 结果, 计算两个给定值点幂。
say pi ** e; # 22.4591577183611  正则表达式中同样也使用了两个标记（* 或 **），它们表示不同的东西。 Perl 6 的一个特点是它可以很容易地在不同的语言之间切换。 正则表达式和 grammar 都是这样的内部语言的例子，其中同样的符号在 Perl 6 中可能意味着不同的含义。</description>
    </item>
    
    <item>
      <title>Perl 6 中的 *, $_ 和 $</title>
      <link>http://ohmysummer.github.io/post/2017-02-04-whatever-star-vs.-_-vs-/</link>
      <pubDate>Sat, 04 Feb 2017 22:55:48 +0000</pubDate>
      
      <guid>http://ohmysummer.github.io/post/2017-02-04-whatever-star-vs.-_-vs-/</guid>
      <description>cale2 问了一个很难的问题 今天卡尔2拒绝问简单的问题。我们来看它今天问了什么难题：
  我需要一份关于 * vs $_ vs $ 的指南。
 这个问题问得多么好。那三种东西都是语法糖, 因为上下文转换, 它们能很好地避免折行和更少的 bugs。
我们从我们的老朋友主题变量 $_ 开始。在 Perl 5 中它刚好出现在每个 sub 的外面。在 Perl 6 中它出现在块的默认值之外。
my &amp;amp;block = { &#39;oi?&#39; }; &amp;amp;block.signature.say; # OUTPUT?(;; $_? is raw)??  块的默认签名是一个名为 $_ 的位置参数。因此每个块都有一个主题变量 $_。还有其他设置 $_ 主题变量的语句，而不引入一个新的块，像 with 和 given （given 的确引入了一个块，但它是特殊的，我在这里不说明细节）。
say $_ with 42; # OUTPUT ?42??  因为它是默认的, Perl 6 会在很多地方期待它的出现。最突出的是当没有对象方法调用时。
$_ = 42; say &#39;oi?&#39; when 42; .</description>
    </item>
    
    <item>
      <title>Whatever Star</title>
      <link>http://ohmysummer.github.io/post/2016-09-25-whatever-star/</link>
      <pubDate>Sun, 25 Sep 2016 16:14:05 +0000</pubDate>
      
      <guid>http://ohmysummer.github.io/post/2016-09-25-whatever-star/</guid>
      <description>Whatever 是什么?  Placeholder for unspecified value/parameter - 未指定的值/参数的占位符。
 * 字面量在 「term」 位置上创建 「Whatever」 对象。 * 的大部分魔法来自于 「Whatever 柯里化」. 当 * 作为 item 与很多操作符组合使用时, 编译器会把表达式转换为 「WhateverCode」 类型的闭包.
my $c = * + 2; # same as -&amp;gt; $x { $x + 2 }; say $c(4); # 6  如果一个表达式中有 N 个 *, 则会产生一个含有 N 个参数的闭包:
my $c = * + *; # same as -&amp;gt; $x, $y { $x + $y }  在复杂的表达式中使用 * 也会产生闭包:</description>
    </item>
    
  </channel>
</rss>