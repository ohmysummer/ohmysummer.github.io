<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects on Raku Programming</title>
    <link>https://ohmysummer.github.io/tags/objects/</link>
    <description>Recent content in Objects on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 09 Aug 2015 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/objects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>S12-Objects</title>
      <link>https://ohmysummer.github.io/post/2015-08-09-s12-objects/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-09-s12-objects/</guid>
      <description>标题  大纲 12： 对象(Objects)
版本  创建于： 2004-08-27
上次修改时间： 2014-8-26
版本：134
概述  这个大纲总结了第12个启示录, 它探讨关于面向对象的编程。
类 (Classes)  S12-class/lexical.t lines 12–61
S12-class/basic.t lines 13–50
S14-roles/lexical.t lines 12–47
类是使用关键字 class 声明的模块。 至于模块, 即公共存储, 接口, 并且类的名字通过包和它的名字来表示, 这总是(但不必须)一个全局的名字。 类是一个模块, 因此能导出东西, 但是类添加了更多的行为来支持 Raku 的标准的基于类的 OO。
作为类型对象(type object), 类名代表了它的类型的所有可能值, 因此在计算那种类型的普通对象能做什么时, 类型对象能用作任何属于该类型的&amp;quot;真实&amp;quot;对象的代理。 类对象是一个对象, 但是它不是一个类(Class), 因为 Raku 中没有强制性的 Class 类, 还因为在Raku 中类型对象被认为是未定义的。 我们想基于类的和基于原型的 OO 编程这两个都支持。所以, 所有的元编程是通过当前对象的 HOW 对象来完成的, 这可以把元编程代理给任何它喜欢的元模型上。 然而, 默认地, 从 Mu 派生的对象支持相当标准的基于类的模型。
有两种基本的类声明语法:
unit class Foo; # 文件的剩余部分是类的定义 has $.</description>
    </item>
    
  </channel>
</rss>