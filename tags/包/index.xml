<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>包 on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/tags/%E5%8C%85/</link>
    <description>Recent content in 包 on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 Oct 2016 23:17:11 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/%E5%8C%85/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl 6 中的包</title>
      <link>https://ohmysummer.github.io/post/2016-10-28-perl6%E4%B8%AD%E7%9A%84%E5%8C%85/</link>
      <pubDate>Fri, 28 Oct 2016 23:17:11 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-28-perl6%E4%B8%AD%E7%9A%84%E5%8C%85/</guid>
      <description>Packages - Organizing and referencing namespaced program elements
 包是指定程序元素的嵌套命名空间。 模块，类，Grammar是包类型。 像目录中的文件一样，通常可以使用其短名称（如果它们是本地的）或使用较长的名称来消除歧义的引用具名元素。
Names 名称是作为变量名称的合法部分的任何东西（不包括sigil符号）。 这包括：
$foo # 简单标识符 $Foo::Bar::baz # 通过 :: 分割的组合标识符 $Foo::($bar)::baz # 执行插值的组合标识符 $42 # numeric names $! # 某些标点符号变量  :: 用于分割嵌套的包名。
包限定名 普通的包限定名像这样:
$Foo::Bar::baz # 包 Foo::Bar 中的 $baz 变量  有时保持sigil与变量名很清晰，所以来写这个的一个替代方式是：
Foo::Bar::&amp;lt;$baz&amp;gt;  这在编译时解决，因为变量名是一个常量。
如果 :: 之前的名称部分为 null，则意味着包未指定并且必须搜索。 一般来说，这意味着跟在主sigil后面的初始 :: 是对编译时已知的名字的无操作(no-op)，但 ::() 也可以用来引入插值。 另外，在没有另一个sigil的情况下，:: 可以作为它自己的sigil，表明有意使用一个尚未声明的包名。
伪包 在名称前面保留以下伪包名称：
MY # 当前词法作用域中的符号 (aka $?SCOPE) OUR # 当前包中的符号 (aka $?</description>
    </item>
    
  </channel>
</rss>