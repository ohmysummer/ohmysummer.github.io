<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Types on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/tags/types/</link>
    <description>Recent content in Types on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 02 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/tags/types/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl 6 Types--成人之美</title>
      <link>https://ohmysummer.github.io/post/2016-08-02-perl-6-types-%E6%88%90%E4%BA%BA%E4%B9%8B%E7%BE%8E/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-02-perl-6-types-%E6%88%90%E4%BA%BA%E4%B9%8B%E7%BE%8E/</guid>
      <description>Perl 6 Types: 成人之美
在我的第一次大学编程语言课中， 我被告知 Pascal 语言在其它类型之外还拥有 Integer、Boolen 和 Stirng 类型。我知道了类型本来就该存在因为计算机很笨。当我在 C语言中涉猎的时候，我学到了更多有关 *int*、 char 和其它像在暖和的地方里地寄生虫， 还有我课桌底下嗡嗡的金属盒的声音。
Perl 5 没有类型，它给我的感觉就像骑着自行车无拘无束的追风少年，沿着斜坡而下。不久之后我一门心思钻到计算机硬件的缝隙中。我拥有数据并且我能用它做任何我想做的事， 只要我得到的不是错误的数据。当我搞定的时候，我从自行车上掉了下来并刮破了我的膝盖。
有了 Perl 6，鱼和熊掌可以兼得。你可以使用类型来避免它们。你可以拥有一个广域的类型来接收很多种类的值或窄类型。并且你可以享受代表机器智力的类型的速度， 或者你可以享受你自定义的代表你自己意志的类型的精度，类型为人类而生。
渐进类型 my $a = &amp;quot;whatever&amp;quot;; my Str $b = &amp;quot;strings only&amp;quot;; my Str:D $c = &amp;quot;defined strings only&amp;quot;; my int $d = 14; # native int sub foo ($x) { $x + 2 } sub bar (Int:D $x) returns Int { $x + 2 }  Perl 6 拥有渐进类型， 这意味着你要么可以使用它们，要么避免使用它们。所以究竟为什么要打扰它们呢？</description>
    </item>
    
  </channel>
</rss>