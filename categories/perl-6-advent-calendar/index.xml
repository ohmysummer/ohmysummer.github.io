<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl 6 Advent Calendar on Rakudo Perl 6</title>
    <link>https://ohmysummer.github.io/categories/perl-6-advent-calendar/</link>
    <description>Recent content in Perl 6 Advent Calendar on Rakudo Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Dec 2018 12:14:48 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/categories/perl-6-advent-calendar/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>第十八天 - 一棵 AVG 格式的圣诞树</title>
      <link>https://ohmysummer.github.io/post/2018-12-18-an-avg-christmas-tree/</link>
      <pubDate>Tue, 18 Dec 2018 12:14:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-18-an-avg-christmas-tree/</guid>
      <description>圣诞树是一种传统的象征，可以追溯到欧洲四百多年前，所以对于一篇关于创造圣诞树图像的出现文章来说，这可能更好。
树的典型，简化的表示是几个尺寸逐渐减小的三角形，彼此叠加并且具有小的重叠，因此使用计算机程序很容易创建。
在这里，我将使用可缩放矢量图形（SVG）绘制图像，如上所述，它似乎非常适合任务。
关于SVG并创建它 SVG是一种XML文档格式，它将图像描述为点之间的一组矢量，它具有线条和形状的基元，并提供所描述对象的样式。
也许最简单的SVG文档是这样的：
&amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:svg=&amp;quot;http://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;http://www.w3.org/1999/xlink&amp;quot; width=&amp;quot;100&amp;quot; height=&amp;quot;100&amp;quot;&amp;gt; &amp;lt;g&amp;gt; &amp;lt;rect x=&amp;quot;5&amp;quot; y=&amp;quot;5&amp;quot; width=&amp;quot;90&amp;quot; height=&amp;quot;90&amp;quot; stroke=&amp;quot;black&amp;quot; fill=&amp;quot;green&amp;quot; /&amp;gt; &amp;lt;/g&amp;gt; &amp;lt;/svg&amp;gt;  这描述了侧面90的绿色填充正方形（单元基本上是抽象的并且相对于显示器的尺寸，因为图像的可缩放特性意味着它们可能不等同于例如像素。）
现在我们可以在程序中使用一些变量插值打印出XML，但是对于比上面的例子更复杂的事情，这可能会非常繁琐且容易出错。幸运的是Perl 6有一个方便的SVG模块，它负责从描述它的数据结构中实际创建格式良好的XML文档。因此，我们的示例矩形可以使用以下内容创建：
use SVG; say SVG.serialize( svg =&amp;gt; [ width =&amp;gt; 100, height =&amp;gt; 100, :g[:rect[:x&amp;lt;5&amp;gt;, :y&amp;lt;5&amp;gt;, :width&amp;lt;90&amp;gt;, :height&amp;lt;90&amp;gt;, :stroke&amp;lt;black&amp;gt;, :file&amp;lt;green&amp;gt;]], ], );  本质上，参数serialize是一组嵌套的Pairs：其中value是标量类型，键和值用于形成XML属性，其中值是List of Pairs，这将创建一个以键命名的XML元素，列表中的每个对都被解释为如上所述，从而允许以简单的声明方式构建复杂文档。
所以我们可以通过构造适当的数据结构来生成我们的示例圣诞树，但是因为我们的图像中可能至少有四个对象（三个三角形和一个用于树干的矩形）及其相关属性，这可能会非常不合适如果我们想改变某些东西，很难改变。
所以…
我们抽象吧！ 为了使我们的SVG生成更加灵活并为未来的代码重用开辟了机会，创建一组代表我们可能想要使用的SVG原语的类并抽象出将要生成的数据结构可能是有意义的。序列化为XML。
所以让我们从可以生成原始矩形示例的东西开始：
use SVG; class SVG::Drawing { role Element { method serialize() { ... } } has Element @.</description>
    </item>
    
    <item>
      <title>第十七天 - 通往幸福的编译之路</title>
      <link>https://ohmysummer.github.io/post/2018-12-17-compiling-our-way-to-happiness/</link>
      <pubDate>Mon, 17 Dec 2018 10:35:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-17-compiling-our-way-to-happiness/</guid>
      <description>第17天 - 通往幸福的编译道路 如果我们选择接受它，我们的任务就是解决SEND + MORE = MONEY代码中的问题。不，请等一下，让我这样说吧：
 S E N D + M O R E ----------- M O N E Y  它意味着相同，但是这样放置它更具视觉冲击力，特别是因为我们很多人在学校这样做了。
基本规则很简单。
 每个字母代表0到9之间的数字。 字母代表*不同的*数字; 两个字母可能不共享相同的数字。 前导数字（在我们的拼图中，S 和 M）不能为零。如果为零他们就不会是前导数字！  鉴于这些限制因素，上述难题有一个独特的解决方案。
我鼓励你找到解决方案。写一点代码，坚持一下！在这篇文章中，我们会这样做，但后来（关键）*不满足*于此，并最终陷入嵌套玩偶的情况，其中代码编写代码直到出现真正整洁的东西。结论将拼出最终目标-坚持不住了，我被实时地通过多个委员会获悉，正确的说法是“ *一个*终极愿景” -为了 Perl 6。
我们开工吧。
Marcus Junius Brute Force（The Younger） 我们当天的第一语言及其相应的解决方案是 Perl 6 本身。这里没有技巧; 我们只是像愤怒的公牛一样向问题域冲去，尝试一切。事实上，我们确保不要在这个问题上耍小聪明，只是尝试尽可能直接地表达解决方案。
for 0..9 -&amp;gt; int $d { for 0..9 -&amp;gt; int $e { next if $e == $d; my int $y = ($d + $e) % 10; my int $_c1 = ($d + $e) div 10; for 0.</description>
    </item>
    
    <item>
      <title>第十六天 - 检查你的列表俩次</title>
      <link>https://ohmysummer.github.io/post/2018-12-16-checking-your-list-twice/</link>
      <pubDate>Sun, 16 Dec 2018 18:08:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-16-checking-your-list-twice/</guid>
      <description>从命令行了解 Perl 6 这是 Sniffles the Elf 的大好机会！在丝带矿山经过多年的苦差事后，他们终于被提升到了清单管理部门。作为一名闪亮的新助理尼斯名单审核员，Sniffles 正在走向重要时刻。
在 Sniffles 到达的第一天，他们的新老板格伦布尔先生正等着他。“好人清单管理很麻烦，当有人在服务器上洒了牛奶和饼干时，我们的数据被意外删除了。我们一直在忙着检查列表，我们忘了检查备份！现在我们必须从头开始重建一切！裁员后，我们有点人手不足，所以由你来挽救这一天。“
Sniffles，特别勤劳，津津乐道于这个问题。经过一些研究，他们意识到他们需要的所有数据都可用，他们只需要收集它。
他们的朋友在丝带矿山中，一位名叫 Hermie 的自称口述历史学家一直在谈论 Perl 6 有多么伟大。Sniffles 决定尝试一下。
就像拔牙? Sniffles 首先用一种新语言抛出标准的第一个脚本：
use v6.d; say &amp;quot;Nice List restored!!!&amp;quot;;  该脚本运行并尽职尽责地打印出消息。距离圣诞节还有几天了，是时候认真对待 Perl 6文档了。
稍微浏览一下 Sniffles 的 Perl 6 命令行界面实用程序 页面。他们喜欢它描述的 MAIN 这个特殊子程序的外观。
say &#39;Started initializing nice lister.&#39;; sub MAIN() { say &amp;quot;Nice List restored!!!&amp;quot; } say &#39;Finished initializing nice lister.&#39;;  产生：
Started initializing nice lister. Finished initializing nice lister.</description>
    </item>
    
    <item>
      <title>第十五天 - 使用Perl 6构建(小型)航天器</title>
      <link>https://ohmysummer.github.io/post/2018-12-15-building-a-little-spacecraft-with-perl6/</link>
      <pubDate>Sat, 15 Dec 2018 14:41:59 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-15-building-a-little-spacecraft-with-perl6/</guid>
      <description>炫耀长耳朵 在上一篇文章中，我们遇到了某种特殊精灵的魔力：
enum Fuel &amp;lt;Solid Liquid Gas&amp;gt;; class SpeedChoice does ASNChoice { method ASN-choice { { mph =&amp;gt; (1 =&amp;gt; Int), kmph =&amp;gt; (0 =&amp;gt; Int) } } } class Rocket does ASNSequence { has Str $.name is UTF8String; has Str $.message is default-value(&amp;quot;Hello World&amp;quot;) is UTF8String; has Fuel $.fuel; has SpeedChoice $.speed is optional; has Str @.payload is UTF8String; method ASN-order { &amp;lt;$!name $!message $!fuel $!speed @!payload&amp;gt; } } my $rocket = Rocket.</description>
    </item>
    
    <item>
      <title>第十四天 - 使用 Perl 6 设计(小)航天器</title>
      <link>https://ohmysummer.github.io/post/2018-12-14-%E4%BD%BF%E7%94%A8perl6%E8%AE%BE%E8%AE%A1%E5%B0%8F%E8%88%AA%E5%A4%A9%E5%99%A8/</link>
      <pubDate>Fri, 14 Dec 2018 10:13:30 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-14-%E4%BD%BF%E7%94%A8perl6%E8%AE%BE%E8%AE%A1%E5%B0%8F%E8%88%AA%E5%A4%A9%E5%99%A8/</guid>
      <description>寻找共同点 大家好！
那些日子我花了一些时间在基础部件上工作，揭示了可能的惊喜，Perl 6 的 LDAP（轻量级目录访问协议）实现。
然而，现在谈论这个还为时尚早，所以我现在将有一些神秘的封面覆盖这个话题，因为我们有另一个 - 宇宙飞船！
航天器和LDAP之间的共同点是：LDAP规范使用一种称为符号的符号 ASN.1，它允许使用特定的文本语法定义抽象类型，并在 ASN.1编译器的帮助下，为特定的编程语言创建类型定义，以及什么是更多：此类型值的编码器和解码器，可以将您的值序列化为某些数据，例如，可以通过网络发送并在另一台计算机上很好地解析。
通过这种方式，您可以轻松地在应用程序中获得跨平台类型。编码器和解码器可以自动生成，不仅针对某些指定的编码格式，而且针对整个范围的二进制（例如 BER，PER和其他）和文本（例如SOAP）编码格式。
因此，为了完成工作，我必须至少实现 ASN.1Perl 6中的一些子集- 不是完整的规范，这很大，只关注LDAP规范中使用的功能。
“这听起来很有趣，但我们的宇宙飞船在哪里！？”，你可能会问。事实证明，这种 Rocket 类型是您在 ASN.1 Playground 网站上看到的第一件事，它让您可以免费访问 ASN.1编译器，它可以作为参考！
ASN.1 和限制 这是花哨的代码：
World-Schema DEFINITIONS AUTOMATIC TAGS ::= BEGIN Rocket ::= SEQUENCE { name UTF8String (SIZE(1..16)), message UTF8String DEFAULT &amp;quot;Hello World&amp;quot; , fuel ENUMERATED {solid, liquid, gas}, speed CHOICE { mph INTEGER, kmph INTEGER } OPTIONAL, payload SEQUENCE OF UTF8String } END  让我们快速浏览一下这个定义：</description>
    </item>
    
    <item>
      <title>第十三天 - 使用 Cro 和 Debian 从头构建 Web 服务</title>
      <link>https://ohmysummer.github.io/post/2018-12-13-web-server-from-scratch-with-cro-and-debian/</link>
      <pubDate>Thu, 13 Dec 2018 10:43:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-13-web-server-from-scratch-with-cro-and-debian/</guid>
      <description>我和圣诞老人​​谈过，他说他不知道如何在 Debian 上安装 Cro，所以我对自己说：我要帮助他。
如果您对 Apache 等 Web 服务器有一些经验，并且您已经听说过 Perl6 强大的并发/响应方面，那么您肯定有兴趣了解 Cro 服务。这篇文章的受众是具有 Debian 基本经验的人，或者在 Perl6 新手&amp;hellip;就像圣诞老人一样。
Cro 是一个 Perl6 模块，它提供了轻松构建反应式和并发服务所需的一切，例如：Web 服务器。
在这篇文章中，我们将看到如何在 Debian 中安装 Cro，这是最受欢迎的 Linux 发行版之一。然后，我将解释 Cro 的演示示例。
我们将使用 Debian 9,64 位（Stretch），我们将在安装后启动它。
安装 Rakudo Perl6 编译器 Rakudo 是 Cro 模块运行的当前 Perl6 编译器。安装 Rakudo 的常规方法是安装 Rakudo Star，但我更喜欢快速的方式：rakudo-pkg &amp;hellip;&amp;hellip;怎么样？只需从此 repo 下载并安装相应的 Debian 软件包。在我们的例子中，是来自 Debian 9, 64位的 .deb 文件。
使用 Debian 中的 root 用户，我们可以在 root home 中为 Rakudo 创建一个包文件夹，进入这个目录，下载 Debian 9, 64 位的当前 Rakudo 包，并安装它。就我而言：</description>
    </item>
    
    <item>
      <title>第十二天 - 构建灵活的 grammar</title>
      <link>https://ohmysummer.github.io/post/2018-12-12-building-a-flexible-grammar/</link>
      <pubDate>Wed, 12 Dec 2018 09:54:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-12-building-a-flexible-grammar/</guid>
      <description>圣诞老人夫人写了一个基础的 Grammar，以配合 GDPR 无知精灵从世界各地收集的有关今年 naughty 或 nice 的人的简单列表。
每个记录都是一个名称，后跟一个标签，后跟一个地址，然后是一个标签，然后是 naughty 或 nice 的评估，然后用换行符结束。
Batman 1 Batman Street, Gotham Nice Joker 5 Joker Street, Arkham Naughty Riddler 12 Riddler Street, Arkham Naughty Robin 2 Robin Street, Gotham Nice  她希望将 naughty 的人排除在一个列表中，将 nice 的人过滤到另一个列表中，因为 Krampus 将在今年处理所有 naughty 的人。
S.夫人用这样的 grammar 开头：
grammar naughty-nice-list { token TOP { &amp;lt;details&amp;gt;+ } # Find one or more records made up of name, address, assessment (defined below) token details { &amp;lt;name&amp;gt; &amp;lt;address&amp;gt; &amp;lt;assessment&amp;gt; } # Find the elements from below, in this order token name { .</description>
    </item>
    
    <item>
      <title>第十一天 - 使用 Perl 6 测试你的时刻表</title>
      <link>https://ohmysummer.github.io/post/2018-12-11-testing-your-times-tables-with-perl-6/</link>
      <pubDate>Tue, 11 Dec 2018 13:27:58 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-11-testing-your-times-tables-with-perl-6/</guid>
      <description>这几乎是在北极附近的精灵小学冬季学期结束之时。对于精灵而言，敏锐的人物头脑非常重要，而小精灵的数学老师 Hopper 女士希望确保他们在任期的倒数第二天保持他们的算术技能。（学期的最后一天保留用于观看电影和玩耍 - 很嗨皮）。
小精灵刚刚学会了他们的时间表（乘法表），最多12个，但他们并不像他们所想的那样擅长，其中一些人在圣诞节前将在玩具工作坊帮忙，那时候他们可能需要快速告诉大精灵有多少特定类型的玩具。
幸运的是，Elf Hopper 是一个非常聪明的精灵，拥有出色的数学和编码能力 - 自己。所以她起了一个快速的控制台应用程序来运行小精灵的学校颁发的 Perlix 6.0 boxen。
该程序允许小精灵通过运行它们在2至12次表中测试自己，或者如果它们提供单个数字参数，他们可以尝试任何他们喜欢的乘法表。
#!/usr/bin/env perl6 use v6; my $fixednum; my %score; my @exits = &amp;lt;exit quit&amp;gt;; $fixednum = @*ARGS[0] || 0; put &amp;quot;Type the answer, or quit or exit to end the test.&amp;quot;; loop { my $coefficient = (2..12).pick; my $number = $fixednum || (2..12).pick; my $answer = prompt ( &amp;quot;$coefficient × $number = &amp;quot; ); my $rightanswer = $coefficient × $number; last if $answer.</description>
    </item>
    
    <item>
      <title>第十天 - 跳转, 开启你的工作流</title>
      <link>https://ohmysummer.github.io/post/2018-12-10-jmp-starting-your-work-flow/</link>
      <pubDate>Mon, 10 Dec 2018 10:19:53 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-10-jmp-starting-your-work-flow/</guid>
      <description>这是另一个版本的 jmp 供你在圣诞节前解开。
jmp 是一个命令行工具，用于搜索成堆的代码，然后快速跳转到 $EDITOR。这有助于保持流动。
然而，计算机编程具有许多潜在的流阻塞器。要在编码时保持流状态，通常需要在其他情况下快速跳转(jmp)到一行代码：修复错误，运行测试，检查日志文件，检查git状态等. jmp 也可以帮助加速这些任务吗？
幸运的是，重构 jmp 以容纳这些额外的使用场景相对容易。最新版本的 jmp 现在的工作原理如下：
在命令前加上 jmp 将导致命令再次执行，并且其输出会被吞噬并被分页。
#| find matching lines method find-files-in-command-output ($command) { # execute the command my $shell-cmd = shell $command, :out, :err; # join STDOUT and STDERR my $result = join(&amp;quot;\n&amp;quot;, $shell-cmd.out.slurp, $shell-cmd.err.slurp); # don&#39;t actually look for filenames just yet # do that lazily on demand by the user return $result.lines.map({ JMP::File::HitLater.new(context =&amp;gt; $_) }); }  jmp 为每一行创建结果提示，并对结果进行分页。然后，如果需要，您可以快速浏览输出并将 jmp 导入文本编辑器（请参阅 jmp config 以将其更改为您最喜欢的编辑器）。</description>
    </item>
    
    <item>
      <title>第九天 - Perl 6 中的常量</title>
      <link>https://ohmysummer.github.io/post/2018-12-09-constants-in-perl6/</link>
      <pubDate>Sun, 09 Dec 2018 10:19:12 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-09-constants-in-perl6/</guid>
      <description>我自豪地告诉人们在伦敦 Perl 工作室前一天我写了我的第一个 Perl 6 程序（也就是一个能工作的程序）。 所以，JJ 说：“为什么不为 Perl 6 写一个 Advent 日历帖？”
我名下只有区区一个程序，我该写些什么呢？ 嗯&amp;hellip;&amp;hellip;我在 Perl 5 中创作了 Astro::Constants，那么将它迁移到 Perl 6 有多难？
话匣子打开就关不上了，我给你讲一个 Perl 5 模块作者在 Perl 6 的领地中徘徊的故事。
如果在第5天你被“诊断”为常数，那么你正好需要今天的帖子。
我们习惯使用变量来计算东西和持有东西。 随着我们获得更多“东西”，总量会发生变化。 常量是那些永远不会改变的值。 像一天中的秒数或光速。 当然，我们在计算中使用它们就像使用变量一样，但是你不想通过赋值意外地改变常量
$SPEED_LIGHT = 30;  甚至意外地当你打算测试它是否等于某个值时，就像这样
if ( $SECONDS_IN_A_DAY = $seconds_waited) {  当你真正想的是
if ( $SECONDS_IN_A_DAY == $seconds_waited) {  在这些情况下，你希望编译器说“对不起，戴夫。 恐怕我不能这样做。“ Perl 编译器关闭了。 如果你尝试运行第一行，你会得到
Cannot modify an immutable Num (299792458) in block at im_sorry_dave.</description>
    </item>
    
    <item>
      <title>第八天 — 让你的 Perl 6 grammar 紧凑一点</title>
      <link>https://ohmysummer.github.io/post/2018-12-08-make-your-perl6-grammar-compact/</link>
      <pubDate>Sat, 08 Dec 2018 12:44:15 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-08-make-your-perl6-grammar-compact/</guid>
      <description>欢迎来到今年的 Perl 6 Advent Calendar 的第8天！
Grammars 是使 Perl 6 成为一种优秀编程语言的众多因素之一。 我甚至不会尝试预测轮询的结果，以便在 grammars，Unicode 支持，并发功能，超运算符或集合语法之间进行选择，或者选择 Whatever star。 谷歌发现了自己在互联网上发布的最好的 Perl 6 功能列表。
无论如何，今天我们将讨论 Perl 6 grammars，我将分享一些技巧，用于使 grammars 更紧凑。
1.拆分 actions 假设您正在编写 grammar 来解析 Perl 的变量声明。 您希望它与以下语句匹配：
my $s; my @a;  它们都声明了一个变量，因此我们可以制定一个通用规则来解析这两种情况。 下面是完整的程序：
grammar G { rule TOP { &amp;lt;variable-declaration&amp;gt;* %% &#39;;&#39; } rule variable-declaration { | &amp;lt;scalar-declaration&amp;gt; | &amp;lt;array-declaration&amp;gt; } rule scalar-declaration { &#39;my&#39; &#39;$&#39; &amp;lt;variable-name&amp;gt; } rule array-declaration { &#39;my&#39; &#39;@&#39; &amp;lt;variable-name&amp;gt; } token variable-name { \w+ } } class A { has %!</description>
    </item>
    
    <item>
      <title>第七天 – 细胞自动机</title>
      <link>https://ohmysummer.github.io/post/2018-12-07-automatic-on-a-cellular-level/</link>
      <pubDate>Fri, 07 Dec 2018 13:11:51 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-07-automatic-on-a-cellular-level/</guid>
      <description>今天的降临日历帖子涉及Cellular Automata。
什么是细胞自动机？我很高兴你问！它们是由几个部分组成的系统：由细胞组成的一种场或“世界”，每个细胞可以在任何点处的一组状态，描述每个细胞可见的细胞的“邻域” ，以及一套规则，用于管理一个单元将其状态改变为什么状态以及其邻域中所有单元的状态。
当然，这是一个非常抽象的描述，所以让我举一些个别部分的例子，希望能让你了解你在细胞自动机中看到的内容：
在典型的世界中，你可能会发现细胞像串珠一样排列，或者像国际象棋或中国跳棋板上的字段。您还可以组成更多奇特的配置：任何二维场都可以映射到任何表面，例如斯坦福兔子
你可以在野外找到的状态集是“从0到n的数字”，“这里有细菌”，“黑白颜色”（或更多）。由于您基本上可以将任何信息表示为“数字”，并且允许任意数量的状态，因此还可以存在表示“此时此单元格中有多少粒子在上升，下降，向左或向右移动的状态？ “作为整数或甚至浮点数。
邻域可以被认为是细胞“连接在一起”的模式。典型的社区将是“前面的一个，后面的一个”的“串珠”字段，以及“北，东，南，西”或“北，东北，东，东南，南，西南，西，西北“对于棋盘场 - 这两个分别是冯诺依曼附近和摩尔附近。
管理每个单元的邻域中的状态的一组规则将导致哪个状态转到其他状态可被视为特定元胞自动机的核心。
在今天的降临日历中，我们将探索您可能称之为最简单的自动机。我们将字段串起来像字符串上的珠子，我们将尝试一个或两个和一些不同的状态集。
为了让家里的人感兴趣，我将为您提供链接，让您在浏览器中运行示例代码，或在家中使用您的本地perl6编译器！
为学习而做 让我们开始，然后：
首先，我们需要什么？世界上必须有存储空间，需要一些代码来获得一个符合条件的邻居，以及一些代码来计算一个单元的下一个状态，给定它自己的状态和邻居的状态。最重要的是，我们想看看发生了什么，所以我们也有一些代码。
在确定每个单元可以具有哪些状态之后，我们将知道什么存储适合于我们的世界。使用8位整数数组将允许我们从任何不超过255个单独状态的状态集中进行选择。不过，让我们现在共计3个州。我们可以随心所欲地初始化世界，但是将每个字段设置为随机有效状态是一个很好的起点。另一个是将一个状态的单个单元放在中间，并使每个其他单元具有不同的状态。
constant number-of-states = 3; constant field-width = 60; my int8 @field; sub init-field { @field = (^number-of-states).roll(field-width); }  显示字段非常简单，具体取决于我们使用的输出。 这是一段可以在任何控制台中运行的代码，下面是一个6pad的链接，它在pad的HTML部分输出很少的彩色方块。
sub output-a-row { for @field { # Using the unicode characters &amp;quot;Light shade&amp;quot;, &amp;quot;Medium shade&amp;quot;, and &amp;quot;Dark shade&amp;quot; # and printing each field twice so they look square rather than slim and tall.</description>
    </item>
    
    <item>
      <title>第六天 - 懒惰精灵与勤劳精灵</title>
      <link>https://ohmysummer.github.io/post/2018-12-06-lazy-and-industrious-elves/</link>
      <pubDate>Thu, 06 Dec 2018 09:33:12 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-06-lazy-and-industrious-elves/</guid>
      <description>对圣诞老人来说，圣诞节总是一年中最忙碌的时刻。 幸运的是，圣诞老人有很多帮手。 他们总是做一些小工作和家务，只是为了创造最好的假日季节体验！
Object::Delayed 模块为圣诞老人的快乐精灵添加了两个非常有趣的精灵！ 他们的名字是 slack 和 catchup!
Lazy slack 那个懒散的(slack)精灵确实非常懒惰。 懒散(slack)精灵不会做任何事情，直到你真的需要他去做。 虽然人们可以认为这是精灵中非常糟糕的性格特征，但它也是一种非常生态的特征。 人们可以认为这个懒散的(slack)精灵是他们所有人中最环保的精灵！ 你有多少次要求精灵为你做点事情，然后却没用过那个精灵辛苦工作的结果？ 即使它只是到处移动的被回收的电子，但仍然需要能量来移动它们！ 特别是, 如果那些电子被用来告诉其他精灵做一些遥远的事情，就像在外部数据库中一样！
use Object::Delayed; my $dbh = slack { DBIish.connect(...) }  这就是你需要的 $dbh 变量，它只在实际需要时才与数据库建立连接。 当然，如果你想对该数据库进行查询，那么也可以使其懒惰！
use Object::Delayed; my $dbh = slack { DBIish.connect(...) } my $sth = slack { $dbh.prepare(...) }  由于语句句柄也是懒惰的，因此在实际需要之前它实际上不会进行查询准备。
use Object::Delayed; my $dbh = slack { DBIish.connect(...) } my $sth = slack { $dbh.prepare(...) } # lotsa program if $needed { $sth.</description>
    </item>
    
    <item>
      <title>第五天 - 变量</title>
      <link>https://ohmysummer.github.io/post/2018-12-05-variables/</link>
      <pubDate>Wed, 05 Dec 2018 12:17:44 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-05-variables/</guid>
      <description>这么简单的事，不是吗？ 变量是一个保存着值的名字。
有时候，它持有的值可能会被另一个值所取代 - 因此就是名字。 （根据外科医生的说法，没有经常变化的变量应该看医生，并要求被诊断为常数。）
虽然它们很容易掌握，而且基本上每种语言都有它们，但我今天的目标是让你相信变量实际上非常棘手。 好的方式！ 我的目的是让你被这篇博文绊倒，茫然，喃喃自语“我以为我知道变量，但我真的不知道&amp;hellip;&amp;hellip;”。
接近最后，实验语言007也将会出现，我考虑变量这么多完全是这种语言的过错。
左还是右？ 变量奇怪的第一种方式是它们以两种完全不同的方式使用。
my $x = &amp;quot;Christmas&amp;quot;; say(&amp;quot;Merry &amp;quot; ~ $x); # reading $x = &amp;quot;Easter&amp;quot;; # writing  有时我们使用变量来读取值，有时我们使用它们来写一个值。但在这两种情况下，语法看起来完全一样！一些较旧的语言（例如Forth）实际上对这两种用法有不同的语法，我喜欢它们。但是这样的惯例似乎并没有幸存到现代。
相反，我们通过语法位置来区分这两种用法。如果你在赋值的左侧，那么你就被写了。否则，你正在被读取。
在文献中，这两种用途分别称为 lvalues 和 *rvalues*。分别为“左”和“右”。
Rvalues 非常正常，与我们对变量的一般考虑方式相对应;他们只是计算它们包含的值。然而，Lvalues 很奇怪。它们更像是盒子，你可以把东西放入（或内存位置？引用？），或者如果不是盒子本身，那么分离的能力放入其中。如果 lvalues 有一个类型，它看起来像 (T) -&amp;gt; void，接受 T 但不返回任何东西的东西。
参数 变量对现代编程至关重要。 还有一个原则表明它们完全没有必要。
那就对了！ Tennent 的通信原则！ （我知道你在想什么。不，我说的不是那个 Tennant。
这个原则主要指向一种在程序中重写所有变量声明的方法，因此它们是参数声明。 一个例子应该足以展示一般原则：
# Before my $veggie = &amp;quot;potato&amp;quot;; say &amp;quot;$veggie, and that&#39;s all I have to say about that!</description>
    </item>
    
    <item>
      <title>第四天 - 献给新年的 Perl 6 Pod 新功能</title>
      <link>https://ohmysummer.github.io/post/2018-12-04-new-perl6-pod-features-for-the-new-year/</link>
      <pubDate>Tue, 04 Dec 2018 22:37:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-04-new-perl6-pod-features-for-the-new-year/</guid>
      <description>介绍 Rakudo NQP 文件包含解析 Perl 6 输入文件并将其转换为正在运行的 Perl 6 程序的代码。 本文将重点介绍最近使用 Rakudo NQP 文件时的经验所学到的一些细节。 这项工作涉及实现一些尚未实现的（NYI）Perl 6 POD 功能，我希望尽快合并这些更改。
准备 使用的 NQP 文件保存在 https://github.com/rakudo/rakudo/src/Perl6 的git存储库中。 有关我的开发设置和工作流的更多背景信息，请参阅 https://perl6advent.wordpress.com/2017/12/08/ 上的 2017 年 Perl 6 Advent 条目。
背景 在我实现 NYI POD 功能的过程中，我已经给我添加到 Rakudo 仓库中的文档添加了注释: rakudo/docs/rakudo-nqp-and-pod-notes.md。我更新它，因为我发现了可能没有记录的新内容或者可能不容易找到其文档。该文件还包含一份完整的清单，通过我的计算，NYI POD 功能。以下是我已经工作了几个月的 NYI POD 功能列表，我希望在今年或新年初完成（以及每个功能的 roast 测试）:
 NYI: %config :numbered 对于段落或分隔的POD块，使用&amp;rsquo;#&amp;lsquo;别名 NYI: POD 数据块 NYI: 以defn块术语格式化代码  缺少的项目描述在由 Damian Conway 博士撰写的精美制作的概要S26中，Larry Wall 是多产的得力男人 - 世界知名的 Perl 专家和著名的 Perl 作者。（请注意，现在很少有人在积极研究 POD，我的 NYI 功能列表可能不完整.</description>
    </item>
    
    <item>
      <title>第三天 – Perl 6 – 跳转到那儿</title>
      <link>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</link>
      <pubDate>Mon, 03 Dec 2018 09:54:10 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</guid>
      <description>jmp是一个Perl 6驱动的命令行程序，我每天都使用它来浏览成堆的Perl并快速跳转到我的$EDITOR。 我尝试在编码时保持流状态，并且能够快速搜索文件然后直接跳转到编辑器中。
jmp 是一个简单的基于终端的前端到您最喜欢的代码搜索工具（例如，rgrep，ag，ack，git grep等）。 它会显示一个搜索结果列表，您可以在跳转到编辑文件之前快速浏览（例如，vim，nano，comma等）。
它的工作原理如下：
最近我重构了 jmp，以便在 Terminal::Print 模块的帮助下改进用户界面。 Terminal::Print 提供了一个方便的二维网格，用于在终端屏幕上绘图。 还有一个用于异步处理用户输入的模块。
这是 jmp 代码，只要用户按下某个键，它就会响应：
my $in-supply = decoded-input-supply; my $timer = Supply.interval(1).map: { Tick }; my $supplies = Supply.merge($in-supply, $timer); react { whenever $supplies -&amp;gt; $_ { when Tick {} when &#39;CursorUp&#39; { self.pager.cursor-up; } when &#39;CursorDown&#39; { self.pager.cursor-down; } when &#39;CursorRight&#39; | &#39;PageDown&#39; { self.pager.next; } when &#39;CursorLeft&#39; | &#39;PageUp&#39; { self.pager.previous; } when &#39;x&#39; | &#39;X&#39; { self.</description>
    </item>
    
    <item>
      <title>第二天 – 写文档</title>
      <link>https://ohmysummer.github.io/post/2018-12-02-document-every-thing/</link>
      <pubDate>Sun, 02 Dec 2018 11:01:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-02-document-every-thing/</guid>
      <description>Like 6 Perls in a Pod: document everything 圣诞节即将到来，圣诞老人很沮丧。 他的收件箱被来自全国各地的男孩和女孩的来信塞爆了。
但，
这些信是写给圣诞老人的吗？ 是否通过签名正确识别了孩子，以便将礼物送给对的人而不是给其他可能不值得的人？ 他们是针对圣诞老人的，而不是那些冒名顶替者，复活节兔子，或者更糟糕的是，三个所谓的 - 我不知道为什么 - 来自东方的智者？ 最糟糕的是，他个人是否必须通过他的王室和神圣的自我来检查所有这些东西？
没有。
Perl 6 以下面的方式来救援：
grammar
unit grammar Santa-Letter; token TOP { &amp;lt;dear&amp;gt; \v+ &amp;lt;paragraph&amp;gt; [\v+ &amp;lt;paragraph&amp;gt;]* \v+ &amp;lt;signature&amp;gt;\v*} token paragraph { &amp;lt;superword&amp;gt;[ \h+ &amp;lt;superword&amp;gt;]+ } token superword { &amp;lt;word&amp;gt; | &amp;lt;enhanced-word&amp;gt; } token word { \w+ } token enhanced-word { &amp;lt;word&amp;gt; [\,|\.|\:] } token dear { Dear \h+ [S|s]anta [\,|\:]? } token signature { \h+ \w+ \h* \w* }  该单位向圣诞老人宣布一封致敬的信，其后是一个或多个段落，最后是一个签名，其前面应有一个水平的空格，如 \h 所示。</description>
    </item>
    
    <item>
      <title>第一天 - 移植 Vigilance, 将 Perl 6 与标准工具集成在一起</title>
      <link>https://ohmysummer.github.io/post/2018-12-01-porting-vigilance/</link>
      <pubDate>Sat, 01 Dec 2018 21:49:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-01-porting-vigilance/</guid>
      <description>移植 Vigilance，将Perl 6与标准工具集成在一起 大家好，今天我们将采用基础设施脚本并将其从Perl 5移植到Perl 6.本文基于James Clark的一对帖子，你可以在这里找到：
 第1部分 第2部分  此脚本用于创建和验证MD5总和。 这些是128位值，可用于验证数据完整性。 虽然MD5已经被证明在防范恶意行为者方面不安全，但它对于检测磁盘损坏仍然很有用。
Perl 6生态系统正在发展，其中包含多种工具，这些工具可以从Perl 5 CPAN移植，也可以替代。 我将介绍原始脚本和移植的几个方面，并说明我为什么要进行一些特定的更改。 希望这会鼓励你出去移植你自己的小脚本。
Shebang 和导入 Perl 5版本使用一些基础设施和一些实用程序来处理Unicode并使命令行输出更好：
#!/usr/bin/perl -CSDA use strict; use warnings; use utf8; use Encode qw/encode_utf8 decode_utf8/; use Getopt::Long; use Digest::MD5; use Term::ANSIColor; use Term::ProgressBar; use File::Find; use File::Basename; use Data::Dumper;  Perl 6默认启用了警告和限制，并且内置了Unicode支持，因此我们可以将其保留。 Data::Dumper也已经实现，它具有非常有用的IO功能。 将所有这些加在一起我们可以得到一个非常精益的标头：
#!/usr/bin/env perl6 use v6; use Digest::MD5; use Terminal::ANSIColor; use Terminal::Spinners;  命令行选项 Perl 5有许多用于处理命令行参数的很棒的模块，在我们使用 Getopt::Long 的原始脚本中：</description>
    </item>
    
  </channel>
</rss>