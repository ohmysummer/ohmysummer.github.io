<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rakudo on Raku Programming</title>
    <link>https://ohmysummer.github.io/categories/rakudo/</link>
    <description>Recent content in Rakudo on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 31 Jul 2017 10:54:24 +0200</lastBuildDate><atom:link href="https://ohmysummer.github.io/categories/rakudo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Seq 和摇滚</title>
      <link>https://ohmysummer.github.io/post/2017-07-31-seq%E5%92%8C%E6%91%87%E6%BB%9A/</link>
      <pubDate>Mon, 31 Jul 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-07-31-seq%E5%92%8C%E6%91%87%E6%BB%9A/</guid>
      <description>这是这个系列的第二部分！请确保你已经阅读过第一部分, 在那里我们讨论了什么是 Seq, 并且怎么来缓存它们。</description>
    </item>
    
    <item>
      <title>Raku Sheet</title>
      <link>https://ohmysummer.github.io/post/2017-05-19-sheet/</link>
      <pubDate>Fri, 19 May 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-05-19-sheet/</guid>
      <description>正则表达式 Raku 的正则表达式允许你为你自定义的字符类混进 Unicode 属性！</description>
    </item>
    
    <item>
      <title>Raku Dispatch 解密</title>
      <link>https://ohmysummer.github.io/post/2017-04-02-dispath%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Sun, 02 Apr 2017 14:24:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-04-02-dispath%E8%A7%A3%E5%AF%86/</guid>
      <description>Raku 的一个很好的特性是 multi-dispatch, 即多重分派。它允许你在函数, 方法或 Grammar token 中使用相同的名字并让它们所处理的数据的类型来决定执行哪一个。下面是一个 factorial postfix 操作符, 用两个 multies 来实现:</description>
    </item>
    
    <item>
      <title>Regexes</title>
      <link>https://ohmysummer.github.io/post/2017-03-18-regexes/</link>
      <pubDate>Sat, 18 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-18-regexes/</guid>
      <description>正则表达式, 简称 regexes, 是描述文本模式的字符序列。模式匹配就是将这些模式和实际的文本进行匹配的过程。</description>
    </item>
    
    <item>
      <title>Raku Gramamr 指南</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-raku-grammar-%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-raku-grammar-%E6%8C%87%E5%8D%97/</guid>
      <description>开始之前 为什么是 grammars?</description>
    </item>
    
    <item>
      <title>通过模块学习 Grammar</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>学习 Raku Grammar 的一个很好的地方是 GitHub 上的模块仓库, 里面有不少模块使用了 Grammar 来编写。下面我们列举出哪些模块值得我们学习。</description>
    </item>
    
    <item>
      <title>4 种风格的模板引擎</title>
      <link>https://ohmysummer.github.io/post/2017-03-04-4%E7%A7%8D%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 04 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-04-4%E7%A7%8D%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid>
      <description>4 种风格的模板引擎.</description>
    </item>
    
    <item>
      <title>Raku 中的 *, $_ 和 $</title>
      <link>https://ohmysummer.github.io/post/2017-02-04-whatever-star-vs.-_-vs-/</link>
      <pubDate>Sat, 04 Feb 2017 22:55:48 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-02-04-whatever-star-vs.-_-vs-/</guid>
      <description>cale2 问了一个很难的问题 今天卡尔2拒绝问简单的问题。我们来看它今天问了什么难题：</description>
    </item>
    
    <item>
      <title>2017 StackOverFlow-sort,deepmap,flat</title>
      <link>https://ohmysummer.github.io/post/2017-01-02-stackoverflow/</link>
      <pubDate>Mon, 02 Jan 2017 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-01-02-stackoverflow/</guid>
      <description>raku What is the best way to match any of a group of words?</description>
    </item>
    
    <item>
      <title>Raku Rakudo 和 NQP 内部研讨(一)</title>
      <link>https://ohmysummer.github.io/post/2017-01-01-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</link>
      <pubDate>Sun, 01 Jan 2017 23:01:01 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-01-01-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</guid>
      <description>标题: Rakudo and NQP Internals 子标题: The guts tormented implementers made 作者: Jonathan Worthington</description>
    </item>
    
    <item>
      <title>Raku Tips - 创建可重用的数据类型</title>
      <link>https://ohmysummer.github.io/post/2016-12-31-raku-tips-%E5%88%9B%E5%BB%BA%E5%8F%AF%E9%87%8D%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 31 Dec 2016 23:14:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-31-raku-tips-%E5%88%9B%E5%BB%BA%E5%8F%AF%E9%87%8D%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Quick Tip #19: 创建可重用的数据类型 Raku 允许你使用类型来约束变量值，但是你不必拘泥于内置类型。一旦你定义了自己的类型，它们就表现得像内置类型一样。</description>
    </item>
    
    <item>
      <title>Raku 时间戳转换器命令行版</title>
      <link>https://ohmysummer.github.io/post/2016-12-31-raku%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88/</link>
      <pubDate>Sat, 31 Dec 2016 23:14:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-31-raku%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88/</guid>
      <description>Raku By Example: Datetime Conversion for the Command Line 我偶尔会在数据库中存储 UNIX 时间戳, 即从 1970-01-01 开始的秒数。我在按照日期查询数据库中的数据时, 需要将 UNIX 时间戳转换为人类可读的时间, 所以我写了个很小的工具来帮助我在 UNIX 时间戳和日期/时间之间来回转换:</description>
    </item>
    
    <item>
      <title>2016 年末总结</title>
      <link>https://ohmysummer.github.io/post/2016-12-31-2016-%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-31-2016-%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/</guid>
      <description> 不想总结。 总结个大西瓜。 有什么好总结的。 说多了都是泪。 还是不要总结了。  </description>
    </item>
    
    <item>
      <title>Raku Tips - 排列组合</title>
      <link>https://ohmysummer.github.io/post/2016-12-30-raku-tips-%E6%8E%A2%E7%B4%A2%E7%BB%84%E5%90%88/</link>
      <pubDate>Fri, 30 Dec 2016 23:14:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-30-raku-tips-%E6%8E%A2%E7%B4%A2%E7%BB%84%E5%90%88/</guid>
      <description>Quick Tip #16: 探索组合</description>
    </item>
    
    <item>
      <title>Raku 中的 Setty 和 Baggy 类型</title>
      <link>https://ohmysummer.github.io/post/2016-12-11-raku%E7%9A%84-setty-%E5%92%8C-baggy-%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 11 Dec 2016 23:50:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-11-raku%E7%9A%84-setty-%E5%92%8C-baggy-%E7%B1%BB%E5%9E%8B/</guid>
      <description>有一个很常见的计数场景。比如说计算 DNA 中各个碱基的个数:</description>
    </item>
    
    <item>
      <title>Raku Grammar 之分割结构化文本</title>
      <link>https://ohmysummer.github.io/post/2016-11-01-raku-grammar%E4%B9%8B%E5%88%86%E5%89%B2%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC/</link>
      <pubDate>Tue, 01 Nov 2016 02:05:48 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-11-01-raku-grammar%E4%B9%8B%E5%88%86%E5%89%B2%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC/</guid>
      <description>如何使用 Grammar 分割一个有规律的文本文件?</description>
    </item>
    
    <item>
      <title>Raku 中的包</title>
      <link>https://ohmysummer.github.io/post/2016-10-28-raku%E4%B8%AD%E7%9A%84%E5%8C%85/</link>
      <pubDate>Fri, 28 Oct 2016 23:17:11 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-28-raku%E4%B8%AD%E7%9A%84%E5%8C%85/</guid>
      <description>Packages - Organizing and referencing namespaced program elements</description>
    </item>
    
    <item>
      <title>Raku 中列表、序列和数组</title>
      <link>https://ohmysummer.github.io/post/2016-10-27-raku%E4%B8%AD%E5%88%97%E8%A1%A8%E5%BA%8F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 27 Oct 2016 22:33:17 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-27-raku%E4%B8%AD%E5%88%97%E8%A1%A8%E5%BA%8F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>列表一直是计算机的核心部分，因为之前有计算机，在这段时间里，许多恶魔占据了他们的细节。 它们实际上是 Raku 设计中最难的部分之一，但是通过坚持和耐心，Raku 已经使用了一个优雅的系统来处理它们。</description>
    </item>
    
    <item>
      <title>第 10000 个素数</title>
      <link>https://ohmysummer.github.io/post/2016-10-26-%E7%AC%AC10000%E4%B8%AA%E7%B4%A0%E6%95%B0/</link>
      <pubDate>Wed, 26 Oct 2016 16:41:13 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-26-%E7%AC%AC10000%E4%B8%AA%E7%B4%A0%E6%95%B0/</guid>
      <description>到目前为止(2016.10.26), Raku 的速度相比 Perl 5/Python 的差距还是很大的。以打印从 1 开始计数的第 10000 个素数为例, 使用如下版本的 Rakudo:</description>
    </item>
    
    <item>
      <title>Raku 中的 require</title>
      <link>https://ohmysummer.github.io/post/2016-10-26-raku%E4%B8%AD%E7%9A%84require/</link>
      <pubDate>Wed, 26 Oct 2016 16:37:31 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-26-raku%E4%B8%AD%E7%9A%84require/</guid>
      <description>有时你必须不择手段地得到一个东西。 如果它是一个文件，你可以使用 Jonathan Stowes 的 URI::FetchFile。 所述模块检查四个模块中的任何一个是否可用，并且采用第一个将 URI 保存为磁盘上的文件。 在他的代码中有一个有趣的触发了 ENODOC 的行。</description>
    </item>
    
    <item>
      <title>我在查找文件时所学到的</title>
      <link>https://ohmysummer.github.io/post/2016-10-20-%E6%88%91%E5%9C%A8%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E6%97%B6%E6%89%80%E5%AD%A6%E5%88%B0%E7%9A%84/</link>
      <pubDate>Thu, 20 Oct 2016 14:19:52 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-20-%E6%88%91%E5%9C%A8%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E6%97%B6%E6%89%80%E5%AD%A6%E5%88%B0%E7%9A%84/</guid>
      <description>Things I found out while finding</description>
    </item>
    
    <item>
      <title>Raku 中的 with</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84with/</link>
      <pubDate>Wed, 19 Oct 2016 19:17:03 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84with/</guid>
      <description>with orwith without with 语句就像 if 但是是为了测试是否定义而非真假。此外, 它主题化了条件, 这很像 given:</description>
    </item>
    
    <item>
      <title>Raku 模块分析 - 并行查找文件</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-%E5%B9%B6%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 19 Oct 2016 19:12:22 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-%E5%B9%B6%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</guid>
      <description>并行查找文件 如果你没有使用 panda 或 zef 安装该模块, 你可以下载到本地：</description>
    </item>
    
    <item>
      <title>Raku 中的 Block</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84block/</link>
      <pubDate>Wed, 19 Oct 2016 00:22:27 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84block/</guid>
      <description>Raku 中的 Block class Block is Code { } Block 是用于小规模代码复用的代码对象。 Block 由花括号括起来的一组语句创建。</description>
    </item>
    
    <item>
      <title>Raku 中的函数</title>
      <link>https://ohmysummer.github.io/post/2016-10-17-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 17 Oct 2016 21:13:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-17-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</guid>
      <description>Raku 中的函数 例程（Routines）是 Raku 中代码重用的最小手段。它们有几种形式，最明显的是属于类和角色并与对象相关联的方法，还有函数, 也叫做子例程或短子程序，它们独立于对象而存在。</description>
    </item>
    
    <item>
      <title>Raku From Ruby - Nutshell</title>
      <link>https://ohmysummer.github.io/post/2016-10-17-rakufromruby/</link>
      <pubDate>Mon, 17 Oct 2016 17:55:34 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-17-rakufromruby/</guid>
      <description>Raku from Ruby - Nutshell</description>
    </item>
    
    <item>
      <title>stackoverflowWeekly1014</title>
      <link>https://ohmysummer.github.io/post/2016-10-14-stackoverflowweekly1014/</link>
      <pubDate>Fri, 14 Oct 2016 15:09:54 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-14-stackoverflowweekly1014/</guid>
      <description>Raku List Concatenation without Slip Raku List Concatenation without Slip 在 Perl 5 中 , 操作符用来连接列表; 然而在 Raku 中需要使用 | 操作符, 即 slip 操作符。</description>
    </item>
    
    <item>
      <title>在手机中运行 Raku</title>
      <link>https://ohmysummer.github.io/post/2016-10-14-%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%AD%E8%BF%90%E8%A1%8Craku/</link>
      <pubDate>Fri, 14 Oct 2016 11:15:24 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-14-%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%AD%E8%BF%90%E8%A1%8Craku/</guid>
      <description>准备工作  一只 Root 过的安卓智能手机(例如 Smartisan T1) 下载并安装 busybox.</description>
    </item>
    
    <item>
      <title>Raku 中的 subst</title>
      <link>https://ohmysummer.github.io/post/2016-10-05-raku%E4%B8%AD%E7%9A%84subst/</link>
      <pubDate>Wed, 05 Oct 2016 23:32:51 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-05-raku%E4%B8%AD%E7%9A%84subst/</guid>
      <description>(Str) 方法 subst subst 取的是单词 substitution(替换)的前5个字符, 意为替换之意。</description>
    </item>
    
    <item>
      <title>gather-take</title>
      <link>https://ohmysummer.github.io/post/2016-09-28-gather-take/</link>
      <pubDate>Wed, 28 Sep 2016 17:48:14 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-28-gather-take/</guid>
      <description>控制流 gather/take gather 是一个语句或者能返回一序列值的 block 前缀。该值来自于 gather 块中的动态作用域的 take 调用。</description>
    </item>
    
    <item>
      <title>解析命令行输出</title>
      <link>https://ohmysummer.github.io/post/2016-09-27-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 27 Sep 2016 07:51:05 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-27-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA/</guid>
      <description>哦, 列, 你在哪里?</description>
    </item>
    
    <item>
      <title>I left my keys in a side-channel</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-i-left-my-keys-in-a-side-channel/</link>
      <pubDate>Mon, 26 Sep 2016 12:17:59 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-i-left-my-keys-in-a-side-channel/</guid>
      <description>当我尝试把选项聚合到一个模块中时我无意中发现了一个常见问题的简洁解决办法。我想拥有一个子例程作为吞噬具名参数、做一些检查、并且要么返回 True 以满足那个 where 从句, 要么死掉并抛出一个合适的错误信息的 where 从句。 那很简单但是不彻底。那个 where 从句没有提供它所检查的参数的名字, 这需要拥有一个合适的错误信息。我们来简化下代码。</description>
    </item>
    
    <item>
      <title>These keys are LTA</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-these-keys-are-lta/</link>
      <pubDate>Mon, 26 Sep 2016 12:15:14 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-these-keys-are-lta/</guid>
      <description>在折腾枚举作为子例程布尔选项的时候, 我发现默认的错误信息不够酷。</description>
    </item>
    
    <item>
      <title>键是可选的</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-%E9%94%AE%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84/</link>
      <pubDate>Mon, 26 Sep 2016 12:04:56 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-%E9%94%AE%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84/</guid>
      <description>Keys are optional Keys are optional</description>
    </item>
    
    <item>
      <title>这些是你的键吗</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-%E8%BF%99%E4%BA%9B%E6%98%AF%E4%BD%A0%E7%9A%84%E9%94%AE%E5%90%97/</link>
      <pubDate>Mon, 26 Sep 2016 12:01:22 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-%E8%BF%99%E4%BA%9B%E6%98%AF%E4%BD%A0%E7%9A%84%E9%94%AE%E5%90%97/</guid>
      <description>Are these your keys?</description>
    </item>
    
    <item>
      <title>Whatever Star</title>
      <link>https://ohmysummer.github.io/post/2016-09-25-whatever-star/</link>
      <pubDate>Sun, 25 Sep 2016 16:14:05 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-25-whatever-star/</guid>
      <description>Whatever 是什么?</description>
    </item>
    
    <item>
      <title>Raku 中的冒号</title>
      <link>https://ohmysummer.github.io/post/2016-09-24-raku%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</link>
      <pubDate>Sat, 24 Sep 2016 20:55:11 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-24-raku%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</guid>
      <description>Raku Colons 在 Raku 中到处都是冒号, 我搜集了你在 Raku 中使用冒号的所有方式。</description>
    </item>
    
    <item>
      <title>Learning Raku - sets</title>
      <link>https://ohmysummer.github.io/post/2016-09-19-learning-raku-sets/</link>
      <pubDate>Mon, 19 Sep 2016 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-19-learning-raku-sets/</guid>
      <description>Quick Tip #8: Raku sets Set – a collection of unique thingys Bag - a collection of unique thingys,but weighted for the count of the number of times something is put the bag Mix - a bag that allows fractional weights</description>
    </item>
    
    <item>
      <title>Python Vs Raku</title>
      <link>https://ohmysummer.github.io/post/2016-09-19-python-vs-raku/</link>
      <pubDate>Mon, 19 Sep 2016 09:15:54 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-19-python-vs-raku/</guid>
      <description>Python Vs Raku, 比较哪个写法更优雅简洁。</description>
    </item>
    
    <item>
      <title>feed 操作符</title>
      <link>https://ohmysummer.github.io/post/2016-09-18-feed%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Sun, 18 Sep 2016 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-18-feed%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Sequencer Precedence</description>
    </item>
    
    <item>
      <title>对象哈希</title>
      <link>https://ohmysummer.github.io/post/2016-09-18-raku-calendar-2016-%E7%AC%AC%E4%B8%89%E5%A4%A9%E5%AF%B9%E8%B1%A1%E5%93%88%E5%B8%8C/</link>
      <pubDate>Sun, 18 Sep 2016 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-18-raku-calendar-2016-%E7%AC%AC%E4%B8%89%E5%A4%A9%E5%AF%B9%E8%B1%A1%E5%93%88%E5%B8%8C/</guid>
      <description>第三天　－　对象哈希</description>
    </item>
    
    <item>
      <title>Data Dump</title>
      <link>https://ohmysummer.github.io/post/2016-09-10-data-dump/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-10-data-dump/</guid>
      <description>for Raku 你们选对了, 这就是满足你们快速打印数据需要的.</description>
    </item>
    
    <item>
      <title>Raku Shortcuts(第一部分)</title>
      <link>https://ohmysummer.github.io/post/2016-08-31-raku-shortcuts%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-31-raku-shortcuts%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>查看原文</description>
    </item>
    
    <item>
      <title>哇, Raku!</title>
      <link>https://ohmysummer.github.io/post/2016-08-14-%E5%93%87raku/</link>
      <pubDate>Sun, 14 Aug 2016 13:14:00 +0100</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-14-%E5%93%87raku/</guid>
      <description>前言 Slides 地址 视频地址</description>
    </item>
    
    <item>
      <title>大列表重构</title>
      <link>https://ohmysummer.github.io/post/2016-08-12-%E5%A4%A7%E5%88%97%E8%A1%A8%E9%87%8D%E6%9E%84/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-12-%E5%A4%A7%E5%88%97%E8%A1%A8%E9%87%8D%E6%9E%84/</guid>
      <description>Raku 最近(2015.</description>
    </item>
    
    <item>
      <title>Abundant and Deficient Numbers</title>
      <link>https://ohmysummer.github.io/post/2016-08-11-abundant-and-deficient-numbers/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-11-abundant-and-deficient-numbers/</guid>
      <description>问题描述 abundant 数是其所有因子的和大于该数，而deficient数是其因子的和小于该数。</description>
    </item>
    
    <item>
      <title>智能匹配</title>
      <link>https://ohmysummer.github.io/post/2016-08-03-%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-03-%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</guid>
      <description>智能匹配 智能匹配通常作用在当前”主题”(topic)上, 即作用在 $_ 变量上.</description>
    </item>
    
    <item>
      <title>Raku Types--成人之美</title>
      <link>https://ohmysummer.github.io/post/2016-08-02-raku-types-%E6%88%90%E4%BA%BA%E4%B9%8B%E7%BE%8E/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-02-raku-types-%E6%88%90%E4%BA%BA%E4%B9%8B%E7%BE%8E/</guid>
      <description>Raku Types: 成人之美</description>
    </item>
    
    <item>
      <title>unspaces</title>
      <link>https://ohmysummer.github.io/post/2016-08-01-unspaces/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-01-unspaces/</guid>
      <description>有些语言例如 C 允许你转义一个换行符使行联合起来.</description>
    </item>
    
    <item>
      <title>学习Raku的一些网站</title>
      <link>https://ohmysummer.github.io/post/2016-07-25-%E5%AD%A6%E4%B9%A0raku%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</link>
      <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-25-%E5%AD%A6%E4%B9%A0raku%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</guid>
      <description>Blog  rakuintro raku.</description>
    </item>
    
    <item>
      <title>HOW 方法</title>
      <link>https://ohmysummer.github.io/post/2016-07-22-how%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-22-how%E6%96%B9%E6%B3%95/</guid>
      <description>Why can&amp;rsquo;t I call the methods method on a Raku&amp;rsquo;s ClassHOW object?</description>
    </item>
    
    <item>
      <title>The Awesome Errors of Raku</title>
      <link>https://ohmysummer.github.io/post/2016-07-20-the-awesome-errors-of-raku/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-20-the-awesome-errors-of-raku/</guid>
      <description>The Awesome Errors of Raku 如果你一直在读技术相关的东西，你现在可能知道 Rust 里面的令人惊喜的错误报告能力。 既然 Raku 也因它的绝妙的错误处理而闻名, mst 查询了一些例子来炫耀 rust 的错误处理能力, 但是不幸的是我没有发现。</description>
    </item>
    
    <item>
      <title>roundrobin</title>
      <link>https://ohmysummer.github.io/post/2016-07-18-roundrobin/</link>
      <pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-18-roundrobin/</guid>
      <description>定义为</description>
    </item>
    
    <item>
      <title>副词的Pair形式</title>
      <link>https://ohmysummer.github.io/post/2016-07-16-%E5%89%AF%E8%AF%8D%E7%9A%84pair%E5%BD%A2%E5%BC%8F/</link>
      <pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-16-%E5%89%AF%E8%AF%8D%E7%9A%84pair%E5%BD%A2%E5%BC%8F/</guid>
      <description>副词的 Pair 形式 S02-literals/adverbs.</description>
    </item>
    
    <item>
      <title>given when</title>
      <link>https://ohmysummer.github.io/post/2016-07-09-given-when/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-09-given-when/</guid>
      <description>given-when 有两个小的改变, 并且这俩改变都是开启新行为的, 而不是限制已存在的行为。</description>
    </item>
    
    <item>
      <title>It&#39;s blocks all the way down</title>
      <link>https://ohmysummer.github.io/post/2016-07-07-its-blocks-all-the-way-down/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-07-its-blocks-all-the-way-down/</guid>
      <description>It’s blocks all the way down</description>
    </item>
    
    <item>
      <title>Raku 中的梳子!</title>
      <link>https://ohmysummer.github.io/post/2016-07-07-raku%E4%B8%AD%E7%9A%84%E6%A2%B3%E5%AD%90/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-07-raku%E4%B8%AD%E7%9A%84%E6%A2%B3%E5%AD%90/</guid>
      <description>Raku 中的梳子!</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(二)</title>
      <link>https://ohmysummer.github.io/post/2016-06-29-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%8C/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-29-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%8C/</guid>
      <description>允许的修饰符 有些修饰符能在所有允许的地方出现, 但并非所有的都这样.</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2011)</title>
      <link>https://ohmysummer.github.io/post/2016-06-28-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2011/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-28-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2011/</guid>
      <description>2011  The Flip-Flop operator  Perl5有一个二元操作符叫做flip-flop,它为假直到它的第一个参数被计算为真，然后它保持真(反转)，直到第二个参数计算为真，然后在那里它又变成假(flop)。 这真是太有用了，以至于Raku也有flip-flop,只是它拼写为ff,并有一些变异：</description>
    </item>
    
    <item>
      <title>S06-Subroutines</title>
      <link>https://ohmysummer.github.io/post/2016-06-27-s06-subroutines/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-27-s06-subroutines/</guid>
      <description>原文Subroutines</description>
    </item>
    
    <item>
      <title>给标题添加换行</title>
      <link>https://ohmysummer.github.io/post/2016-06-19-%E7%BB%99%E6%A0%87%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%8D%A2%E8%A1%8C/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-19-%E7%BB%99%E6%A0%87%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%8D%A2%E8%A1%8C/</guid>
      <description>简书太扯了, 不管是什么空格都替换掉了。 开门见山, 废话不多说。如果非标题行在标题行上面, 那么这俩行之间会有一段空白, 但是你肯定遇到过:</description>
    </item>
    
    <item>
      <title>Raku FAQ</title>
      <link>https://ohmysummer.github.io/post/2016-06-06-raku-faq/</link>
      <pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-06-raku-faq/</guid>
      <description>源文件可以在 github 或 raku.</description>
    </item>
    
    <item>
      <title>如何在Raku中创建Grammar</title>
      <link>https://ohmysummer.github.io/post/2016-05-14-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%88%9B%E5%BB%BAgrammar/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-14-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%88%9B%E5%BB%BAgrammar/</guid>
      <description>检查 module 的名字是否 遵循 Raku 的命名规范。模块的名字可以是使用 2 个冒号分割的标识符, 例如 File::Compare 。标识符必须以字母字符 (a-z) 或下划线开头， 后面跟着 0 个 或多个字母数字字符。但是并没有那么简单, 有些模块的名字只有一个标识符而没有冒号，例如 Bailador ， 而其它模块可能有多个标识符和 :: 组成。这看起来正符合 grammar 的胃口！</description>
    </item>
    
    <item>
      <title>Actions 和抽象语法树</title>
      <link>https://ohmysummer.github.io/post/2016-05-12-actions%E5%92%8C%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-12-actions%E5%92%8C%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</guid>
      <description>有一段结构化的文本, 写一个 Grammar 来解析它：</description>
    </item>
    
    <item>
      <title>列表解析</title>
      <link>https://ohmysummer.github.io/post/2016-05-11-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-11-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>列表解析 列表解析即 List Comprehensions。</description>
    </item>
    
    <item>
      <title>输入Unicode字符</title>
      <link>https://ohmysummer.github.io/post/2016-05-11-%E8%BE%93%E5%85%A5unicode%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-11-%E8%BE%93%E5%85%A5unicode%E5%AD%97%E7%AC%A6/</guid>
      <description>输入 Unicode 字符 Raku 允许把 unicode 字符用作变量名.</description>
    </item>
    
    <item>
      <title>Raku 中的操作符(二)</title>
      <link>https://ohmysummer.github.io/post/2016-05-02-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BA%8C/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-02-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BA%8C/</guid>
      <description>infix:&amp;lt;&amp;hellip;&amp;gt;, 序列操作符.</description>
    </item>
    
    <item>
      <title>Raku From Wikipedia</title>
      <link>https://ohmysummer.github.io/post/2016-04-26-raku-from-wikipedia/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-26-raku-from-wikipedia/</guid>
      <description>Raku 是 Perl 编程语言家族中的一员.</description>
    </item>
    
    <item>
      <title>Meta Operator</title>
      <link>https://ohmysummer.github.io/post/2016-04-25-meta-operator/</link>
      <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-25-meta-operator/</guid>
      <description>快速构造散列  &amp;gt; my %hash = @lowers Z=&amp;gt; @numsa =&amp;gt; 1, b =&amp;gt; 2, c =&amp;gt; 3未完待续</description>
    </item>
    
    <item>
      <title>Raku 中的特性(一)</title>
      <link>https://ohmysummer.github.io/post/2016-04-22-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%80/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-22-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%80/</guid>
      <description>基础  数组  切片, 索引, Zen</description>
    </item>
    
    <item>
      <title>reddit编程题-詹妮的水果篮</title>
      <link>https://ohmysummer.github.io/post/2016-04-12-reddit%E7%BC%96%E7%A8%8B%E9%A2%98-%E8%A9%B9%E5%A6%AE%E7%9A%84%E6%B0%B4%E6%9E%9C%E7%AF%AE/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-12-reddit%E7%BC%96%E7%A8%8B%E9%A2%98-%E8%A9%B9%E5%A6%AE%E7%9A%84%E6%B0%B4%E6%9E%9C%E7%AF%AE/</guid>
      <description>问题描述  小詹妮拿着 5 美元去超市买东西, 为新搬来的邻居买水果篮礼物。因为她是个勤奋并缺乏想象力的孩纸, 她打算正好花 5 美元, 不多也不少。</description>
    </item>
    
    <item>
      <title>正则替换</title>
      <link>https://ohmysummer.github.io/post/2016-04-07-%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-07-%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2/</guid>
      <description>想把 Desgin Raku 中的 pod/html 转为 Markdown 格式, Raku 的 pod2markdown 不能用, 只能下载 html 格式的了, 然后用 pandoc test.</description>
    </item>
    
    <item>
      <title>Raku 中的术语</title>
      <link>https://ohmysummer.github.io/post/2016-03-26-raku%E4%B8%AD%E7%9A%84%E6%9C%AF%E8%AF%AD/</link>
      <pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-26-raku%E4%B8%AD%E7%9A%84%E6%9C%AF%E8%AF%AD/</guid>
      <description>匿名  子例程、方法或子方法，当它们不能通过名字调用时，就被称为匿名的</description>
    </item>
    
    <item>
      <title>Raku 中的操作符(三)</title>
      <link>https://ohmysummer.github.io/post/2016-03-23-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%89/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-23-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%89/</guid>
      <description>范围和范围迭代器语法 .</description>
    </item>
    
    <item>
      <title>Raku 中的 Bailador Web 框架(简介)</title>
      <link>https://ohmysummer.github.io/post/2016-03-20-raku%E4%B8%AD%E7%9A%84bailadorweb%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-20-raku%E4%B8%AD%E7%9A%84bailadorweb%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</guid>
      <description>开始 Bailador Bailador 是对 Perl Dancer Web 开发框架的模仿。 安装方法：</description>
    </item>
    
    <item>
      <title>用类来排序数组</title>
      <link>https://ohmysummer.github.io/post/2016-03-15-%E7%94%A8%E7%B1%BB%E6%9D%A5%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-15-%E7%94%A8%E7%B1%BB%E6%9D%A5%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>有多列数据, 序号, 学校, 课程 … 年份这几列。要如果学校和课程相同就根据年份倒序排列。</description>
    </item>
    
    <item>
      <title>Using Raku(二)</title>
      <link>https://ohmysummer.github.io/post/2016-03-14-using-raku%E4%BA%8C/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-14-using-raku%E4%BA%8C/</guid>
      <description>捕获 签名不仅仅是语法，它们是含有一列参数对象的 first-class 对象 。同样地，有一种含有参数集的数据结构,叫捕获。捕获有位置和命名两个部分，表现的就像列表和散列。像列表的那部分含有位置参数，而像散列的那部分含有命名参数。</description>
    </item>
    
    <item>
      <title>匿名状态变量的工作原理</title>
      <link>https://ohmysummer.github.io/post/2016-03-12-%E5%8C%BF%E5%90%8D%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-12-%E5%8C%BF%E5%90%8D%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>Anonymous State Variables And How They Work 当调试代码的时候, 我经常添加一个计数变量以用于循环, 所以我能跟踪发生了什么, 或我能在代码片段中处理正迭代的部分数据集:</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2009)</title>
      <link>https://ohmysummer.github.io/post/2016-03-11-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2009/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-11-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2009/</guid>
      <description>2009 有用的和有意思的循环 让我们来看一个基本的例子.</description>
    </item>
    
    <item>
      <title>token 和 rule 的区别</title>
      <link>https://ohmysummer.github.io/post/2016-03-11-token%E5%92%8Crule%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-11-token%E5%92%8Crule%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>在 grammar 中, 有两个 regex 的变体, rule 和 token。rule 默认不会回溯.</description>
    </item>
    
    <item>
      <title>Raku 中的模式匹配</title>
      <link>https://ohmysummer.github.io/post/2016-03-09-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-09-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>模式匹配 my $name = &amp;quot;twostraws&amp;quot;;given $name {when &amp;quot;bilbo&amp;quot; { say &amp;quot;Hello, Bilbo Baggins!</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(一)</title>
      <link>https://ohmysummer.github.io/post/2016-03-08-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-08-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80/</guid>
      <description>标题 Synopsis 5: Regexes and Rules</description>
    </item>
    
    <item>
      <title>Raku 中的动态变量</title>
      <link>https://ohmysummer.github.io/post/2016-02-29-raku%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-29-raku%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%98%E9%87%8F/</guid>
      <description>Raku 中的动态变量</description>
    </item>
    
    <item>
      <title>bless</title>
      <link>https://ohmysummer.github.io/post/2016-02-26-bless/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-26-bless/</guid>
      <description>bless 方法 method bless(*%attrinit) returns Mu:D相比 new方法来说更低层级别的对象构造方法。</description>
    </item>
    
    <item>
      <title>Array language</title>
      <link>https://ohmysummer.github.io/post/2016-02-23-reddit-array-language/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-23-reddit-array-language/</guid>
      <description>[2015-12-09] Challenge #244 [Easy]er - Array language (part 3) - J Forks</description>
    </item>
    
    <item>
      <title>Raku 中的智能匹配</title>
      <link>https://ohmysummer.github.io/post/2016-02-19-raku%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-19-raku%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</guid>
      <description>智能匹配 这儿有一个标准 Raku（即在你的编译单元开始的时候所生效的 Perl 方言） 的智能匹配表格。智能匹配通常作用在当前「主题」(topic)上, 即作用在 $_ 变量上.</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2013)</title>
      <link>https://ohmysummer.github.io/post/2016-02-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2013/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2013/</guid>
      <description>2013  Heredocs, Theredocs, Everywheredocs docs  So let’s say you’ve got a bit of documentation to print out, a help statement perhaps.</description>
    </item>
    
    <item>
      <title>Raku Examples</title>
      <link>https://ohmysummer.github.io/post/2016-02-14-raku-examples/</link>
      <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-14-raku-examples/</guid>
      <description>斐波拉契数列（Fibonacci Sequence）   analytic  use v6; sub fibonacci (Int $n where 0.</description>
    </item>
    
    <item>
      <title>S07-Lists</title>
      <link>https://ohmysummer.github.io/post/2016-02-12-s07-lists/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-12-s07-lists/</guid>
      <description>push 和 append 的表现不同, push 一次只添加单个参数到列表末端, append 一次可以添加多个参数。</description>
    </item>
    
    <item>
      <title>适当的使用proto</title>
      <link>https://ohmysummer.github.io/post/2016-02-11-%E6%81%B0%E5%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8proto/</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-11-%E6%81%B0%E5%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8proto/</guid>
      <description>原文在此Apropos proto: Raku.</description>
    </item>
    
    <item>
      <title>given when和模式匹配</title>
      <link>https://ohmysummer.github.io/post/2016-02-06-given-when%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-06-given-when%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>Raku 中的模式匹配</description>
    </item>
    
    <item>
      <title>comb - 操作字符串的利器</title>
      <link>https://ohmysummer.github.io/post/2016-02-03-comb-%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A9%E5%99%A8/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-03-comb-%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A9%E5%99%A8/</guid>
      <description>comb - 操作字符串的利器</description>
    </item>
    
    <item>
      <title>Raku 中的 S/// 操作符</title>
      <link>https://ohmysummer.github.io/post/2016-01-28-raku%E4%B8%AD%E7%9A%84s%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-28-raku%E4%B8%AD%E7%9A%84s%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Raku: S/// 操作符 By Zoffix Znet</description>
    </item>
    
    <item>
      <title>Roles</title>
      <link>https://ohmysummer.github.io/post/2016-01-21-roles/</link>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-21-roles/</guid>
      <description>Protocol 在 Swift 中是一组方法和属性的集合, 可用于代码复用。 Raku 中有与之类似的结构, 叫做 Role, 下面转换一个 Swift 的 Protocol 为 Raku 的 Role, 把部门人员的相关信息打印为一个表格:</description>
    </item>
    
    <item>
      <title>Fallout Hacking Game</title>
      <link>https://ohmysummer.github.io/post/2016-01-12-fallout-hacking-game/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-12-fallout-hacking-game/</guid>
      <description>流行游戏辐射3: New Vegas 有一台计算机, 玩家必须正确地从同样长度的单词列表中猜出正确的密码。你的挑战是你自己实现这个游戏。</description>
    </item>
    
    <item>
      <title>从正则表达式到Grammars - Part 2</title>
      <link>https://ohmysummer.github.io/post/2016-01-04-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-2/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-04-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-2/</guid>
      <description>省略啰嗦的一堆。</description>
    </item>
    
    <item>
      <title>使用Raku的subsets和multiple辨别年龄</title>
      <link>https://ohmysummer.github.io/post/2016-01-04-%E4%BD%BF%E7%94%A8raku%E7%9A%84subsets%E5%92%8Cmultiple%E8%BE%A8%E5%88%AB%E5%B9%B4%E9%BE%84/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-04-%E4%BD%BF%E7%94%A8raku%E7%9A%84subsets%E5%92%8Cmultiple%E8%BE%A8%E5%88%AB%E5%B9%B4%E9%BE%84/</guid>
      <description>举个例子, 假设 person 有一个 age 属性.</description>
    </item>
    
    <item>
      <title>Raku 博文收集</title>
      <link>https://ohmysummer.github.io/post/2016-01-02-raku-%E5%8D%9A%E6%96%87%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-02-raku-%E5%8D%9A%E6%96%87%E6%94%B6%E9%9B%86/</guid>
      <description>本文意在收集 Raku 方面的博文, 如有侵权请告知删除。</description>
    </item>
    
    <item>
      <title>Raku 核心骇客--词法的胡言乱语</title>
      <link>https://ohmysummer.github.io/post/2016-01-01-raku-%E6%A0%B8%E5%BF%83%E9%AA%87%E5%AE%A2-%E8%AF%8D%E6%B3%95%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-01-raku-%E6%A0%B8%E5%BF%83%E9%AA%87%E5%AE%A2-%E8%AF%8D%E6%B3%95%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</guid>
      <description>Raku 核心骇客: 词法的胡言乱语</description>
    </item>
    
    <item>
      <title>rakuintro 翻译</title>
      <link>https://ohmysummer.github.io/post/2015-12-21-raku-intro-%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-21-raku-intro-%E7%BF%BB%E8%AF%91/</guid>
      <description>第八章 函数式编程  在本章中，我们将看看一些有利于函数式编程的功能。</description>
    </item>
    
    <item>
      <title>stackoverflow0902</title>
      <link>https://ohmysummer.github.io/post/2015-12-18-stackoverflow0902/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-18-stackoverflow0902/</guid>
      <description>How do I chain to an inline block in Raku?</description>
    </item>
    
    <item>
      <title>给数字添加千分位分割符</title>
      <link>https://ohmysummer.github.io/post/2015-12-14-%E7%BB%99%E6%95%B0%E5%AD%97%E6%B7%BB%E5%8A%A0%E5%8D%83%E5%88%86%E4%BD%8D%E5%88%86%E5%89%B2%E7%AC%A6/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-14-%E7%BB%99%E6%95%B0%E5%AD%97%E6%B7%BB%E5%8A%A0%E5%8D%83%E5%88%86%E4%BD%8D%E5%88%86%E5%89%B2%E7%AC%A6/</guid>
      <description>使用链式函数调用 考虑最简单的一种情况, 不带小数点的数字:</description>
    </item>
    
    <item>
      <title>类中的twigils</title>
      <link>https://ohmysummer.github.io/post/2015-12-11-%E7%B1%BB%E4%B8%AD%E7%9A%84twigils/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-11-%E7%B1%BB%E4%B8%AD%E7%9A%84twigils/</guid>
      <description>Raku中的 .</description>
    </item>
    
    <item>
      <title>扩展 Raku 中的类型</title>
      <link>https://ohmysummer.github.io/post/2015-11-25-%E6%89%A9%E5%B1%95raku%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-25-%E6%89%A9%E5%B1%95raku%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>扩展 Raku 中的类型 使用继承 class BetterInt is Int {method even { self %% 2 }}my BetterInt $x .</description>
    </item>
    
    <item>
      <title>简单字符串解析</title>
      <link>https://ohmysummer.github.io/post/2015-11-25-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-25-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</guid>
      <description>简单字符串解析 我已经以好几种方式使用 Raku 解析用引号引起的字符串了。 但是我想知道有没有更好更干净的方法。下面有一个为引起的字符串准备的小型 grammar 而且还有一些测试:</description>
    </item>
    
    <item>
      <title>项</title>
      <link>https://ohmysummer.github.io/post/2015-11-21-%E9%A1%B9/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-21-%E9%A1%B9/</guid>
      <description>Raku 中的大部分句法结构能归类为项和操作符.</description>
    </item>
    
    <item>
      <title>Guess Who</title>
      <link>https://ohmysummer.github.io/post/2015-11-20-reddit-guess-who/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-20-reddit-guess-who/</guid>
      <description>你是一个刚成立的小公司里的一名软件工程师, 有天晚上你收到了一封来自CEO 的电子邮件:</description>
    </item>
    
    <item>
      <title>Raku 中的可变 Grammar</title>
      <link>https://ohmysummer.github.io/post/2015-11-16-raku%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98grammar/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-16-raku%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98grammar/</guid>
      <description>## A Mutable Grammar For Raku Rules  Rules 就像 perl5的 regexes，并且更好。它们像子例程和方法那样申明，并且还能调用其它 rules</description>
    </item>
    
    <item>
      <title>roles冲突</title>
      <link>https://ohmysummer.github.io/post/2015-11-16-roles%E5%86%B2%E7%AA%81/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-16-roles%E5%86%B2%E7%AA%81/</guid>
      <description>学会了怎么创建类, 我们继续用它来构建我们的中心内容:</description>
    </item>
    
    <item>
      <title>圆括号和方括号在创建数组时的区别</title>
      <link>https://ohmysummer.github.io/post/2015-11-14-%E5%9C%86%E6%8B%AC%E5%8F%B7%E5%92%8C%E6%96%B9%E6%8B%AC%E5%8F%B7%E5%9C%A8%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E6%97%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-14-%E5%9C%86%E6%8B%AC%E5%8F%B7%E5%92%8C%E6%96%B9%E6%8B%AC%E5%8F%B7%E5%9C%A8%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E6%97%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>[ ] 和 ( ) 的区别 # 无法正常排序my @s = [2443,5,33, 90, -9, 2, 764];say @s.</description>
    </item>
    
    <item>
      <title>在 Raku 中怎么为已存在的类添加方法</title>
      <link>https://ohmysummer.github.io/post/2015-11-11-%E5%9C%A8raku%E4%B8%AD%E6%80%8E%E4%B9%88%E4%B8%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-11-%E5%9C%A8raku%E4%B8%AD%E6%80%8E%E4%B9%88%E4%B8%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</guid>
      <description>How do you add a method to an existing class in Raku?</description>
    </item>
    
    <item>
      <title>D 在 Raku 中是什么意思</title>
      <link>https://ohmysummer.github.io/post/2015-11-05-d%E5%9C%A8raku%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-05-d%E5%9C%A8raku%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</guid>
      <description>一个裸的 :D、:U、:T 或 :_ 是限制默认类型为定义、未定义、类型对象或任何对象的类型约束。所以</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(三)</title>
      <link>https://ohmysummer.github.io/post/2015-11-05-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%89/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-05-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%89/</guid>
      <description>预定义 Subrules 下面这些是为任意 grammar 或 regex 预定义好的 subrules:</description>
    </item>
    
    <item>
      <title>从正则表达式到 Grammar</title>
      <link>https://ohmysummer.github.io/post/2015-10-29-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammar/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-29-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammar/</guid>
      <description>「原文链接」</description>
    </item>
    
    <item>
      <title>IO 操作</title>
      <link>https://ohmysummer.github.io/post/2015-10-11-io%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-11-io%E6%93%8D%E4%BD%9C/</guid>
      <description>文件存在、文件的时间戳、文件的修改时间等等</description>
    </item>
    
    <item>
      <title>proto</title>
      <link>https://ohmysummer.github.io/post/2015-10-06-proto/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-06-proto/</guid>
      <description>proto  proto 意思为原型。proto 从形式上声明了 multi 候选者之间的共性。 proto 充当作能检查但不会修改参数的包裹。看看这个基本的例子:</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2010)</title>
      <link>https://ohmysummer.github.io/post/2015-10-05-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2010/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-05-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2010/</guid>
      <description>2010 第二天:用main函数控制命令行交互 2010 年 Raku 圣诞月历(二)用 main 函数控制命令行交互</description>
    </item>
    
    <item>
      <title>空白格</title>
      <link>https://ohmysummer.github.io/post/2015-09-18-%E7%A9%BA%E7%99%BD%E6%A0%BC/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-18-%E7%A9%BA%E7%99%BD%E6%A0%BC/</guid>
      <description>空格最少化  在数组或散列的开括号(即下标左边的那个括号)之前不允许有空格, 参数列表的圆开括号前面也是不能有空格的.</description>
    </item>
    
    <item>
      <title>Raku 中的 polymod 方法</title>
      <link>https://ohmysummer.github.io/post/2015-09-17-raku%E4%B8%AD%E7%9A%84polymod%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-17-raku%E4%B8%AD%E7%9A%84polymod%E6%96%B9%E6%B3%95/</guid>
      <description>Raku 中的 .</description>
    </item>
    
    <item>
      <title>日期难题</title>
      <link>https://ohmysummer.github.io/post/2015-09-15-%E6%97%A5%E6%9C%9F%E9%9A%BE%E9%A2%98/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-15-%E6%97%A5%E6%9C%9F%E9%9A%BE%E9%A2%98/</guid>
      <description>reddit 上使用 Raku 处理日期</description>
    </item>
    
    <item>
      <title>Raku Weekly(一)</title>
      <link>https://ohmysummer.github.io/post/2015-09-11-raku-weekly%E4%B8%80/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-11-raku-weekly%E4%B8%80/</guid>
      <description>1、在 Raku 中怎样检查文件的时间戳属性？</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(四)</title>
      <link>https://ohmysummer.github.io/post/2015-09-11-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%9B/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-11-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%9B/</guid>
      <description>最长 token 匹配 注意，下面进入糟糕区域，如果看不懂请查看英文原文!</description>
    </item>
    
    <item>
      <title>Raku 中的操作符(一)</title>
      <link>https://ohmysummer.github.io/post/2015-08-31-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%80/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-31-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%80/</guid>
      <description>操作符优先级 S03-operators/arith.</description>
    </item>
    
    <item>
      <title>探索Raku的Signatures,第二部分</title>
      <link>https://ohmysummer.github.io/post/2015-08-29-%E6%8E%A2%E7%B4%A2raku%E7%9A%84signatures%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-29-%E6%8E%A2%E7%B4%A2raku%E7%9A%84signatures%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>在我们探索 Raku 签名的第一部分中, 我们了解了怎么使用 Raku 强大而灵活的类型系统来约束具名参数和位置参数是如何被传递给子例程和方法的。我们还涉及了怎么使用 slurp 签名来创建能接收任意具名和位置参数列表的可变函数。</description>
    </item>
    
    <item>
      <title>cookbook</title>
      <link>https://ohmysummer.github.io/post/2015-08-25-cookbook/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-25-cookbook/</guid>
      <description>字符串处理  将每行从第二列到最后一列数值为0的且数目多于6个的行删除</description>
    </item>
    
    <item>
      <title>Raku 中的变量</title>
      <link>https://ohmysummer.github.io/post/2015-08-25-raku%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-25-raku%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</guid>
      <description>变量名以一个叫做魔符 sigil 的特殊字符开头, 后面跟着一个可选的第二个叫做 twigil 的特殊字符, 然后是一个标识符.</description>
    </item>
    
    <item>
      <title>Raku 单行程序</title>
      <link>https://ohmysummer.github.io/post/2015-08-25-raku-%E5%8D%95%E8%A1%8C%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-25-raku-%E5%8D%95%E8%A1%8C%E7%A8%8B%E5%BA%8F/</guid>
      <description>Raku 单行程序 这本书在进行之中。我希望你能觉得它有趣，甚至可能有用！如果你想贡献反馈的话，那么很欢迎提问题还有新的或有提升的正则表达式。</description>
    </item>
    
    <item>
      <title>Raku 中的引号</title>
      <link>https://ohmysummer.github.io/post/2015-08-24-raku%E4%B8%AD%E7%9A%84%E5%BC%95%E5%8F%B7/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-24-raku%E4%B8%AD%E7%9A%84%E5%BC%95%E5%8F%B7/</guid>
      <description>除了 q 和 qq 之外，现在还有一种基本形式的 Q，它不会进行插值，除非显式地修改它那样做。所以，q 实际上是 Q:q 的简称，qq 实际上是 Q:qq 的简称。实际上所有的 quote-like 形式都派生自带有副词的 Q 形式：</description>
    </item>
    
    <item>
      <title>Raku Weekly(二)</title>
      <link>https://ohmysummer.github.io/post/2015-08-22-rakuweekly%E7%AC%AC%E4%BA%8C%E6%9C%9F/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-22-rakuweekly%E7%AC%AC%E4%BA%8C%E6%9C%9F/</guid>
      <description>:my $foo 的作用域和用途 在 regex、token 或 rule 中, 定义像下面这样的变量是可能的:</description>
    </item>
    
    <item>
      <title>在 Raku 中为自定义的类添加下标(subscripts)</title>
      <link>https://ohmysummer.github.io/post/2015-08-18-%E5%9C%A8raku%E4%B8%AD%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%A0%87subscripts/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-18-%E5%9C%A8raku%E4%B8%AD%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%A0%87subscripts/</guid>
      <description>为自定义的类添加下标(subscripts) 假如你定义了一个类，你想把类的实例用作散列那样，可以索引其中的元素， 那么你需要让你得自定义遵守 Associative 接口，并重写 AT-KEY 、EXISTS-KEY 、DELETE-KEY 、push 等跟散列有关的方法:</description>
    </item>
    
    <item>
      <title>S12-Objects</title>
      <link>https://ohmysummer.github.io/post/2015-08-09-s12-objects/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-09-s12-objects/</guid>
      <description>标题  大纲 12： 对象(Objects)</description>
    </item>
    
    <item>
      <title>rotor</title>
      <link>https://ohmysummer.github.io/post/2015-08-08-rotor/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-08-rotor/</guid>
      <description>method rotor(*@cycle, Bool() :$partial) rotor 返回一个 list, 这个 list 的元素也是 list, 其中每个子列表由调用者中的元素组成.</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2015)</title>
      <link>https://ohmysummer.github.io/post/2015-08-05-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2015/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-05-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2015/</guid>
      <description>Comming Soon!</description>
    </item>
    
    <item>
      <title>Introspection</title>
      <link>https://ohmysummer.github.io/post/2015-07-25-introspection/</link>
      <pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-25-introspection/</guid>
      <description>Raku 支持&amp;quot;泛型, roles 和 多重分发&amp;quot;, 它们都是很好的特点, 并且已经在其它 advent calendar 中发布过了。</description>
    </item>
    
    <item>
      <title>元对象协议</title>
      <link>https://ohmysummer.github.io/post/2015-07-16-%E5%85%83%E5%AF%B9%E8%B1%A1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-16-%E5%85%83%E5%AF%B9%E8%B1%A1%E5%8D%8F%E8%AE%AE/</guid>
      <description>自省和 Raku 的对象系统 Raku 是构建在元对象层上面的。那意味着有些对象(元对象)控制着各种面向对象结构(例如类、roles、方法、属性、枚举,…)怎样去表现。</description>
    </item>
    
    <item>
      <title>Raku 中的 Role</title>
      <link>https://ohmysummer.github.io/post/2015-07-15-raku%E4%B8%AD%E7%9A%84role/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-15-raku%E4%B8%AD%E7%9A%84role/</guid>
      <description>Composition and mix-ins Sigils Typed data structures Traits  所以到底什么是 role 呢？ role 是零个或多个方法和属性的集合。</description>
    </item>
    
    <item>
      <title>Raku rotor--列表操作之王</title>
      <link>https://ohmysummer.github.io/post/2015-07-14-raku-rotor-%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E7%8E%8B/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-14-raku-rotor-%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E7%8E%8B/</guid>
      <description>Raku .</description>
    </item>
    
    <item>
      <title>Grammar 笔记</title>
      <link>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</guid>
      <description>一个 Grammar 解析复杂文本的例子。</description>
    </item>
    
    <item>
      <title>MAIN 中的冒号</title>
      <link>https://ohmysummer.github.io/post/2015-07-05-main-%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-05-main-%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</guid>
      <description>假如我有多个文本文件, 我要写一段脚本来进行替换操作。在命令行中提供一些列选项供配置。文本格式如下:</description>
    </item>
    
    <item>
      <title>散列也是容器</title>
      <link>https://ohmysummer.github.io/post/2015-06-28-%E6%95%A3%E5%88%97%E4%B9%9F%E6%98%AF%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-28-%E6%95%A3%E5%88%97%E4%B9%9F%E6%98%AF%E5%AE%B9%E5%99%A8/</guid>
      <description>散列也是容器 假设我们想计算某个东西的出现次数, 我们通常的做法是弄一个 &amp;ldquo;seen-hash&amp;rdquo; 散列。有时候我们有一组待查询的键, 其中有些键可能不在我们所扫描的数据中。那是一种特殊情况, 但是 Raku 能够完美地解决, 因为散列也是容器, 因此我们能够拥有默认值。</description>
    </item>
    
    <item>
      <title>找到两个文件中共有的行</title>
      <link>https://ohmysummer.github.io/post/2015-06-18-%E6%89%BE%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E5%85%B1%E6%9C%89%E7%9A%84%E8%A1%8C/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-18-%E6%89%BE%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E5%85%B1%E6%9C%89%E7%9A%84%E8%A1%8C/</guid>
      <description>找出两个文件中共有的行, 顺序无关紧要 在 Perl 5 里, 你可以这样:</description>
    </item>
    
    <item>
      <title>正则表达式一例</title>
      <link>https://ohmysummer.github.io/post/2015-06-14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80%E4%BE%8B/</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80%E4%BE%8B/</guid>
      <description>以指定音量随机播放音频文件：</description>
    </item>
    
    <item>
      <title>class-List</title>
      <link>https://ohmysummer.github.io/post/2015-06-10-class-list/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-10-class-list/</guid>
      <description>my class List is Iterable does Positional { .</description>
    </item>
    
    <item>
      <title>Slip一例</title>
      <link>https://ohmysummer.github.io/post/2015-05-19-slip%E4%B8%80%E4%BE%8B/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-19-slip%E4%B8%80%E4%BE%8B/</guid>
      <description>描述 有 7 块板子放在一个&amp;quot;袋子&amp;quot;中, 随机从袋子中移除一个板子展示到玩家面前直到袋子变空。当袋子变空时, 它会被重新装填, 如果需要额外的板子, 则重复前面那个过程。</description>
    </item>
    
    <item>
      <title>怎么在 Raku 中自定义存取器</title>
      <link>https://ohmysummer.github.io/post/2015-05-19-%E6%80%8E%E4%B9%88%E5%9C%A8raku%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%98%E5%8F%96%E5%99%A8/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-19-%E6%80%8E%E4%B9%88%E5%9C%A8raku%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%98%E5%8F%96%E5%99%A8/</guid>
      <description>How does one write custom accessor methods in Raku?</description>
    </item>
    
    <item>
      <title>下标副词</title>
      <link>https://ohmysummer.github.io/post/2015-05-18-%E4%B8%8B%E6%A0%87%E5%89%AF%E8%AF%8D/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-18-%E4%B8%8B%E6%A0%87%E5%89%AF%E8%AF%8D/</guid>
      <description>下标副词 为了使切片下标返回除了值以外的其它东西，那么给下标(subscript)添加合适的副词。</description>
    </item>
    
    <item>
      <title>在 Raku 中异步地执行外部程序</title>
      <link>https://ohmysummer.github.io/post/2015-05-14-%E5%9C%A8raku%E4%B8%AD%E5%BC%82%E6%AD%A5%E5%9C%B0%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-14-%E5%9C%A8raku%E4%B8%AD%E5%BC%82%E6%AD%A5%E5%9C%B0%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>Execute an external program with timeout in Raku</description>
    </item>
    
    <item>
      <title>Raku 入门指南</title>
      <link>https://ohmysummer.github.io/post/2015-05-08-raku%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-08-raku%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>exit，warn，die  exit</description>
    </item>
    
    <item>
      <title>Sneaky methods</title>
      <link>https://ohmysummer.github.io/post/2015-05-01-sneaky-methods/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-01-sneaky-methods/</guid>
      <description>Sneaky methods</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(五)</title>
      <link>https://ohmysummer.github.io/post/2015-04-28-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%94/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-28-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%94/</guid>
      <description>从匹配中返回值 Match 对象  成功的匹配总是返回一个 Match 对象, 这个对象通常也被放进 $/ 中, (具名 regex, token, 或 rule 是一个子例程, 因此会声明它们自己的本地 $/ 变量, 它通常指 rule 中最近一次的 submatch, 如果有的话)。当前的匹配状态被保存到 regex 的 $¢ 变量中, 当匹配结束时它最终会被绑定到用户的 $/变量中  不成功的匹配会返回 Nil (并把 $/ 设置为 Nil, 如果匹配已经设置了 $/的话)</description>
    </item>
    
    <item>
      <title>从正则表达式到Grammars - Part 1</title>
      <link>https://ohmysummer.github.io/post/2015-04-27-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-1/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-27-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-1/</guid>
      <description>原文</description>
    </item>
    
    <item>
      <title>Grammars generating grammars</title>
      <link>https://ohmysummer.github.io/post/2015-04-15-grammars-generating-grammars/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-15-grammars-generating-grammars/</guid>
      <description>现在你可能已经习惯了 Raku 中到处出现的前缀&amp;quot;meta&amp;quot;。Metaclasses, Metaobjects, Metaoperators, 还有迷一般的 Meta-Object 协议。听起来一点也不可怕, 你都见过了不是吗？今天, 在 Raku Advent Calendar 上, 我们将进行完全的 meta 化(full meta)。我们将拥有能解析 grammars 的 grammars, 然后生成将用于解析 grammars 的 grammars。</description>
    </item>
    
    <item>
      <title>Raku圣诞月历-(2012)</title>
      <link>https://ohmysummer.github.io/post/2015-04-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2012/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2012/</guid>
      <description>2012  一个日历  #!</description>
    </item>
    
    <item>
      <title>Capture</title>
      <link>https://ohmysummer.github.io/post/2015-04-01-capture/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-01-capture/</guid>
      <description>Capture 的定义:</description>
    </item>
    
    <item>
      <title>Raku 中的模块</title>
      <link>https://ohmysummer.github.io/post/2015-03-23-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-23-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>Modules  Exporting and Selective Importing  is export  packages(包), subroutines(子例程), variables(变量), constants(常量) 和 enums(枚举) , 通过在它们的名字后面添加 is export 特性来导出。</description>
    </item>
    
    <item>
      <title>Sneaking into a loop</title>
      <link>https://ohmysummer.github.io/post/2015-03-23-sneaking-into-a-loop/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-23-sneaking-into-a-loop/</guid>
      <description>Sneaking into a loop [Sneaking into a loop]https://gfldex.</description>
    </item>
    
    <item>
      <title>Raku 的薛定谔的猫--Junctions</title>
      <link>https://ohmysummer.github.io/post/2015-03-22-raku%E7%9A%84%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E7%8C%AB-junctions/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-22-raku%E7%9A%84%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E7%8C%AB-junctions/</guid>
      <description>薛定谔欧文应该是喜欢 Raku 的, 因为他的著名的薛定谔的猫可以用 Raku 的 Junction表达:</description>
    </item>
    
    <item>
      <title>Subset</title>
      <link>https://ohmysummer.github.io/post/2015-03-19-subset/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-19-subset/</guid>
      <description>Subset 子集 Subset 可用于声明某一类型的子集。</description>
    </item>
    
    <item>
      <title>操作符</title>
      <link>https://ohmysummer.github.io/post/2015-03-16-%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 16 Mar 2015 13:16:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-16-%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>操作符 操作符优先级 在像 1 + 2 * 3 这样的表达式中， 2 * 3 被首先计算， 因为中缀操作符 * 的优先级比 + 的优先级高。下面的表中总结了 Perl 6 中 的优先级级别， 从最牢固到最松散：</description>
    </item>
    
    <item>
      <title>Raku 中的特性(二)</title>
      <link>https://ohmysummer.github.io/post/2015-03-16-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%BA%8C/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-16-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%BA%8C/</guid>
      <description>Set  my $keywords = set &amp;lt;if for unless while&amp;gt;; # create a setsub has-keyword(*@words) {for @words -&amp;gt; $word {return True if $word (elem) $keywords; # 依次检查数组中的元素是否属于集合 $keywords}False;}say has-keyword &#39;not&#39;, &#39;one&#39;, &#39;here&#39;; # Falsesay has-keyword &#39;but&#39;, &#39;here&#39;, &#39;for&#39;; # TrueSeries Operator  my @a=&amp;lt;A G C T&amp;gt;;my $x=@a;for 1 .</description>
    </item>
    
    <item>
      <title>When and Where</title>
      <link>https://ohmysummer.github.io/post/2015-03-15-when%E5%92%8Cwhere/</link>
      <pubDate>Sun, 15 Mar 2015 13:15:00 +0300</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-15-when%E5%92%8Cwhere/</guid>
      <description>When 可以用在主题化($_)的语句中 Perl 里面有个特殊的变量叫 $_, 即主题化变量, the variable in question.</description>
    </item>
    
    <item>
      <title>Using Raku(一)</title>
      <link>https://ohmysummer.github.io/post/2015-03-14-using-raku%E4%B8%80/</link>
      <pubDate>Sat, 14 Mar 2015 13:14:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-14-using-raku%E4%B8%80/</guid>
      <description>第一章 概要  Comming soon!</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2014)</title>
      <link>https://ohmysummer.github.io/post/2014-12-19-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2014/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2014-12-19-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2014/</guid>
      <description>2014  Data munging in Raku vs Perl 5  案例学习: 生成成绩报告单</description>
    </item>
    
    <item>
      <title>Raku from Haskell - Nutshell</title>
      <link>https://ohmysummer.github.io/post/2017-04-29-raku-from-haskell-nutshell/</link>
      <pubDate>Fri, 11 Jul 2014 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-04-29-raku-from-haskell-nutshell/</guid>
      <description>Haskell 和 Raku 是非常不同的语言。这很明显。 但是，这并不意味着没有相似之处或共同的想法！ 此页面尝试让一个 Haskell 用户启动并运行 Raku。Haskell 用户可能会发现，在用 Raku 编写脚本时，他们不需要放弃所有 Haskelly 的想法。</description>
    </item>
    
  </channel>
</rss>
