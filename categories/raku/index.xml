<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Raku on Raku Programming</title>
    <link>https://ohmysummer.github.io/categories/raku/</link>
    <description>Recent content in Raku on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 06 Jul 2020 19:40:45 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/categories/raku/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>非递归</title>
      <link>https://ohmysummer.github.io/post/2020-07-06-unrecursing/</link>
      <pubDate>Mon, 06 Jul 2020 19:40:45 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-06-unrecursing/</guid>
      <description>Moritz 不满意 Raku 给他的权力，让他与名单搏斗。他说的没错。如果简单的事情很容易，就不需要摔跤了。这让我想到了我在上一篇博文中构建的数据结构。它是一个列表和一个 Proc::Async 的对。</description>
    </item>
    
    <item>
      <title>Wat Freeness</title>
      <link>https://ohmysummer.github.io/post/2020-06-22-wat-freeness/</link>
      <pubDate>Mon, 06 Jul 2020 18:59:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-22-wat-freeness/</guid>
      <description>遗憾的是，我不能参加云端会议，因为我把翅膀借给了一个天使，而那个吸盘没有把翅膀带回来。但没有什么&amp;ndash;哪怕是瘟疫&amp;ndash;可以阻止我写一篇博文。</description>
    </item>
    
    <item>
      <title>感觉像一个 bug</title>
      <link>https://ohmysummer.github.io/post/2020-06-20-it-felt-like-a-bug/</link>
      <pubDate>Mon, 06 Jul 2020 18:51:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-20-it-felt-like-a-bug/</guid>
      <description>IO::Path 提供了不少关于文件的信息。缺少的是它的真实类型。文件的结尾是有欺骗性的。在文件的操作系统上，我们可以得到一个清晰的图像。Shelling 用 file -b -i 获取 mimetype 有点慢，所以我试着在文件名列表上添加一个 .</description>
    </item>
    
    <item>
      <title>监控新访客</title>
      <link>https://ohmysummer.github.io/post/2020-05-26-watching-new-arrivals/</link>
      <pubDate>Mon, 06 Jul 2020 17:29:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-26-watching-new-arrivals/</guid>
      <description>任何枯燥的重复性工作都必须尽可能地简单，否则就会被忽视。我很确定这就是我们发明电脑的原因。备份是挺无聊的。事实上，当涉及到备份时，你要避免任何形式的刺激。所以它们必须尽可能的简单。我有一个脚本，当一个新设备被添加时，由 udev 规则触发。当插入一个磁盘时，这个脚本工作得很好。(这很好用。)我有一个 USB 集线器，里面有几个U盘，形成了一个 btrfs raid5，每当我打开U盘集线器的时候，就可以对我的 $home 进行快速备份。在某些情况下，这并不能正常工作。找一个 bash 脚本来检查是否有一个硬盘丢失了，这可不好玩。主要是因为只有合适的语言才会有 Set。我们确实有一种合适的语言。</description>
    </item>
    
    <item>
      <title>管道变得简单</title>
      <link>https://ohmysummer.github.io/post/2020-07-04-piping-made-easy/</link>
      <pubDate>Sat, 04 Jul 2020 19:32:53 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-04-piping-made-easy/</guid>
      <description>哈梅林的魔笛手是有史以来最强大的超级英雄之一。他可以通过在烟斗上吹奏一首曲子来带领一大群孩子离开。大多数父母都很难带领一个孩子离开电视。我很确定这就是为什么在 *nix 上被称为烟斗的原因。这也意味着，超级英雄电影只是童话故事。</description>
    </item>
    
    <item>
      <title>REPL</title>
      <link>https://ohmysummer.github.io/post/2020-07-01-repl/</link>
      <pubDate>Wed, 01 Jul 2020 10:19:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-01-repl/</guid>
      <description>Raku 中的 REPL 现在有一些令人迷惑的行为, 和直接使用 raku filename.</description>
    </item>
    
    <item>
      <title>数列</title>
      <link>https://ohmysummer.github.io/post/2020-06-30-sequence/</link>
      <pubDate>Tue, 30 Jun 2020 13:33:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-30-sequence/</guid>
      <description>斐波那契数列(Fibonacci sequence) lazy my \sequence = 1, 1, {$^a + $^b } .</description>
    </item>
    
    <item>
      <title>我们可以做得更多</title>
      <link>https://ohmysummer.github.io/post/2020-06-26-we-can-do-more/</link>
      <pubDate>Fri, 26 Jun 2020 19:25:49 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-26-we-can-do-more/</guid>
      <description>DataKinds 继续着他对 Python 之道的教育翻译，以蝴蝶的方式。他的追求是展示如何在 Raku 中做一些在 Python 中完成的事情。一如既往，TIMTOWTDI 适用。</description>
    </item>
    
    <item>
      <title>Raku 谜语</title>
      <link>https://ohmysummer.github.io/post/2020-06-24-a-raku-riddle/</link>
      <pubDate>Wed, 24 Jun 2020 19:20:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-24-a-raku-riddle/</guid>
      <description>在思考 DataKinds 博文的时候，我想到了一个最奇特的谜语。它的内容如下。</description>
    </item>
    
    <item>
      <title>成群的异常</title>
      <link>https://ohmysummer.github.io/post/2020-06-14-swarms-of-exceptions/</link>
      <pubDate>Sun, 14 Jun 2020 18:41:31 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-14-swarms-of-exceptions/</guid>
      <description>在拉里看来，懒惰是一种美德。让我们看看 Rakudo 是否同意。</description>
    </item>
    
    <item>
      <title>主题就是主题</title>
      <link>https://ohmysummer.github.io/post/2020-06-12-the-topic-is-the-topic/</link>
      <pubDate>Fri, 12 Jun 2020 18:15:49 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-12-the-topic-is-the-topic/</guid>
      <description>我在上一篇文章中感叹，我们缺少初学者的资料。我给出的理由是，写这种指南很难。这就有一个问题，为什么会那么难。在堵住文档的漏洞时，我发现很多地方都出现了很多语言的特点。Raku 和自己是交织在一起的。对于初学者来说，你会希望从一些简单的东西开始，然后在此基础上建立，直到你达到最大的复杂性。有什么能比谦逊的 if 语句更简单呢？事实上，有很多。原因是主题。这将是这篇文章的主题。</description>
    </item>
    
    <item>
      <title>替换的相似性</title>
      <link>https://ohmysummer.github.io/post/2020-06-08-replacement-similarities/</link>
      <pubDate>Mon, 08 Jun 2020 18:06:04 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-08-replacement-similarities/</guid>
      <description>我在上一篇文章中说，我博客的文章点击率比去年上升了20%。我查的原因显然是虚荣心作祟。那天我查的原因是一篇关于 Rust 越来越受欢迎的文章。作为一种精神上的练习，我把那些抛弃他们所使用的语言的程序员所给出的不同理由变成了一个检查清单。</description>
    </item>
    
    <item>
      <title>掉入错误的兔子洞</title>
      <link>https://ohmysummer.github.io/post/2020-06-06-down-the-error-rabbit-hole/</link>
      <pubDate>Sat, 06 Jun 2020 17:29:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-06-down-the-error-rabbit-hole/</guid>
      <description>好的错误信息是有用的，因为它们告诉我们，当出错时，我们不必检查什么。(见：LTA)我通过尝试用 Raku 替换 Bash 得出了这个结论。让我们来看看一些无辜的代码。</description>
    </item>
    
    <item>
      <title>沉默不语</title>
      <link>https://ohmysummer.github.io/post/2020-05-27-ungolden-silence/</link>
      <pubDate>Wed, 27 May 2020 17:29:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-27-ungolden-silence/</guid>
      <description>在我寻求用 Raku 替换 Bash 的过程中，我尝试使用 qx，但失败了。对我来说，它没有工作，因为 qx 失败的方式是错误的。在底层，Rakudo 通过一些语法魔法来实现它，在 core.</description>
    </item>
    
    <item>
      <title>归还正确的数量</title>
      <link>https://ohmysummer.github.io/post/2020-05-25-returning-the-right-amount/</link>
      <pubDate>Mon, 25 May 2020 17:19:51 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-25-returning-the-right-amount/</guid>
      <description>你知道当你带着买错的东西回来时，你的另一半的表情吗？告诉你吧，我们会为此写一个脚本！</description>
    </item>
    
    <item>
      <title>神秘的中缀运算符</title>
      <link>https://ohmysummer.github.io/post/2020-05-24-the-mysterious-infix/</link>
      <pubDate>Sun, 24 May 2020 17:06:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-24-the-mysterious-infix/</guid>
      <description>瓦迪姆-贝尔曼告诉我们，他开始了一个在控制台中编写图形用户界面(GUI)应用程序的模块。这让我一下子回到了九十年代。看着示例代码，我又有了下一次的回想。如果你需要一个按钮，你需要子类。事实上，如果你需要任何东西，你都需要子类。在一个有词法作用域的动态语言中，这可能真的有用。</description>
    </item>
    
    <item>
      <title>自动切割日志</title>
      <link>https://ohmysummer.github.io/post/2020-05-14-autorotating-logs/</link>
      <pubDate>Thu, 14 May 2020 16:48:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-14-autorotating-logs/</guid>
      <description>当我把我的备份脚本从 bash 翻译到 Raku 的时候，我偷看了一下 /var/log/，震惊地发现有 650MB 的东西我从来没有看过。不出所料，/var/log/journal 是最大的犯罪者。遗憾的是，我必须说 systemd 一贯不太好用。2008 年我就出过糗。我之所以还在继续用它完全是因为 Debian 系统。尽管它没有 xrdp.</description>
    </item>
    
    <item>
      <title>Parse with Raku Regexes and Grammars</title>
      <link>https://ohmysummer.github.io/post/2019-07-31-parse-with-raku-regexes-and-grammars/</link>
      <pubDate>Wed, 31 Jul 2019 20:22:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-07-31-parse-with-raku-regexes-and-grammars/</guid>
      <description>启动翻译。</description>
    </item>
    
    <item>
      <title>Encode-Decode</title>
      <link>https://ohmysummer.github.io/post/2019-07-16-encode-decode/</link>
      <pubDate>Tue, 16 Jul 2019 18:56:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-07-16-encode-decode/</guid>
      <description>http://blogs.perl.org/users/damian_conway/2019/07/vigenere-vs-vigenere.html</description>
    </item>
    
    <item>
      <title>Raku 中的 奇偶排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-29-odd-even-sort-in-raku/</link>
      <pubDate>Sat, 29 Jun 2019 19:37:39 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-29-odd-even-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的煎饼排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-27-pancake-sort-in-raku/</link>
      <pubDate>Sat, 29 Jun 2019 19:36:02 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-27-pancake-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的 Gnome sort</title>
      <link>https://ohmysummer.github.io/post/2019-06-28-gnome-sort-in-raku/</link>
      <pubDate>Fri, 28 Jun 2019 19:37:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-28-gnome-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的 Stooge Sort</title>
      <link>https://ohmysummer.github.io/post/2019-06-26-stooge-sort-in-raku/</link>
      <pubDate>Wed, 26 Jun 2019 19:35:43 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-26-stooge-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的合并排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-25-merge-sort-in-raku/</link>
      <pubDate>Tue, 25 Jun 2019 19:35:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-25-merge-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的插入排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-24-insertion-sort-in-raku/</link>
      <pubDate>Mon, 24 Jun 2019 19:19:06 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-24-insertion-sort-in-raku/</guid>
      <description>今天，我们研究插入排序算法及其在 Raku 中的可能实现。算法的复杂性是 O(n2)，但它是练习 Raku 的一个很好的选择。</description>
    </item>
    
    <item>
      <title>Raku 中的快速排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-23-quick-sort-in-raku/</link>
      <pubDate>Sun, 23 Jun 2019 19:16:15 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-23-quick-sort-in-raku/</guid>
      <description>今天，我们来看看另一个，也许是最着名的数据排序方法，快速排序。</description>
    </item>
    
    <item>
      <title>Raku 中的冒泡排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-22-bubble-sort-in-raku/</link>
      <pubDate>Sat, 22 Jun 2019 10:59:47 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-22-bubble-sort-in-raku/</guid>
      <description>嘿大家好，让我们在 Raku 中实现一些算法。</description>
    </item>
    
    <item>
      <title>Raku 中的选择排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-21-selection-sort-in-raku/</link>
      <pubDate>Fri, 21 Jun 2019 16:26:46 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-21-selection-sort-in-raku/</guid>
      <description>sub find-smallest(@arr) { my $smallest = @arr[0]; my $smallest_index = 0; for @arr.</description>
    </item>
    
    <item>
      <title>Raku 实现二分查找</title>
      <link>https://ohmysummer.github.io/post/2019-06-01-binary-search-in-raku/</link>
      <pubDate>Sat, 01 Jun 2019 14:09:49 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-01-binary-search-in-raku/</guid>
      <description>sub binary_search(@list, $item) { my $low = 0; # low 和 high 用于跟踪要在其中查找的列表部分 my $high = @list.</description>
    </item>
    
    <item>
      <title>Raku Colonoscopy</title>
      <link>https://ohmysummer.github.io/post/2019-03-26-perl6-colonoscopy/</link>
      <pubDate>Tue, 26 Mar 2019 09:33:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-03-26-perl6-colonoscopy/</guid>
      <description>Raku Colonoscopy I promise, this will not hurt.</description>
    </item>
    
    <item>
      <title>Perl 5 to Raku guide - special variables</title>
      <link>https://ohmysummer.github.io/post/2019-02-24-special-variables/</link>
      <pubDate>Mon, 25 Feb 2019 13:33:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-02-24-special-variables/</guid>
      <description>描述 一个（希望）全面的 Perl 5 特殊变量列表及其 Raku 等价物，并在必要时记录它们之间的变化。</description>
    </item>
    
    <item>
      <title>Python to Raku - nutshell</title>
      <link>https://ohmysummer.github.io/post/2019-02-25-python-to-raku-nutshell/</link>
      <pubDate>Mon, 25 Feb 2019 09:41:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-02-25-python-to-raku-nutshell/</guid>
      <description>此页面试图为来自 Python 背景的人们提供学习 Raku 的方法。我们在 Raku 中讨论了许多 Python 构造和惯用法的等价语法。</description>
    </item>
    
    <item>
      <title>Send-Data-to-Socket</title>
      <link>https://ohmysummer.github.io/post/2018-11-23-send-data-to-socket/</link>
      <pubDate>Fri, 23 Nov 2018 16:18:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-11-23-send-data-to-socket/</guid>
      <description>发送数据到 Socket 的 3333 端口，并把所发送的数据保存到文件中。</description>
    </item>
    
    <item>
      <title>Make Empty</title>
      <link>https://ohmysummer.github.io/post/2018-11-15-make-empty/</link>
      <pubDate>Thu, 15 Nov 2018 23:46:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-11-15-make-empty/</guid>
      <description>my $str = q :to/EOF/; Raku,Rust -- this is a comment Rakudo,Raku -- this is another comment Camelia,Camel EOF grammar MakeEmpty { token TOP { ^ &amp;lt;sentence&amp;gt;+ % &amp;lt;comment&amp;gt; $} token sentence { &amp;lt;words&amp;gt;+ % &#39;,&#39; \n } token comment { &#39;-- &#39; &amp;lt;words&amp;gt;+ % &#39; &#39; \n } token words { \w+ } } class Action { method TOP($/) { make $/.</description>
    </item>
    
    <item>
      <title>Traps to Avoid</title>
      <link>https://ohmysummer.github.io/post/2018-10-07-traps-to-avoid/</link>
      <pubDate>Sun, 07 Oct 2018 21:10:29 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-07-traps-to-avoid/</guid>
      <description>在学习一门编程语言时，可能有熟悉另一门编程语言的背景，总有一些事情会让您感到惊讶，并且可能会耗费宝贵的调试和发现时间。</description>
    </item>
    
    <item>
      <title>Raku 中的命令行参数</title>
      <link>https://ohmysummer.github.io/post/2018-10-05-command-line-arguments-in-raku/</link>
      <pubDate>Fri, 05 Oct 2018 21:33:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-05-command-line-arguments-in-raku/</guid>
      <description>Sub MAIN 在 Raku 中，命令行参数的解析是通过 MAIN 子例程完成的，MAIN 子例程是一种特殊的子例程，它根据 MAIN 子例程的签名解析命令行参数。与其他子例程一样，MAIN 子例程可以具有命名参数和位置参数、可选(和必需)参数、多重分派等等。</description>
    </item>
    
    <item>
      <title>Rmarkdown 中的 Raku 代码</title>
      <link>https://ohmysummer.github.io/post/2018-10-04-raku-code-in-rmarkdown/</link>
      <pubDate>Thu, 04 Oct 2018 21:32:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-04-raku-code-in-rmarkdown/</guid>
      <description>安装 首先，首先安装 R 编程语言。在此之后，运行 R 并执行以下命令来安装 rmarkdown: install.</description>
    </item>
    
    <item>
      <title>Raku 面向对象简单入门</title>
      <link>https://ohmysummer.github.io/post/2018-10-03-a-naive-introduction-to-object-orientation-in-perl-6/</link>
      <pubDate>Wed, 03 Oct 2018 21:13:31 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-03-a-naive-introduction-to-object-orientation-in-perl-6/</guid>
      <description>序言 介绍 本教程最多只关注 Raku 中的面向对象编程(OOP)的基本知识。因此，对语句/表达式、变量、条件、循环、子例程(函数)等有一个基本的了解是很重要的，如果不在 Raku 中，至少在另一种编程语言中是这样的。此外，您至少应该对类、属性和方法有一般的了解。作为对 Raku 的介绍，我强烈推荐 Raku introduction。下一步是 Raku 文档。</description>
    </item>
    
    <item>
      <title>How Naming of Variables Works in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-09-28-how-naming-of-variables-works-in-raku/</link>
      <pubDate>Fri, 28 Sep 2018 20:18:30 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-28-how-naming-of-variables-works-in-raku/</guid>
      <description>在本系列的第 5 篇文章中，比较 Perl 5 和 Raku，了解在 Raku 中使用 sigils。</description>
    </item>
    
    <item>
      <title>Toptic Variable</title>
      <link>https://ohmysummer.github.io/post/2018-09-13-toptic-variable/</link>
      <pubDate>Fri, 14 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-13-toptic-variable/</guid>
      <description>$_ 变量 $_ 是主题变量。它是没有显式签名的块的默认参数，因此 for @array {.</description>
    </item>
    
    <item>
      <title>Raku 中的容器</title>
      <link>https://ohmysummer.github.io/post/2018-08-29-raku%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 29 Aug 2018 19:55:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-29-raku%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>在本系列的第一篇文章中，将 Perl 5 与 Raku 进行了比较，我们研究了将代码迁移到 Raku 时可能遇到的一些问题。在第二篇文章中，我们研究了垃圾收集在 Raku 中的工作原理。第三篇文章，我们将重点介绍 Perl 5 的引用以及如何在 Raku 中处理它们，并介绍绑定和容器的概念。</description>
    </item>
    
    <item>
      <title>Command Line Arguments in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-08-07-command-line-arguments-in-raku/</link>
      <pubDate>Tue, 07 Aug 2018 19:54:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-07-command-line-arguments-in-raku/</guid>
      <description>MAIN 子例程 命名参数和位置参数  命名参数 位置参数 Multi dispatch 组合命名参数和位置参数   可选参数和必选参数 别名或备用命名参数 USAGE 子例程  Sub MAIN 在 Raku 中，命令行参数的解析是使用 MAIN 子例程完成的，MAIN 子例程是一个特殊的子例程，它根据签名解析命令行参数。与其他子程序一样，您可以使用命名参数和位置参数，可选（和必需）参数，multiple dispatch 等。 通过定义 MAIN 子例程，编译器会自动生成 USAGE 子例程。可以修改此子例程以返回自定义的 usage 信息。所有的命令行参数也可以在特殊变量 @*ARGS 中使用，它可以在 MAIN 处理之前进行更改。</description>
    </item>
    
    <item>
      <title>Intro Into Raku Regexes and Grammars</title>
      <link>https://ohmysummer.github.io/post/2018-08-04-intro-into-raku-regexes-and-grammars/</link>
      <pubDate>Sat, 04 Aug 2018 20:33:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-04-intro-into-raku-regexes-and-grammars/</guid>
      <description>tpm-regex.raku.party</description>
    </item>
    
    <item>
      <title>Ping Pang in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-08-03-ping-pang-in-raku/</link>
      <pubDate>Fri, 03 Aug 2018 21:08:25 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-03-ping-pang-in-raku/</guid>
      <description>Ping Pang in Raku 使用 channels 在线程之间传递消息是一种管理并发的简单方法。</description>
    </item>
    
    <item>
      <title>使用 Cro 创建单页应用程序</title>
      <link>https://ohmysummer.github.io/post/2018-08-02-%E4%BD%BF%E7%94%A8cro%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 02 Aug 2018 22:54:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-02-%E4%BD%BF%E7%94%A8cro%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>使用 Cro 创建单页应用 本教程将介绍如何使用 Cro 作为后端构建简单的单页应用程序。对于前端，我们将使用 webpack，ES6，React 和 Redux。你不需要事先了解这些信息，但如果您想在自己的应用程序中很好地使用它们，则需要进一步阅读。</description>
    </item>
    
    <item>
      <title>使用 Raku 连接 Kafka</title>
      <link>https://ohmysummer.github.io/post/2018-07-20-%E4%BD%BF%E7%94%A8raku%E8%BF%9E%E6%8E%A5kafka/</link>
      <pubDate>Fri, 20 Jul 2018 20:14:28 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-20-%E4%BD%BF%E7%94%A8raku%E8%BF%9E%E6%8E%A5kafka/</guid>
      <description>有这样一个场景, 数据发送方将压缩文件读成字节数组后发往 Kafka, 然后第三方的 Kafka Client 从中读取字节数组解压缩, 每条 message 对应一个压缩文件, 每个压缩文件中包含 _log.</description>
    </item>
    
    <item>
      <title>Io Guide</title>
      <link>https://ohmysummer.github.io/post/2018-07-14-io-guide/</link>
      <pubDate>Sat, 14 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-14-io-guide/</guid>
      <description>基础知识 绝大多数常见的 IO 工作都是由 [IO::Path](https://docs.</description>
    </item>
    
    <item>
      <title>Cro Http Test</title>
      <link>https://ohmysummer.github.io/post/2018-07-14-cro-http-test/</link>
      <pubDate>Sat, 14 Jul 2018 17:14:59 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-14-cro-http-test/</guid>
      <description>Cro::HTTP::Test 原则上可以通过使用 Cro::HTTP::Server托管应用程序, 使用 Cro::HTTP::Client向其发出请求, 并使用标准 Test 库检查结果来编写 Cro HTTP 服务的测试。该库使编写此类测试更容易, 并通过以下方式更快地执行它们：</description>
    </item>
    
    <item>
      <title>Class Channel</title>
      <link>https://ohmysummer.github.io/post/2018-07-08-class-channel/</link>
      <pubDate>Sun, 08 Jul 2018 16:11:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-08-class-channel/</guid>
      <description>class Channel {} Channel 是一个线程安全的队列，可帮助你将一个或多个生产者的一系列对象发送给一个或多个消费者。每个对象将仅到达由调度程序选择的一个这样的消费者。如果只有一个消费者和一个生产者，则保证保留对象的顺序。在 Channel 上发送是非阻塞的。</description>
    </item>
    
    <item>
      <title>class Supply</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-class-supply/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-class-supply/</guid>
      <description>class Supply {} supply 是一种线程安全的异步数据流，如 Channel，但它可以有多个订阅者（taps: 水龙头），所有订阅者都可以获得流经 supply 的相同值。</description>
    </item>
    
    <item>
      <title>Raku Pod</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-raku-pod/</link>
      <pubDate>Sat, 07 Jul 2018 18:16:19 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-raku-pod/</guid>
      <description>Raku Pod 是一种易于使用的标记语言。 Pod 可用于编写语言文档，用于文档化程序和模块，以及其他类型的文档组合。</description>
    </item>
    
    <item>
      <title>Doing Math With Raku</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-doing-math-with-perl6/</link>
      <pubDate>Sat, 07 Jul 2018 15:08:06 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-doing-math-with-perl6/</guid>
      <description>Sets Raku 包括 Set 数据类型，以及对大多数 set 操作的支持。并集和交集不仅是原生操作，它们使用自然符号 ∩ 和 ∪。例如，此代码将检查有限数量集的集算术的基本定律：</description>
    </item>
    
    <item>
      <title>Date and Time Functions</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</link>
      <pubDate>Sat, 07 Jul 2018 13:33:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</guid>
      <description>Raku 包括几个处理时态信息的类：Date，DateTime，Instant 和 Duration。前三个是 dateish，所以它们混合了 Dateish 角色，它定义了处理日期的类应该采用的所有方法和属性。它还包括以 X::Temporal 为根的异常的类层次结构。</description>
    </item>
    
    <item>
      <title>Hashes and Maps</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-hashes-and-maps/</link>
      <pubDate>Sat, 07 Jul 2018 10:56:38 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-hashes-and-maps/</guid>
      <description>关联角色和关联类 关联角色是 Hash 和 Map 以及 MixHash 等其他类的基础。它定义了将在关联类中使用的两种类型; 默认情况下，您可以使用任何内容（字面意思，因为任何 Any 子类的类都可以使用）作为键和 keyof 方法。</description>
    </item>
    
    <item>
      <title>Proc Async</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-proc-async/</link>
      <pubDate>Fri, 06 Jul 2018 21:14:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-proc-async/</guid>
      <description>class Proc::Async {} 注意: 目前只有 Rakudo 的 MoarVM 后端实现了 [Proc::Async](https://docs.</description>
    </item>
    
    <item>
      <title>我为什么学习Raku</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0raku/</link>
      <pubDate>Fri, 06 Jul 2018 00:27:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0raku/</guid>
      <description>http://www.evanmiller.org/why-im-learning-perl-6.html</description>
    </item>
    
    <item>
      <title>Raku 概览</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-raku%E6%A6%82%E8%A7%88/</link>
      <pubDate>Fri, 06 Jul 2018 00:23:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-raku%E6%A6%82%E8%A7%88/</guid>
      <description>http://www.evanmiller.org/a-review-of-perl-6.html</description>
    </item>
    
    <item>
      <title>散列的散列</title>
      <link>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</link>
      <pubDate>Thu, 05 Jul 2018 00:29:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</guid>
      <description>如何在 Raku 中声明散列的数字散列？ 默认情况下，散列将所有键转换为字符串。当你的键是可能接近的数字时，会导致问题：</description>
    </item>
    
    <item>
      <title>Raku Colon Pair</title>
      <link>https://ohmysummer.github.io/post/2018-06-19-raku-colon-pair/</link>
      <pubDate>Tue, 19 Jun 2018 19:38:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-06-19-raku-colon-pair/</guid>
      <description>原文</description>
    </item>
    
    <item>
      <title>饭否客户端</title>
      <link>https://ohmysummer.github.io/post/2018-05-10-%E9%A5%AD%E5%90%A6%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <pubDate>Thu, 10 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-10-%E9%A5%AD%E5%90%A6%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <description>Inspired by fanfou-py</description>
    </item>
    
    <item>
      <title>Raku CookBook</title>
      <link>https://ohmysummer.github.io/post/2018-05-08-perl6cookbook/</link>
      <pubDate>Tue, 08 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-08-perl6cookbook/</guid>
      <description>Raku CookBook(inspired by Python cookbook)</description>
    </item>
    
    <item>
      <title>Dateish</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-dateish/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-dateish/</guid>
      <description>role Dateish { .</description>
    </item>
    
    <item>
      <title>Make</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-make/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-make/</guid>
      <description>方法 make 的文档由以下类型组装而成：</description>
    </item>
    
    <item>
      <title>Slip</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-slip/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-slip/</guid>
      <description>有时您想要将列表的元素插入到另一个列表中。这可以通过称为 Slip 的特殊类型的列表完成。</description>
    </item>
    
    <item>
      <title>类和对象</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid>
      <description>Raku 有一个丰富的内置语法来定义和使用类。</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>https://ohmysummer.github.io/post/2018-05-05-datetime/</link>
      <pubDate>Sat, 05 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-05-datetime/</guid>
      <description>DateTime class DateTime does Dateish {}对于在国内处理点数，DateTime 对象存储年，月，日，小时，分钟（全部为 Int），秒（可能为小数）和时区。</description>
    </item>
    
    <item>
      <title>Awesome Async Interfaces with Raku</title>
      <link>https://ohmysummer.github.io/post/2018-04-27-raku%E4%B8%AD%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%8F%B9%E7%9A%84%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 26 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-27-raku%E4%B8%AD%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%8F%B9%E7%9A%84%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3/</guid>
      <description>2015 年圣诞节前后, 我写了我的第一个 Raku 程序 - 新年 IRC 派对机器人。这项工作包括发布了 IRC::Client 模块。我从这个语言中找到了童年的乐趣并且在假期喝了不少酒, 结果就是这个模块最终足够疯狂。</description>
    </item>
    
    <item>
      <title>Cro::HTTP::Client</title>
      <link>https://ohmysummer.github.io/post/2018-04-16-cro-http-client/</link>
      <pubDate>Mon, 16 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-16-cro-http-client/</guid>
      <description>Cro::HTTP::Client Cro::HTTP::Client 类提供了一个灵活的 HTTP 和 HTTPS 客户端实现，可以从简单到更复杂的情况进行扩展。它可以通过两种方式消费：</description>
    </item>
    
    <item>
      <title>使用 flip-flop 和 gather-take 提取文本块儿</title>
      <link>https://ohmysummer.github.io/post/2018-04-15-flip-flop/</link>
      <pubDate>Sun, 15 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-15-flip-flop/</guid>
      <description>使用 flip-flop 和 gather-take 提取文本块儿 my $excerpt = q:to/END/; Here&#39;s some unimportant text.</description>
    </item>
    
    <item>
      <title>Raku 中散列的键和值</title>
      <link>https://ohmysummer.github.io/post/2018-04-14-keys-values-of-hashes-in-raku/</link>
      <pubDate>Sat, 14 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-14-keys-values-of-hashes-in-raku/</guid>
      <description>Raku 中散列的键和值 今天，我们将看看 Hash 类的几个返回散列所有键或值或同时返回键和值的方法:</description>
    </item>
    
    <item>
      <title>Raku 中的列表解析</title>
      <link>https://ohmysummer.github.io/post/2018-04-13-raku%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 13 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-13-raku%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>Raku 中的列表解析 看一看 Python 中关于列表推导的页面。</description>
    </item>
    
    <item>
      <title>在 Raku 中设置超时</title>
      <link>https://ohmysummer.github.io/post/2018-04-12-setting-timeouts-in-raku/</link>
      <pubDate>Thu, 12 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-12-setting-timeouts-in-raku/</guid>
      <description>在 Raku 中设置超时 在 Perl 5 中，我曾经使用信号设置超时（至少，这是一种简单且可预测的方式）。在 Raku 中，您可以使用 promise。让我们看看如何做到这一点。</description>
    </item>
    
    <item>
      <title>Typed hashes in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-04-11-typed-hashes-in-raku/</link>
      <pubDate>Wed, 11 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-11-typed-hashes-in-raku/</guid>
      <description>Typed hashes in Raku 在 Raku 中, 你可以通过指定变量的类型来限制变量容器的内容, 例如：</description>
    </item>
    
    <item>
      <title>Raku 中的 gist 方法</title>
      <link>https://ohmysummer.github.io/post/2018-04-10-what-does-gist-do-in-raku/</link>
      <pubDate>Tue, 10 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-10-what-does-gist-do-in-raku/</guid>
      <description>当你打印对象的时候, 例如 say $x, Raku 调用 gist 方法.</description>
    </item>
    
    <item>
      <title>Raku 中的 Superscripts</title>
      <link>https://ohmysummer.github.io/post/2018-04-09-raku%E4%B8%AD%E7%9A%84%E4%B8%8A%E6%A0%87/</link>
      <pubDate>Mon, 09 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-09-raku%E4%B8%AD%E7%9A%84%E4%B8%8A%E6%A0%87/</guid>
      <description>Raku 中的 Superscripts 在 Raku 中，可以使用上标索引来计算数字的幂数，例如:</description>
    </item>
    
    <item>
      <title> More on the proto keyword in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-21-more-on-the-proto-keyword-in-raku/</link>
      <pubDate>Wed, 21 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-21-more-on-the-proto-keyword-in-raku/</guid>
      <description>在深入研究 EVAL 子例程的细节之前，我们必须揭示一些关于 protos 原型和多重分派的更多信息。检查以下程序：</description>
    </item>
    
    <item>
      <title>Examining the Real role of Raku, part 2</title>
      <link>https://ohmysummer.github.io/post/2018-02-18-examining-the-real-role-of-raku-part-2/</link>
      <pubDate>Sun, 18 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-18-examining-the-real-role-of-raku-part-2/</guid>
      <description>今天，我们继续对几天前开始的 Real 角色进行初步探索。</description>
    </item>
    
    <item>
      <title>Everyone Loves Porgs</title>
      <link>https://ohmysummer.github.io/post/2018-02-17-everyone-loves-porgs/</link>
      <pubDate>Sat, 17 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-17-everyone-loves-porgs/</guid>
      <description>这个想法有一阵子了。我在完成的各个阶段都有几个发文的想法，有时候很难优先考虑这个问题。所以我想我要开始发布我一直在玩的更短的想法和事情，以免这个博客变成那些永不更新的博客之一。所以，我们开始吧。</description>
    </item>
    
    <item>
      <title>A word on polymod in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-16-a-word-on-polymod-in-raku/</link>
      <pubDate>Fri, 16 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-16-a-word-on-polymod-in-raku/</guid>
      <description>在转到 Real 角色的第二部分之前，让我们停下来研究一下 Int 类的中的 polymod 方法。</description>
    </item>
    
    <item>
      <title>如何在 Raku 中对散列进行排序</title>
      <link>https://ohmysummer.github.io/post/2018-02-16-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%AF%B9%E6%95%A3%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 16 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-16-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%AF%B9%E6%95%A3%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</guid>
      <description>要在 Raku 中对散列进行排序，首先你要知道什么是占位符变量。一旦这个概念变得清晰，对散列排序就变得非常简单。</description>
    </item>
    
    <item>
      <title>Examining the Real role of Raku, part 1</title>
      <link>https://ohmysummer.github.io/post/2018-02-15-examining-the-real-role-of-perl-6-part-1/</link>
      <pubDate>Thu, 15 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-15-examining-the-real-role-of-perl-6-part-1/</guid>
      <description>在过去的几天里，我们谈了很多关于 Real 这个角色。让我们更仔细地看看它。该代码位于 src/core/Real.</description>
    </item>
    
    <item>
      <title>FatRat vs Rat in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-15-fatrat-vs-rat-in-raku/</link>
      <pubDate>Thu, 15 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-15-fatrat-vs-rat-in-raku/</guid>
      <description>昨天，Solomon Foster 在 Facebook 的 Raku 小组上发布了一个例子:</description>
    </item>
    
    <item>
      <title>A bit more on Rat vs FatRat in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-14-a-bit-more-on-rat-vs-fatrat-in-perl-6/</link>
      <pubDate>Wed, 14 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-14-a-bit-more-on-rat-vs-fatrat-in-perl-6/</guid>
      <description>昨天，我们正在深入研究 Rakudo Raku，以了解Rat值成为Num值的时间。事实证明，如果该值变得太小，这意味着它的分母变得越来越大，Rakudo开始使用Num值而不是Rat。</description>
    </item>
    
    <item>
      <title>Going over the Bridge, part 2. Let’s get rid of it</title>
      <link>https://ohmysummer.github.io/post/2018-02-12-going-over-the-bridge-part-2/</link>
      <pubDate>Mon, 12 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-12-going-over-the-bridge-part-2/</guid>
      <description>今天，我们继续在 Rakudo Raku 中使用 Bridge 方法。昨天，我们在几个预定义的数据类型中看到了方法的定义。现在是时候看看如何使用该方法。</description>
    </item>
    
    <item>
      <title>Going over the Bridge, part 1</title>
      <link>https://ohmysummer.github.io/post/2018-02-11-going-over-the-bridge-part-1/</link>
      <pubDate>Sun, 11 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-11-going-over-the-bridge-part-1/</guid>
      <description>在处理 Raku 中的数字的类中，我们看到了 Bridge 方法，该方法以多态方式使用。让我们花一些时间，并试图了解 1）它是如何工作的，2）是否有必要。</description>
    </item>
    
    <item>
      <title>Raku 中的命名参数</title>
      <link>https://ohmysummer.github.io/post/2018-02-10-raku%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sat, 10 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-10-raku%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</guid>
      <description>Raku 中的函数（和类方法）能够接受命名参数。最简单的方法是用箭头分隔名称和值：</description>
    </item>
    
    <item>
      <title>Raku Grammar 中的冒号对儿</title>
      <link>https://ohmysummer.github.io/post/2018-02-08-raku-grammar%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7%E5%AF%B9%E5%84%BF/</link>
      <pubDate>Thu, 08 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-08-raku-grammar%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7%E5%AF%B9%E5%84%BF/</guid>
      <description>欢迎来到这个系列的第 50 篇文章!</description>
    </item>
    
    <item>
      <title>Raku 中的数据类型 Bag</title>
      <link>https://ohmysummer.github.io/post/2018-02-07-raku%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bbag/</link>
      <pubDate>Wed, 07 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-07-raku%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bbag/</guid>
      <description>数据类型 Bag 是一种 Perl 5 中没有的新的数据类型。</description>
    </item>
    
    <item>
      <title>Raku Rakudo 和 NQP 内部研讨(二)</title>
      <link>https://ohmysummer.github.io/post/2018-01-29-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</link>
      <pubDate>Mon, 29 Jan 2018 23:01:01 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-01-29-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</guid>
      <description>title: Rakudo and NQP Internals subtitle: The guts tormented implementers made author: Jonathan Worthington</description>
    </item>
    
    <item>
      <title>Raku Core Hacking: QASTalicious</title>
      <link>https://ohmysummer.github.io/post/2018-01-28-raku-core-hacking-qastalicious/</link>
      <pubDate>Sun, 28 Jan 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-01-28-raku-core-hacking-qastalicious/</guid>
      <description>在过去的一个月中，我在 Rakudo 的 QAST 地区花了一些时间写了一些优化，修复了包含警告的错误，并且用一个单一的提交压缩了一个10个thunk范围的bug的怪物蜂巢。 在今天的文章中，我们将详细介绍最后一个专长，以及了解QAST是什么以及如何使用它。</description>
    </item>
    
    <item>
      <title>Raku logo</title>
      <link>https://ohmysummer.github.io/post/2018-01-28-perl-6-logo/</link>
      <pubDate>Sun, 28 Jan 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-01-28-perl-6-logo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Playing with the code of Rakudo Raku</title>
      <link>https://ohmysummer.github.io/post/2017-12-23-playing-with-the-code-of-raku/</link>
      <pubDate>Sat, 23 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-23-playing-with-the-code-of-raku/</guid>
      <description>昨天，我们查看了返回字符串的 Bool 类的两个方法。函数产生的字符串表示在源代码中被硬编码。</description>
    </item>
    
    <item>
      <title>Exploring the Bool type in Raku, part 1</title>
      <link>https://ohmysummer.github.io/post/2017-12-22-exploring-the-bool-type-in-raku-part-1/</link>
      <pubDate>Fri, 22 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-22-exploring-the-bool-type-in-raku-part-1/</guid>
      <description>今天，我们将使用 GitHub 上提供的 Rakudo 源代码挖掘 Bool 类型的内部。</description>
    </item>
    
    <item>
      <title>Raku 中的 proto 关键字</title>
      <link>https://ohmysummer.github.io/post/2017-12-21-raku-%E4%B8%AD%E7%9A%84-proto-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Thu, 21 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-21-raku-%E4%B8%AD%E7%9A%84-proto-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>今天，我们正在关注 proto 关键字。它向编译器提供了关于你打算创建 multi-subs 的提示。</description>
    </item>
    
    <item>
      <title>根据select结果生成insert语句</title>
      <link>https://ohmysummer.github.io/post/2017-09-16-%E6%A0%B9%E6%8D%AEselect%E7%BB%93%E6%9E%9C%E7%94%9F%E6%88%90insert%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sat, 16 Sep 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-09-16-%E6%A0%B9%E6%8D%AEselect%E7%BB%93%E6%9E%9C%E7%94%9F%E6%88%90insert%E8%AF%AD%E5%8F%A5/</guid>
      <description>想根据 MySQL select 语句的结果生成 insert 语句。</description>
    </item>
    
    <item>
      <title>开启 Disqus 评论</title>
      <link>https://ohmysummer.github.io/post/2017-09-15-%E5%BC%80%E5%90%AFdisqus%E8%AF%84%E8%AE%BA/</link>
      <pubDate>Fri, 15 Sep 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-09-15-%E5%BC%80%E5%90%AFdisqus%E8%AF%84%E8%AE%BA/</guid>
      <description>要开启 Disqus 评论, 需要先在 Disqus 官网注册账号, 获得 disqusShortname。</description>
    </item>
    
    <item>
      <title>Raku 中的笑脸</title>
      <link>https://ohmysummer.github.io/post/2017-03-11-raku%E4%B8%AD%E7%9A%84%E7%AC%91%E8%84%B8/</link>
      <pubDate>Sat, 11 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-11-raku%E4%B8%AD%E7%9A%84%E7%AC%91%E8%84%B8/</guid>
      <description>在 Raku 中在调用者的类型身上使用 :D 或 :U 类型笑脸来制造 type/instance 方法:</description>
    </item>
    
    <item>
      <title>关于 Raku 你要知道的 10 件事</title>
      <link>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eraku%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Sat, 22 Oct 2016 00:52:52 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eraku%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</guid>
      <description>Ten Things You Need To Know about Raku Jeffrey Goff, Evozon Systems LLC OSCON London 2016 https://github.</description>
    </item>
    
    <item>
      <title>Raku 中的并发</title>
      <link>https://ohmysummer.github.io/post/2016-10-03-raku%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 03 Oct 2016 20:43:15 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-03-raku%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description>Concurrency</description>
    </item>
    
    <item>
      <title>Raku 中的 Subscripts</title>
      <link>https://ohmysummer.github.io/post/2016-06-01-raku%E4%B8%AD%E7%9A%84subscripts/</link>
      <pubDate>Wed, 01 Jun 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-01-raku%E4%B8%AD%E7%9A%84subscripts/</guid>
      <description>Subscripts 通过索引或键访问数据结构中的元素。</description>
    </item>
    
    <item>
      <title>Raku 中的签名</title>
      <link>https://ohmysummer.github.io/post/2016-04-12-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Tue, 12 Apr 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-12-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/</guid>
      <description>签名也是对象 class Signature {}签名是代码对象参数列表的静态描述。即, 签名描述了你需要什么参数和多少参数传递给代码或函数以调用它们。</description>
    </item>
    
    <item>
      <title>Grammars</title>
      <link>https://ohmysummer.github.io/post/2016-02-05-raku-grammars/</link>
      <pubDate>Fri, 05 Feb 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-05-raku-grammars/</guid>
      <description>Grammars Grammars - 一组具名 regexes 组成正式的 grammar</description>
    </item>
    
    <item>
      <title>面向对象的 Raku</title>
      <link>https://ohmysummer.github.io/post/2015-06-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84raku/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84raku/</guid>
      <description>https://docs.raku.org/language/objects</description>
    </item>
    
    <item>
      <title>Raku Grammars, Part 1</title>
      <link>https://ohmysummer.github.io/post/2018-02-13-raku-grammers-part-1/</link>
      <pubDate>Fri, 11 Jul 2014 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-13-raku-grammers-part-1/</guid>
      <description>Raku Grammars, Part 1 Raku 语言内置了对 grammar 的支持。您可以将 grammars 视为众所周知的正则表达式和诸如 yacc 或 bison 等实用程序或更复杂的 grammar 工具（如ANTLR）的组合。所有这些 - 词法分析器，语法分析器和语义处理 - 通常是编译器的独立部分，在 Raku 中它们都是内置的，并且可以通过全新的 Raku 安装 进行开箱即用。</description>
    </item>
    
  </channel>
</rss>