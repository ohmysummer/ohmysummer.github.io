<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl6 on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/categories/perl6/</link>
    <description>Recent content in Perl6 on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 Sep 2018 20:18:30 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/categories/perl6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How Naming of Variables Works in Perl 6</title>
      <link>https://ohmysummer.github.io/post/2018-09-28-how-naming-of-variables-works-in-perl-6/</link>
      <pubDate>Fri, 28 Sep 2018 20:18:30 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-28-how-naming-of-variables-works-in-perl-6/</guid>
      <description>在本系列的第 5 篇文章中，比较 Perl 5 和 Perl 6，了解在 Perl 6 中使用 sigils。
在本系列的前 4 篇文章中，我们比较了 Perl 5 和 Perl 6，讨论了迁移代码时可能遇到的一些问题，垃圾收集是如何工作的，为什么容器替换了引用，以及在 Perl 6 中使用(子例程)签名，以及这些与 Perl 5 的区别。
在第 5 篇文章中，我们将查看 Perl 5 和 Perl 6 之间 sigils(变量名开头的符号)的细微差别。
概览 让我们从 Perl 5 和 Perl 6 中的 sigils 的概述开始:
   Sigil Perl 5 Perl 6     @ Array Positional   % Hash Associative   &amp;amp; Subroutine Callable   $ Scalar Item   * Typeglob n/a    @ (Array vs.</description>
    </item>
    
    <item>
      <title>Toptic Variable</title>
      <link>https://ohmysummer.github.io/post/2018-09-13-toptic-variable/</link>
      <pubDate>Fri, 14 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-13-toptic-variable/</guid>
      <description>$_ 变量 $_ 是主题变量。它是没有显式签名的块的默认参数，因此 for @array {...} 和 given $var {...} 这样的构造通过调用块绑定到 $_。
for for &amp;lt;a b c&amp;gt; { say $_ } # sets $_ to &#39;a&#39;, &#39;b&#39; and &#39;c&#39; in turn say $_ for &amp;lt;a b c&amp;gt;; # same, even though it&#39;s not a block  given given &#39;a&#39; { say $_ } # sets $_ to &#39;a&#39; say $_ given &#39;a&#39;; # same, even though it&#39;s not a block  设置默认的主题变量可以省去很多打字：</description>
    </item>
    
    <item>
      <title>Perl 6 中的容器</title>
      <link>https://ohmysummer.github.io/post/2018-08-29-perl6%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 29 Aug 2018 19:55:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-29-perl6%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>在本系列的第一篇文章中，将 Perl 5 与 Perl 6 进行了比较，我们研究了将代码迁移到 Perl 6 时可能遇到的一些问题。在第二篇文章中，我们研究了垃圾收集在 Perl 6 中的工作原理。第三篇文章，我们将重点介绍 Perl 5 的引用以及如何在 Perl 6 中处理它们，并介绍绑定和容器的概念。
引用 Perl 6 中没有引用，这对许多习惯于 Perl 5 语义的人来说都是令人惊讶的。但不要担心：因为没有引用，所以您不必担心是否应该解引用某些内容。
# Perl 5 my $foo = \@bar; # must add reference \ to make $foo a reference to @bar say @bar[1]; # no dereference needed say $foo-&amp;gt;[1]; # must add dereference -&amp;gt;  # Perl 6 my $foo = @bar; # $foo now contains @bar say @bar[1]; # no dereference needed, note: sigil does not change say $foo[1]; # no dereference needed either  有人可能会说 Perl 6 中的所有东西都是引用。来自 Perl 5（其中一个对象是一个受祝福的引用），这将是关于 Perl 6 的逻辑结论，其中所有的东西都是对象（或者可以被认为是一个对象）。但这并不能完全符合 Perl 6 中的情况，并且会妨碍你理解 Perl 6 的工作原理。谨防虚假的朋友！</description>
    </item>
    
    <item>
      <title>Command Line Arguments in Perl 6</title>
      <link>https://ohmysummer.github.io/post/2018-08-07-command-line-arguments-in-perl-6/</link>
      <pubDate>Tue, 07 Aug 2018 19:54:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-07-command-line-arguments-in-perl-6/</guid>
      <description>MAIN 子例程 命名参数和位置参数  命名参数 位置参数 Multi dispatch 组合命名参数和位置参数  可选参数和必选参数 别名或备用命名参数 USAGE 子例程  Sub MAIN 在 Perl 6 中，命令行参数的解析是使用 MAIN 子例程完成的，MAIN 子例程是一个特殊的子例程，它根据签名解析命令行参数。与其他子程序一样，您可以使用命名参数和位置参数，可选（和必需）参数，multiple dispatch 等。 通过定义 MAIN 子例程，编译器会自动生成 USAGE 子例程。可以修改此子例程以返回自定义的 usage 信息。所有的命令行参数也可以在特殊变量 @*ARGS 中使用，它可以在 MAIN 处理之前进行更改。
命名参数和位置参数 命名参数
我们从一个简单的程序开始（保存为 prog.p6）:
use v6; sub MAIN( Str :$name = &#39;John&#39;, Str :$last-name = &#39;Doe&#39;, ) { my $formatted-name = &amp;quot;$name.tc() $last-name.tc()&amp;quot;; say $formatted-name; }  在这个 MAIN 子程序中，我们创建了两个命名参数，$name 和 $last-name，带有类型约束（Str），方法是在子例程的签名给每个变量添加 :。这些参数还具有默认值，这是通过为参数赋值来实现的。在这种情况下，我们将 $name 设置为默认值 &amp;lsquo;John&amp;rsquo;，将 $last-name 设置为 &amp;lsquo;Doe&amp;rsquo;。如果执行 prog.</description>
    </item>
    
    <item>
      <title>Intro Into Perl 6 Regexes and Grammars</title>
      <link>https://ohmysummer.github.io/post/2018-08-04-intro-into-perl-6-regexes-and-grammars/</link>
      <pubDate>Sat, 04 Aug 2018 20:33:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-04-intro-into-perl-6-regexes-and-grammars/</guid>
      <description>tpm-regex.perl6.party
STATUS QUO: PCRE “Perl 兼容的正则表达式”非常神秘，但许多语言只是盲目地遵循现状。
它们是 &amp;lt;?!, &amp;lt;=?!, or &amp;lt;!#?@$%^( 吗？
/(?&amp;lt;!foo)bar(?=baz)/  更好的正则表达式语法 Perl 6 并不害怕拒绝现状。
/&amp;lt;!after foo&amp;gt; bar &amp;lt;before baz&amp;gt;/  空格可以自由使用 文字字符串：字母数字字符可以按原样使用。 其他的字符，只需使用引号或反斜杠：
say so &amp;quot;I ♥ Perl 6&amp;quot; ~~ /I \♥ Perl 6/; # False say so &amp;quot;I ♥ Perl 6&amp;quot; ~~ / &#39;I ♥ Perl 6&#39; /; # True say so &amp;quot;I ♥ Perl 6&amp;quot; ~~ / I #`(BTW, you can use inline,) &amp;quot; ♥ &amp;quot; &amp;quot;Perl 6&amp;quot; # as well as end-of-line comments /; # True  文本内容的变量 默认设置是将内容与纯文本匹配。将变量放入尖括号中以将其解释为正则表达式。</description>
    </item>
    
    <item>
      <title>Ping Pang in Perl6</title>
      <link>https://ohmysummer.github.io/post/2018-08-03-ping-pang-in-perl6/</link>
      <pubDate>Fri, 03 Aug 2018 21:08:25 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-03-ping-pang-in-perl6/</guid>
      <description>Ping Pang in Perl 6 使用 channels 在线程之间传递消息是一种管理并发的简单方法。
一位朋友最近向我展示了一个很酷的程序，用 elixir 来演示消息传递 - 两个线程通过来回传递递增的数字来计数。快速搜索出现了一些例子。
我决定在 Perl 6 中实现这个。这就是我想出来的→
my ($ping, $pong) = Channel.new xx 2; sub ping { while $ping.receive -&amp;gt; $n { say &amp;quot;ping $n (thread #{$*THREAD.id})&amp;quot;; $pong.send: $n + 1; } } sub pong { while $pong.receive -&amp;gt; $n { last if $n &amp;gt;= 5; say &amp;quot;pong $n (thread #{$*THREAD.id})&amp;quot;; $ping.send: $n + 1; } } $ping.send: 1; await Promise.</description>
    </item>
    
    <item>
      <title>使用 Cro 创建单页应用程序</title>
      <link>https://ohmysummer.github.io/post/2018-08-02-%E4%BD%BF%E7%94%A8cro%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 02 Aug 2018 22:54:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-02-%E4%BD%BF%E7%94%A8cro%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>使用 Cro 创建单页应用 本教程将介绍如何使用 Cro 作为后端构建简单的单页应用程序。对于前端，我们将使用 webpack，ES6，React 和 Redux。你不需要事先了解这些信息，但如果您想在自己的应用程序中很好地使用它们，则需要进一步阅读。
代码可以在这里获取。在教程的各个阶段，提交了当前的状态。仓库历史记录与教程完全匹配，因此你可以使用它来获取各步骤变更的概述，或者如果你试图通过从头开始构建这些东西，可以知道你错过了什么。
你需要什么  要安装 Cro (请参阅本指南获取相关帮助)
 要安装 npm (即 Node.js 的包管理器, 我们要用它来获取需要的包来构建前端); 在基于 Debian 的 Linux 发行版上，只需 sudo apt install npm。
  我们要构建什么 所以我们正在举办美食节或者啤酒节。或者任何带有一堆我们可以尝试的东西的活动。但是&amp;hellip;尝试什么？如果有这样一些应用程序就好了，人们可以留下他们关于什么火和什么不火的提示，我们可以实时看到他们。如果在去过的上一届啤酒节上有过这样的东西，我可能会幸免于那杯绿茶啤酒&amp;hellip;&amp;hellip;
所以, 我们会制作一个单页应用程序以支持:
 提交新的提示 (POST 到后端)
 现场发布最新提示 (通过网络套接字提供)
 能够同意或不同意某提示 (也是 POST) 能够看到按照最愉快到最不愉快 (通过 GE T获取) 排序的提示列表  Stubbing 后端 给应用程序想一个有创意的名称。我叫它 &amp;ldquo;tipsy&amp;rdquo;。然后使用 cro stub 来存根 HTTP 应用程序。为了简单起见，我们将跳过 HTTPS（也就是HTTP/2.0），但会包含 Web 套接字支持。
$ cro stub http tipsy tipsy Stubbing a HTTP Service &#39;tipsy&#39; in &#39;tipsy&#39;.</description>
    </item>
    
    <item>
      <title>使用 Perl 6 连接 Kafka</title>
      <link>https://ohmysummer.github.io/post/2018-07-20-%E4%BD%BF%E7%94%A8perl6%E8%BF%9E%E6%8E%A5kafka/</link>
      <pubDate>Fri, 20 Jul 2018 20:14:28 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-20-%E4%BD%BF%E7%94%A8perl6%E8%BF%9E%E6%8E%A5kafka/</guid>
      <description>有这样一个场景, 数据发送方将压缩文件读成字节数组后发往 Kafka, 然后第三方的 Kafka Client 从中读取字节数组解压缩, 每条 message 对应一个压缩文件, 每个压缩文件中包含 _log.txt 和 _result.txt。
Perl 6 可以从 Kafka 中读取消息并完成解析。
首先安装相关模块: Pkafka 用于和 Kafka 交互； Archive::Libarchive 用于解压缩字节数组。 Cro 用于 HTTP 请求，DBiish 用于数据库读写。
zef install Pkafka zef install Archive::Libarchive zef install Cro zef install DBIish  代码片段如下:
use PKafka::Consumer; use PKafka::Message; use PKafka::Producer; use Archive::Libarchive; use Archive::Libarchive::Constants; use Cro::HTTP::Client; use JSON::Fast; use JSON::Path; use DBIish; sub MAIN () { my $brokers = &amp;quot;127.</description>
    </item>
    
    <item>
      <title>Io Guide</title>
      <link>https://ohmysummer.github.io/post/2018-07-14-io-guide/</link>
      <pubDate>Sat, 14 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-14-io-guide/</guid>
      <description>基础知识 绝大多数常见的 IO 工作都是由 IO::Path 类型完成的。如果你想以某种形式或形状读取或写入文件，这就是你想要的类。它抽象出文件句柄（或“文件描述符”）的细节，因此你甚至不必考虑它们。
在幕后， IO::Path 与 IO::Handle 一起使用 ; 如果你需要比 IO::Path 提供的更多控制，你可以直接使用的类。当与其他进程，例如通过工作 Proc 或 Proc::Async 类型，你还可以处理一个子类的 IO::Handle 在 IO::Pipe。
最后，你有 IO::CatHandle ，以及 IO::Spec 及其子类，你很少直接使用它们。这些类为你提供了高级功能，例如将多个文件作为一个句柄进行操作，或者进行低级路径操作。
除了所有这些类之外，Perl 6还提供了几个子程序，可以让你间接使用这些类。如果你喜欢函数式编程风格或Perl 6 单行程序，这些就派上用场了。
虽然 IO::Socket 及其子类也与输入和输出有关，但本指南并未涵盖它们。
路径导航 什么是 IO::Path？ 要将路径表示为文件或目录，请使用 IO::Path 类型。获取该类型对象的最简单方法是通过在 Str 上调用 .IO 方法将字符串强制为 IO 类型：
say &#39;my-file.txt&#39;.IO; # OUTPUT: «&amp;quot;my-file.txt&amp;quot;.IO␤»  看起来这里似乎缺少某些东西 - 没有涉及卷或绝对路径 - 但该信息实际上存在于该 IO 对象中。你可以通过使用 .perl 方法看到它：
say &#39;my-file.txt&#39;.IO.perl; # OUTPUT: «IO::Path.new(&amp;quot;my-file.txt&amp;quot;, :SPEC(IO::Spec::Unix), :CWD(&amp;quot;/home/camelia&amp;quot;))␤»  这两个额外的属性 - SPEC 和 - CWD 指定路径应该使用的操作系统语义类型以及路径的“当前工作目录”，即如果它是相对路径，则它相对于该目录。</description>
    </item>
    
    <item>
      <title>Cro Http Test</title>
      <link>https://ohmysummer.github.io/post/2018-07-14-cro-http-test/</link>
      <pubDate>Sat, 14 Jul 2018 17:14:59 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-14-cro-http-test/</guid>
      <description>Cro::HTTP::Test 原则上可以通过使用 Cro::HTTP::Server托管应用程序, 使用 Cro::HTTP::Client向其发出请求, 并使用标准 Test 库检查结果来编写 Cro HTTP 服务的测试。该库使编写此类测试更容易, 并通过以下方式更快地执行它们：
 为发出测试请求和检查结果提供更方便的 API 跳过网络并将 Cro::TCP 对象从客户端管道传递到服务器管道, 反之亦然  基本示例 给定模块 MyService::Routes, 如下所示：
sub routes() is export { route { get -&amp;gt; { content &#39;text/plain&#39;, &#39;Nothing to see here&#39;; } post -&amp;gt; &#39;add&#39; { request-body &#39;application-json&#39; =&amp;gt; -&amp;gt; (:$x!, :$y!) { content &#39;application/json&#39;, { :result($x + $y) }; } } } }  我们可以像这样编写测试：
use Cro::HTTP::Test; use MyService::Routes; test-service routes(), { test get(&#39;/&#39;), status =&amp;gt; 200, content-type =&amp;gt; &#39;text/plain&#39;, body =&amp;gt; /nothing/; test-given &#39;/add&#39;, { test post(json =&amp;gt; { :x(37), :y(5) }), status =&amp;gt; 200, json =&amp;gt; { :result(42) }; test post(json =&amp;gt; { :x(37) }), status =&amp;gt; 400; test get(json =&amp;gt; { :x(37) }), status =&amp;gt; 405; } } done-testing;  设置要测试的服务 test-service 函数有两个候选者。</description>
    </item>
    
    <item>
      <title>Class Channel</title>
      <link>https://ohmysummer.github.io/post/2018-07-08-class-channel/</link>
      <pubDate>Sun, 08 Jul 2018 16:11:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-08-class-channel/</guid>
      <description>class Channel {}  Channel 是一个线程安全的队列，可帮助你将一个或多个生产者的一系列对象发送给一个或多个消费者。每个对象将仅到达由调度程序选择的一个这样的消费者。如果只有一个消费者和一个生产者，则保证保留对象的顺序。在 Channel 上发送是非阻塞的。
my $c = Channel.new; await (^10).map: { start { my $r = rand; sleep $r; $c.send($r); } } $c.close; say $c.list;  可以在并发页面中找到更多示例。
方法 send 方法 定义为：
method send(Channel:D: \item)  将项目排入频道。如果通道已经关闭，则抛出类型X :: Channel :: SendOnClosed的异常。此调用不会阻止等待使用者获取该对象。对可排队的项目数量没有设定限制，因此应注意防止失控排队。
my $c = Channel.new; $c.send(1); $c.send([2, 3, 4, 5]); $c.close; say $c.list; # OUTPUT: «(1 [2 3 4 5])␤»  receive 方法 定义为：
method receive(Channel:D:)  从频道接收和删除项目。如果没有项目存在，它会阻塞，等待来自另一个线程的发送。</description>
    </item>
    
    <item>
      <title>class Supply</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-class-supply/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-class-supply/</guid>
      <description>class Supply {}  supply 是一种线程安全的异步数据流，如 Channel，但它可以有多个订阅者（taps: 水龙头），所有订阅者都可以获得流经 supply 的相同值。
它是 观察者模式 的线程安全实现，是支持 Perl 6 中的反应式编程的核心。
有两种类型的 Supplies：实时(live)和按需(on demand)。当水龙头接入到实时(live)供应时，水龙头将仅在创建水龙头之后看到流经 supply 的值。这种供应(supplies)通常是无限的，例如鼠标移动。关闭这样的水龙头(tap)不会阻止鼠标事件的发生，它只是意味着值将看不见了。所有的开孔器(tappers )都看到了相同的值流(flow of values)。
在按需供应上轻敲(tap)将发起值的产生，再次轻敲(tap)供应可能会产生一组新的值。例如，每次轻敲时，Supply.interval 都会生成一个具有适当间隔的新计时器。如果水龙头(tap)关闭，计时器只会停止向该水龙头发射值。
从 Supplier 的工厂方法 Supply 获得 live Supply（实时供应）。通过在 Supplier 对象上调用 emit 来发出新值。
my $supplier = Supplier.new; my $supply = $supplier.Supply; $supplier.tap( -&amp;gt; $v { say &amp;quot;$v&amp;quot; }); $supplier.emit(42); # Will cause the tap to output &amp;quot;42&amp;quot;  实时方法在实时供应上返回 True。工厂方法如 interval，from-list 会返回按需供应(on demand supplies)。
可以使用 Supplier::Preserving创建一个直到第一次轻敲的保存值的实时供应（Supply）。</description>
    </item>
    
    <item>
      <title>Perl 6 Pod</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-perl6-pod/</link>
      <pubDate>Sat, 07 Jul 2018 18:16:19 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-perl6-pod/</guid>
      <description>Perl 6 Pod 是一种易于使用的标记语言。 Pod 可用于编写语言文档，用于文档化程序和模块，以及其他类型的文档组合。
每个 Pod 文档必须以 =begin pod 开头，以 =end pod 结束。这两个分隔符之间的所有内容都将被处理并用于生成文档。
=begin pod A very simple Perl 6 Pod document =end pod  块结构 Pod 文档可能包含多个 Pod 块。有四种方法可以定义块（分隔符，段落，缩写和声明符）; 前三个产生相同的结果，但第四个不同。你可以使用最方便你的特定文档任务的任何形式。
分割符块 分隔块由 =begin 和 =end 标记限定，两者都后跟有效的 Perl 6 标识符，后者是块的 typename。完全小写的类型名称（例如 =begin head1）或完全大写（例如：=begin SYNOPSIS）保留。
=begin head1 Top Level Heading =end head1  配置信息 在 typename 之后， =begin 标记行的其余部分被视为块的配置信息。此信息由不同类型的块以不同方式使用，但始终使用 Perl6-ish 选项对指定。也就是说，任何：
   alue is&amp;hellip; Specify with&amp;hellip; Or with&amp;hellip; Or with&amp;hellip;     List :key[$e1, $e2, &amp;hellip;] :key($e1, $e2, &amp;hellip;)    Hash :key{$k1=&amp;gt;$v1, $k2=&amp;gt;$v2}     Boolean (true) :key :key(True) :key[True]   Boolean (false) :!</description>
    </item>
    
    <item>
      <title>Doing Math With Perl6</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-doing-math-with-perl6/</link>
      <pubDate>Sat, 07 Jul 2018 15:08:06 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-doing-math-with-perl6/</guid>
      <description>Sets Perl 6 包括 Set 数据类型，以及对大多数 set 操作的支持。并集和交集不仅是原生操作，它们使用自然符号 ∩ 和 ∪。例如，此代码将检查有限数量集的集算术的基本定律：
my @arbitrary-numbers = ^100; my \U = @arbitrary-numbers.Set; my @sets; @sets.push: Set.new( @arbitrary-numbers.pick( @arbitrary-numbers.elems.rand)) for @arbitrary-numbers; my (@union, @intersection); for @sets -&amp;gt; $set { @union.push: $set ∩ $set === $set; @intersection.push: $set ∪ $set === $set; } say &amp;quot;Idempotent union is &amp;quot;, so @union.all; # OUTPUT: «Idempotent union is True» say &amp;quot;Idempotent intersection is &amp;quot;, so @intersection.all; # OUTPUT: «Idempotent intersection is True» my (@universe, @empty-set, @id-universe, @id-empty); for @sets -&amp;gt; \A { @universe.</description>
    </item>
    
    <item>
      <title>Date and Time Functions</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</link>
      <pubDate>Sat, 07 Jul 2018 13:33:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</guid>
      <description>Perl 6 包括几个处理时态信息的类：Date，DateTime，Instant 和 Duration。前三个是 dateish，所以它们混合了 Dateish 角色，它定义了处理日期的类应该采用的所有方法和属性。它还包括以 X::Temporal 为根的异常的类层次结构。
我们将尝试在下一个（稍微扩展）的示例中说明这些类，这个示例可用于处理目录中的所有文件（默认情况下）。在目录中使用特定扩展名（默认为 .p6），根据他们的年龄对其进行排序，并计算每月创建的文件数量，以及在几个月的范围内表示的特定时期内修改的文件数量：
use v6; sub MAIN( $path = &amp;quot;.&amp;quot;, $extension = &amp;quot;p6&amp;quot; ) { my DateTime $right = DateTime.now; my %metadata; my %files-month; my %files-period; for dir($path).grep( / \.$extension $/ ) -&amp;gt; $file { CATCH { when X::Temporal { say &amp;quot;Date-related problem&amp;quot;, .payload } when X::IO { say &amp;quot;File-related problem&amp;quot;, .payload } default { .payload.say } } my Instant $modified = $file.</description>
    </item>
    
    <item>
      <title>Hashes and Maps</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-hashes-and-maps/</link>
      <pubDate>Sat, 07 Jul 2018 10:56:38 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-hashes-and-maps/</guid>
      <description>关联角色和关联类 关联角色是 Hash 和 Map 以及 MixHash 等其他类的基础。它定义了将在关联类中使用的两种类型; 默认情况下，您可以使用任何内容（字面意思，因为任何 Any 子类的类都可以使用）作为键和 keyof 方法。
默认情况下，使用 % sigil 声明的任何对象都将获得 Associative 角色，默认情况下将表现为散列，但此角色仅提供上述两种方法，以及默认的 Hash 行为。
say (%).^name ; # 输出 Hash  相反，如果未混入 Associative 角色，则不能使用 % sigil，但由于此角色没有任何关联属性，因此你必须重新定义散列下标操作符的行为。为此，你必须重写几个函数：
class Logger does Associative[Cool,DateTime] { has %.store; method log( Cool $event ) { %.store{ DateTime.new( now ) } = $event; } multi method AT-KEY ( ::?CLASS:D: $key) { my @keys = %.store.keys.grep( /$key/ ); %.store{ @keys }; } multi method EXISTS-KEY (::?</description>
    </item>
    
    <item>
      <title>Proc Async</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-proc-async/</link>
      <pubDate>Fri, 06 Jul 2018 21:14:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-proc-async/</guid>
      <description>class Proc::Async {}  注意: 目前只有 Rakudo 的 MoarVM 后端实现了 [Proc::Async](https://docs.perl6.org/type/Proc::Async)。
Proc::Async 允许你异步地运行外部命令, 捕获标准输出和错误句柄，并可选择地写入到它的标准输入中。
my $file = &#39;foo&#39;.IO; spurt $file, &amp;quot;and\nCamelia\n♡\nme\n&amp;quot;; my $proc = Proc::Async.new: :w, &#39;tac&#39;, &#39;--&#39;, $file, &#39;-&#39;; # my $proc = Proc::Async.new: :w, &#39;sleep&#39;, 15; # uncomment to try timeouts react { whenever $proc.stdout.lines { # split input on \r\n, \n, and \r say &#39;lines: &#39;, $_ } whenever $proc.stderr { say &#39;stderr: &#39;, $_ } whenever $proc.</description>
    </item>
    
    <item>
      <title>我为什么学习Perl6</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0perl6/</link>
      <pubDate>Fri, 06 Jul 2018 00:27:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0perl6/</guid>
      <description>http://www.evanmiller.org/why-im-learning-perl-6.html
想听一个编程笑话吗？
Perl 6。
想知道我最喜欢的编程语言吗？
Perl 6。
嘘，克隆 master 分支并运行这个：
use v6.d.PREVIEW; my $channel = Channel.new; my @ten_tasks = (^10).map: { start { my $thread = $*THREAD.id; await $channel; say &amp;quot;HOLY MOLEY SOMEONE STOLE MY THREAD&amp;quot; if $thread != $*THREAD.id; } } $channel.send(&amp;quot;Ring ring&amp;quot;) for ^10; $channel.close; await @ten_tasks;  猜猜它输出了什么？
没有！开个玩笑，你会看到很多来自任务的烦恼消息，等待电话响起，然后穿着别人的操作系统线程醒来。
为什么这很重要？并发很难，如果你想要M：N线程多路复用（即WEB SCALE CODE，其中应用程序线程没有固定到pthread）你今天的选择正是Erlang，Go，.NET和Perl 6。
如果你对Erlang感到困惑，被Go推迟，对.NET无动于衷，请看看Perl 6.认真的。当然，它的发展时间比男孩时期要长 - 从2000年开始，比电影早两年，并在2015年发布，两年之后 - 但也许如果有人在某事上工作了15年，他们实际上可能会做出一些好事。我不是说这种情况是真的（可能不是少年时代），但至少它是可能的，对吗？
有趣的是，十五年前，每个人都在说Perl是如何通过大规模的语言重新设计而自拔的，因为世界显然将转向Python和Ruby。好吧每个人都切换到Python和Ruby，但现在每个人都有了再次切换的痒，因为事实证明Python和Ruby并不是为并发代码执行而设计的。如果你需要的是仿生robo-feet，也许拍摄自己的脚并不是一个糟糕的策略。
我不会在这里回顾 Perl 6 作为一种语言，因为它是一个包含大量黑暗角落和奇怪边缘情况的大规模规范，但我确实希望分享一些关于语言运行时发现的事情。 Perl 6虚拟机MoarVM是一项出色的技术。</description>
    </item>
    
    <item>
      <title>Perl 6 概览</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-perl6%E6%A6%82%E8%A7%88/</link>
      <pubDate>Fri, 06 Jul 2018 00:23:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-perl6%E6%A6%82%E8%A7%88/</guid>
      <description>http://www.evanmiller.org/a-review-of-perl-6.html
Perl 6 让我想起了我叔叔的博士学位论文。在前五年, 我们会问（圣诞节前）他什么时候完成; 时间久了我们就越来越不相信他的答案了, 并且没有任何证据表明论文确实存在过, 我们使完成日期成为一种流行的笑话, 就像波士顿 Big Dig 或纽约的第二大道地铁线。但是, 经过多次自我强加的最后期限后, 我们已经不再拿它开玩笑了。过了那么多年, 我们不再问了。
如果你错过了, 我认为每个人都错过了, Perl 6 在一年半前 - 在 2015 年的圣诞节 - 碰巧发布了 - 在名义上跨越了近 16 年之后被发布了。 （我想, 但我不确定, 我的叔叔的论文也在某个时候完成了。）我在 2017 年写这篇文章的新编程语言市场虽然具有竞争力, 但并不是难以理解的 - 但就像一位新博士生, 似乎没有人确定 Perl 6 的市场前景, 就像一篇刚刚开始的论文, 似乎没有人知道多年的劳动成果是否真的值得一试。
除了你想要的任何简单答案之外, Perl 6 的提供者几乎没有提供关于你应该用这个语言做什么的一些提示。 Perl 6 是多范式的, 也许是全范式的; 它声称支持面向对象的编程, 函数式编程, 面向标记的编程, 数组编程和（旧的）过程式编程。这是一种新语言, 而不仅仅是 Perl 5 的清理版本, 只不过英语是德语减去变音符号。了解以前的版本, 唉, 不会让你走得太远。出于同样的原因, 对前面化身的偏见并不一定适用于今天的水。
接下来是我试图向世界提供一个对编程世界中最白的大象Perl 6的一个诚实的, 如果不完整的评估。我受到以下思想的激励：每个系统管理员至少知道一点 Perl, 但我不认识任何人我知道任何 Perl 6, 也不认识任何知道 Perl 6 的人。我从来没有读过任何关于 Perl 6 的信息。我同样可以想象一个 Perl 6 是一堆垃圾的世界, 还有一个语言设计的 Hope Diamond。似乎没有人知道;没有人会知道。 Perl 6 是一个已写入的寄存器, 仍在等待读取。</description>
    </item>
    
    <item>
      <title>散列的散列</title>
      <link>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</link>
      <pubDate>Thu, 05 Jul 2018 00:29:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</guid>
      <description>如何在 Perl 6 中声明散列的数字散列？ 默认情况下，散列将所有键转换为字符串。当你的键是可能接近的数字时，会导致问题：
&amp;gt; my %h; %h{1/3} = 1; %h{0.333333} = 2; dd %h; Hash %h = {&amp;quot;0.333333&amp;quot; =&amp;gt; 2}  当然，这可以修复如下：
&amp;gt; my %h{Real}; %h{1/3} = 1; %h{0.333333} = 2; dd %h; Hash[Any,Real] %h = (my Any %{Real} = 0.333333 =&amp;gt; 2, &amp;lt;1/3&amp;gt; =&amp;gt; 1)  但现在我需要散列的数字散列时，例如 { 1/3 =&amp;gt; { 2/3 =&amp;gt; 1, 0.666667 =&amp;gt; 2 } }。
&amp;gt; my %h{Real}; %h{1/3}{2/3} = 1; %h{1/3}{0.666667} = 2; dd %h; Hash[Any,Real] %h = (my Any %{Real} = &amp;lt;1/3&amp;gt; =&amp;gt; ${&amp;quot;0.</description>
    </item>
    
    <item>
      <title>Perl 6 Colon Pair</title>
      <link>https://ohmysummer.github.io/post/2018-06-19-perl-6-colon-pair/</link>
      <pubDate>Tue, 19 Jun 2018 19:38:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-06-19-perl-6-colon-pair/</guid>
      <description>原文
如果我选择 Perl 6 编程语言中最普遍的构造，那肯定是 colonpair。哈希构造函数，命名参数和参数，副词和正则表达式修饰符 - 都涉及到 colonpair。毫不奇怪，在这样广阔的空间里，构建 colonpair 时会有很多捷径。
今天，我们将了解所有这些！这样做会让我们看到最简单的以及一些更高级的语言结构，所以如果本文的某些部分让你头脑发热，不要担心 - 你不必一次就知道所有的东西！
第一部分: 创建 Colonwhaaaa? Colonpair 的名字（通常）来自于 Pair 对象构造函数，并且（通常）里面有一个冒号。以下是一些 colonpairs 的例子：
:foo, :$bar, :meow&amp;lt;moo&amp;gt;, heh =&amp;gt; hah  最后一个没有冒号，但由于它和其他 colonpairs 基本上是一样的，我个人认为它也是一个 colonpair。
我们可以通过查看它们的 0 来看到这些 colonpairs 构成 Pair 对象：
say :foo.^name; # OUTPUT: «Pair␤»  但是，在参数列表中使用时，这些 colonpairs 被特殊处理了以表示命名参数。我们将在后面的文章中介绍这一部分。
简写 这里有一个完整的可用的 colonpair 列表，你可以在深入之前浏览一下。我知道，它看起来像一个巨大的列表，但这就是我们阅读这篇文章的原因 - 要了解构成这些排列的一般模式。
# 标准的, take-any-type, 非便捷形式 :nd(2).say; # OUTPUT: «nd =&amp;gt; 2␤» :foo(&#39;foo&#39;, &#39;bar&#39;).say; # OUTPUT: «foo =&amp;gt; (foo bar)␤» :foo( %(:42a, :foo&amp;lt;a b c&amp;gt;) ).</description>
    </item>
    
    <item>
      <title>Perl 6 中的并发</title>
      <link>https://ohmysummer.github.io/post/2016-10-03-perl6%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 03 Oct 2016 20:43:15 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-03-perl6%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description>Concurrency
与大多数现代编程语言一样，Perl 6 被设计为支持并发（允许多个事件同时发生）和异步编程（有时称为事件驱动或反应式编程 - 即程序某些部分的事件或变化可能会导致程序流异步地改变程序的其它部分）。
Perl 的并发设计的目的是提供一个高层级的，可组合的，一致的接口，而不管如下所述的虚拟机通过工具层怎样为特定操作的系统来实现它。
此外，某些 Perl 的特性可以隐式地以异步的方式操作，所以为了确保这些特性可预测的互通，用户代码应在可能情况下，避免较低层级的并发的 API（即线程和调度器），并使用高层级接口。
High-level APIs Promises Promise（在其他编程环境中也被称为 *future*）封装了在获得 promise 时可能尚未完成或甚至未开始的计算结果。Promise 从 Planned 状态开始, 结果要么是 Kept 状态, 这意味着该 promise 已成功完成, 要么是 Broken 状态, 意味着该 promise 已失败。 通常这就是用户代码需要以并行或异步方式操作的使用最多的功能。
my $p1 = Promise.new; say $p1.status; # OUTPUT: «Planned␤» $p1.keep(&#39;Result&#39;); say $p1.status; # OUTPUT: «Kept␤» say $p1.result; # OUTPUT: «Result␤» # (since it has been kept, a result is available!) my $p2 = Promise.new; $p2.</description>
    </item>
    
  </channel>
</rss>