<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Perl6 on Young For Perl 6</title>
    <link>https://ohmysummer.github.io/categories/perl6/</link>
    <description>Recent content in Perl6 on Young For Perl 6</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 06 Jul 2018 21:14:56 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/categories/perl6/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proc Async</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-proc-async/</link>
      <pubDate>Fri, 06 Jul 2018 21:14:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-proc-async/</guid>
      <description>class Proc::Async {}  注意: 目前只有 Rakudo 的 MoarVM 后端实现了 [Proc::Async](https://docs.perl6.org/type/Proc::Async)。
Proc::Async 允许你异步地运行外部命令, 捕获标准输出和错误句柄，并可选择地写入到它的标准输入中。
my $file = &#39;foo&#39;.IO; spurt $file, &amp;quot;and\nCamelia\n♡\nme\n&amp;quot;; my $proc = Proc::Async.new: :w, &#39;tac&#39;, &#39;--&#39;, $file, &#39;-&#39;; # my $proc = Proc::Async.new: :w, &#39;sleep&#39;, 15; # uncomment to try timeouts react { whenever $proc.stdout.lines { # split input on \r\n, \n, and \r say &#39;lines: &#39;, $_ } whenever $proc.stderr { say &#39;stderr: &#39;, $_ } whenever $proc.</description>
    </item>
    
    <item>
      <title>我为什么学习Perl6</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0perl6/</link>
      <pubDate>Fri, 06 Jul 2018 00:27:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0perl6/</guid>
      <description>http://www.evanmiller.org/why-im-learning-perl-6.html</description>
    </item>
    
    <item>
      <title>Perl6概览</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-perl6%E6%A6%82%E8%A7%88/</link>
      <pubDate>Fri, 06 Jul 2018 00:23:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-perl6%E6%A6%82%E8%A7%88/</guid>
      <description>http://www.evanmiller.org/a-review-of-perl-6.html
Perl 6 让我想起了我叔叔的博士学位论文。在前五年，我们会问（圣诞节前）他什么时候完成;随着岁月的流逝，他的答案越来越少，并且缺乏任何形式的论文确实存在的任何证据，我们使完成日期成为一种流行的笑话，波士顿Big Dig或纽约的家庭版本第二大道地铁线。但是，经过足够的自我强加的最后期限后，我们就开始开玩笑了。经过足够多年，我们不再问了。
如果你错过了，我认为每个人都做到了，Perl 6在一年半前 - 在2015年的圣诞节 - 顺便发布 - 在名义上跨越近16年的努力之后被释放到世界各地。 （我想，但我不确定，我的叔叔的论文也在某个时候完成了。）我在2017年写这篇文章的新编程语言市场虽然具有竞争力，但并不是难以理解的 - 但就像一位新生的博士，似乎没有人确定Perl 6的市场前景，就像一篇刚刚开始的论文，似乎没有人知道多年劳动的成果是否真的值得一试。
除了你想要的任何简单答案之外，Perl 6的提供者几乎没有提供关于你应该用语言做什么的一些提示。 Perl 6是多范式的，也许是全范式的;它声称支持面向对象的编程，函数式编程，面向方面的编程，数组编程和（旧的）过程式编程。这是一种新语言，而不仅仅是Perl 5的清理版本，只不过英语是德语减去变音符号。了解以前的版本，唉，不会让你走得太远。出于同样的原因，对前面化身的偏见并不一定适用于今天的水。
接下来是我试图向世界提供一个对编程世界中最白的大象Perl 6的一个诚实的，如果不完整的评估。我受到以下思想的激励：每个系统管理员至少知道一点Perl，但我不认识任何人我知道任何Perl 6，也不认识任何知道Perl 6的人。我从来没有读过任何关于Perl 6的信息。我同样可以想象一个Perl 6是一堆垃圾的世界，还有一个语言设计的Hope Diamond。似乎没有人知道;没有人会知道。 Perl 6是一个已写入的寄存器，仍在等待读取。
经过多年的错误开始（由我），我终于设法花了足够的时间用语言自信地说我熟悉它。我已经阅读了大量的博客文章，吞噬了文档，并编写了一个小型（500行）Perl 6库，其中包含粗略的测试覆盖率。我仍然不知道使用Perl 6一年，甚至是一个适当的工作周是什么样的，所以这篇评论将不再是一个明确的推荐，更像是那些妈妈尝试的Linux反应视频之一。我很可能错过了一些东西。
Perl 6 缺乏强大的“钩子”，而且它也有点慢。因此，通过举行啤酒示范来激发读者的兴趣是困难的，但并非不可能。 （如果你喜欢，请参阅为什么我要学习Perl 6.）相反，我将从小例子开始。</description>
    </item>
    
    <item>
      <title>散列的散列</title>
      <link>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</link>
      <pubDate>Thu, 05 Jul 2018 00:29:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</guid>
      <description>如何在 Perl 6 中声明散列的数字散列？ 默认情况下，散列将所有键转换为字符串。当你的键是可能接近的数字时，会导致问题：
&amp;gt; my %h; %h{1/3} = 1; %h{0.333333} = 2; dd %h; Hash %h = {&amp;quot;0.333333&amp;quot; =&amp;gt; 2}  当然，这可以修复如下：
&amp;gt; my %h{Real}; %h{1/3} = 1; %h{0.333333} = 2; dd %h; Hash[Any,Real] %h = (my Any %{Real} = 0.333333 =&amp;gt; 2, &amp;lt;1/3&amp;gt; =&amp;gt; 1)  但现在我需要散列的数字散列时，例如 { 1/3 =&amp;gt; { 2/3 =&amp;gt; 1, 0.666667 =&amp;gt; 2 } }。
&amp;gt; my %h{Real}; %h{1/3}{2/3} = 1; %h{1/3}{0.666667} = 2; dd %h; Hash[Any,Real] %h = (my Any %{Real} = &amp;lt;1/3&amp;gt; =&amp;gt; ${&amp;quot;0.</description>
    </item>
    
    <item>
      <title>Perl 6 Colon Pair</title>
      <link>https://ohmysummer.github.io/post/2018-06-19-perl-6-colon-pair/</link>
      <pubDate>Tue, 19 Jun 2018 19:38:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-06-19-perl-6-colon-pair/</guid>
      <description>原文
如果我选择 Perl 6 编程语言中最普遍的构造，那肯定是 colonpair。哈希构造函数，命名参数和参数，副词和正则表达式修饰符 - 都涉及到 colonpair。毫不奇怪，在这样广阔的空间里，构建 colonpair 时会有很多捷径。
今天，我们将了解所有这些！这样做会让我们看到最简单的以及一些更高级的语言结构，所以如果本文的某些部分让你头脑发热，不要担心 - 你不必一次就知道所有的东西！
第一部分: 创建 Colonwhaaaa? Colonpair 的名字（通常）来自于 Pair 对象构造函数，并且（通常）里面有一个冒号。以下是一些 colonpairs 的例子：
:foo, :$bar, :meow&amp;lt;moo&amp;gt;, heh =&amp;gt; hah  最后一个没有冒号，但由于它和其他 colonpairs 基本上是一样的，我个人认为它也是一个 colonpair。
我们可以通过查看它们的 0 来看到这些 colonpairs 构成 Pair 对象：
say :foo.^name; # OUTPUT: «Pair␤»  但是，在参数列表中使用时，这些 colonpairs 被特殊处理了以表示命名参数。我们将在后面的文章中介绍这一部分。
简写 这里有一个完整的可用的 colonpair 列表，你可以在深入之前浏览一下。我知道，它看起来像一个巨大的列表，但这就是我们阅读这篇文章的原因 - 要了解构成这些排列的一般模式。
# 标准的, take-any-type, 非便捷形式 :nd(2).say; # OUTPUT: «nd =&amp;gt; 2␤» :foo(&#39;foo&#39;, &#39;bar&#39;).say; # OUTPUT: «foo =&amp;gt; (foo bar)␤» :foo( %(:42a, :foo&amp;lt;a b c&amp;gt;) ).</description>
    </item>
    
    <item>
      <title>Perl 6 中的并发</title>
      <link>https://ohmysummer.github.io/post/2016-10-03-perl6%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 03 Oct 2016 20:43:15 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-03-perl6%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description>Concurrency
与大多数现代编程语言一样，Perl 6 被设计为支持并发（允许多个事件同时发生）和异步编程（有时称为事件驱动或反应式编程 - 即程序某些部分的事件或变化可能会导致程序流异步地改变程序的其它部分）。
Perl 的并发设计的目的是提供一个高层级的，可组合的，一致的接口，而不管如下所述的虚拟机通过工具层怎样为特定操作的系统来实现它。
此外，某些 Perl 的特性可以隐式地以异步的方式操作，所以为了确保这些特性可预测的互通，用户代码应在可能情况下，避免较低层级的并发的 API（即线程和调度器），并使用高层级接口。
High-level APIs Promises Promise（在其他编程环境中也被称为 *future*）封装了在获得 promise 时可能尚未完成或甚至未开始的计算结果。Promise 从 Planned 状态开始, 结果要么是 Kept 状态, 这意味着该 promise 已成功完成, 要么是 Broken 状态, 意味着该 promise 已失败。 通常这就是用户代码需要以并行或异步方式操作的使用最多的功能。
my $p1 = Promise.new; say $p1.status; # OUTPUT: «Planned␤» $p1.keep(&#39;Result&#39;); say $p1.status; # OUTPUT: «Kept␤» say $p1.result; # OUTPUT: «Result␤» # (since it has been kept, a result is available!) my $p2 = Promise.new; $p2.</description>
    </item>
    
  </channel>
</rss>