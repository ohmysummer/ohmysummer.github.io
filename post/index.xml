<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Raku Programming</title>
    <link>https://ohmysummer.github.io/post/</link>
    <description>Recent content in Posts on Raku Programming</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 27 Oct 2020 22:28:41 +0800</lastBuildDate>
    
	<atom:link href="https://ohmysummer.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>剖析一个 Raku 片段</title>
      <link>https://ohmysummer.github.io/post/2020-10-27-dissecting-a-raku-snippet/</link>
      <pubDate>Tue, 27 Oct 2020 22:28:41 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-10-27-dissecting-a-raku-snippet/</guid>
      <description>几天前，我在为一个问题的解决方案做原型时，写了一段代码，给我带来了巨大的喜悦。那是一种让你每次看到它运行时都会傻笑的代码，只因为这个解决方案看起来是多么的聪明和优雅，也因为证明了，与你的期望相反，它确实是可行的，而感到兴奋。</description>
    </item>
    
    <item>
      <title>列表断链</title>
      <link>https://ohmysummer.github.io/post/2020-09-25-list-breaks-the-chain/</link>
      <pubDate>Tue, 27 Oct 2020 21:48:29 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-09-25-list-breaks-the-chain/</guid>
      <description>在看 RaycatWhoDat 喜欢 Raku 的时候，我才发现，List of Matches 不是 MatchList。</description>
    </item>
    
    <item>
      <title>鬼鬼祟祟的参数</title>
      <link>https://ohmysummer.github.io/post/2020-10-10-sneaky-arguments/</link>
      <pubDate>Tue, 27 Oct 2020 21:22:31 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-10-10-sneaky-arguments/</guid>
      <description>在玩 .</description>
    </item>
    
    <item>
      <title>计划淘汰</title>
      <link>https://ohmysummer.github.io/post/2020-10-27-planned-obsolescence/</link>
      <pubDate>Tue, 27 Oct 2020 21:02:20 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-10-27-planned-obsolescence/</guid>
      <description>12年前¹，拉里策划了我的一个模块的报废。他的狡猾计划在两周前被 lizmat 执行了。如果你是从源码开始构建 Rakudo，你现在可以走另一条捷径。</description>
    </item>
    
    <item>
      <title>Raku 中的实例属性</title>
      <link>https://ohmysummer.github.io/post/2020-08-26-instance-attributes-in-raku/</link>
      <pubDate>Wed, 26 Aug 2020 22:45:42 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-26-instance-attributes-in-raku/</guid>
      <description>Raku 中的实例属性 在 Raku 中, 默认情况下, 一个对象的方法是完全可以访问的, 但它的数据（作为属性）不能在类外直接访问, 除非明确指定。为了从外部读取、写入或两者都能访问数据, 你必须以某种方式将其公开。你允许对一个对象的数据进行何种级别的访问, 主要取决于你声明它的属性的方式。</description>
    </item>
    
    <item>
      <title>要作为子程序调用还是作为方法调用</title>
      <link>https://ohmysummer.github.io/post/2020-08-26-to-be-called-as-a-sub-or-method/</link>
      <pubDate>Wed, 26 Aug 2020 22:42:51 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-26-to-be-called-as-a-sub-or-method/</guid>
      <description>要作为子程序调用还是作为方法调用？这就是问题所在 在 Raku 中，具有自己的词法范围和返回处理的代码对象的总称是例程。虽然不是所有的例程都是子程序和/或方法，但所有的子程序和/或方法都是例程。一个例程既可以是子程序，也可以是方法，在这种情况下，你可以分别使用子程序调用语法和方法调用语法来调用它。例如</description>
    </item>
    
    <item>
      <title>Containers in Raku</title>
      <link>https://ohmysummer.github.io/post/2020-08-26-containers-in-raku/</link>
      <pubDate>Wed, 26 Aug 2020 21:49:02 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-26-containers-in-raku/</guid>
      <description>Containers in Raku 在编程语言中，变量是将一个特定的值与编译器已知的名称关联起来的一种方式。例如，以变量声明及其赋值为例，my $x = &amp;quot;Hello&amp;quot;。这就把值 42 和名字 $x 联系起来了，虽然这对大多数意图和目的来说是正确的，但在 Raku 中这并不是整个故事。</description>
    </item>
    
    <item>
      <title>tailgrep</title>
      <link>https://ohmysummer.github.io/post/2020-08-25-tailgrep/</link>
      <pubDate>Wed, 26 Aug 2020 10:02:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-25-tailgrep/</guid>
      <description>tailgrep 跟随一个文件, 过滤行, 观察 spinner.</description>
    </item>
    
    <item>
      <title>一个更好的终端自动装置</title>
      <link>https://ohmysummer.github.io/post/2020-08-25-a-bettter-terminal-automator/</link>
      <pubDate>Tue, 25 Aug 2020 23:57:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-25-a-bettter-terminal-automator/</guid>
      <description>A Better Terminal Automator 不久前，我有了一个改善终端体验的想法&amp;ndash;在这里有描述&amp;ndash;这个想法是这样的:</description>
    </item>
    
    <item>
      <title>Defined or Dynvar</title>
      <link>https://ohmysummer.github.io/post/2020-08-17-defined-or-dynvar/</link>
      <pubDate>Mon, 17 Aug 2020 21:41:41 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-17-defined-or-dynvar/</guid>
      <description>在为 Shell::Piping 添加 dynvars 以减少手指受伤的风险时，我犯了一个错，lizmat 好心地纠正了这个错误。她建议使用 defined-or 操作符来测试一个给定的动态变量是否被声明。</description>
    </item>
    
    <item>
      <title>Guarding Dynamics</title>
      <link>https://ohmysummer.github.io/post/2020-08-17-guarding-dynamics/</link>
      <pubDate>Mon, 17 Aug 2020 21:35:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-17-guarding-dynamics/</guid>
      <description>动态变量是一种很好的方式，它可以获得全局变量的好处，但又不存在缺点。它们在调用树上传递信息，而不强制调用者进行声明。然而，动态变量与异常共享一个负担。被调用者知道如何做调用者可能想不到的事情。</description>
    </item>
    
    <item>
      <title>Whereceptions</title>
      <link>https://ohmysummer.github.io/post/2020-08-17-whereceptions/</link>
      <pubDate>Mon, 17 Aug 2020 21:23:44 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-17-whereceptions/</guid>
      <description>我有一个 sub，它接收一个文件，并试图防范自己遇到不存在的文件。where 子句没有做好错误信息。</description>
    </item>
    
    <item>
      <title>Dropin Replacement</title>
      <link>https://ohmysummer.github.io/post/2020-08-01-dropin-replacement/</link>
      <pubDate>Sun, 02 Aug 2020 20:02:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-01-dropin-replacement/</guid>
      <description>今天我知道了 whereis 可以接收多个命令在 $PATH 中查找。</description>
    </item>
    
    <item>
      <title>包裹异常</title>
      <link>https://ohmysummer.github.io/post/2020-08-01-wrapping-exceptions/</link>
      <pubDate>Sun, 02 Aug 2020 19:55:39 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-08-01-wrapping-exceptions/</guid>
      <description>如前所述，我希望减少 Shell::Piping 中简单的错误处理。下面的内容太长了，不适合放在终端的单行中。</description>
    </item>
    
    <item>
      <title>并发的狗粮</title>
      <link>https://ohmysummer.github.io/post/2020-07-31-concurrent-dogfood/</link>
      <pubDate>Sun, 02 Aug 2020 19:44:55 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-31-concurrent-dogfood/</guid>
      <description>我在 Raku 项目中使用 zef --verbose test .</description>
    </item>
    
    <item>
      <title>狗粮时间</title>
      <link>https://ohmysummer.github.io/post/2020-07-31-dogfood-time/</link>
      <pubDate>Sun, 02 Aug 2020 19:39:37 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-31-dogfood-time/</guid>
      <description>Shell::Piping 现在已经拥有了我列表中的所有功能。所以是时候使用它了。我还需要以 README.</description>
    </item>
    
    <item>
      <title>带退出码的增强</title>
      <link>https://ohmysummer.github.io/post/2020-07-29-augmenting-with-exitcode/</link>
      <pubDate>Sun, 02 Aug 2020 19:23:37 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-29-augmenting-with-exitcode/</guid>
      <description>在我的上一篇文章中，我找到了一个很好的方法来匹配 exitcode。我想把它扩展到与 STDERR 匹配，如果 exitcode 是非零。我已经有了一种方法来捕获一个管道的所有错误流。</description>
    </item>
    
    <item>
      <title>处理异常</title>
      <link>https://ohmysummer.github.io/post/2020-07-27-handling-failure/</link>
      <pubDate>Sun, 02 Aug 2020 19:15:43 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-27-handling-failure/</guid>
      <description>经过一番反反复复，我找到了一个实用的方法来处理 Shell::Piping 中的错误条件。这个实用的方法是有多个方法。一个进程确实有一个 exitinteger(称为代码，因为它可能很神秘)和文本输出到 STDERR 来表示出了问题。有时我们需要粗心的错误处理，有时我们需要研究文本输出并对其做出反应。</description>
    </item>
    
    <item>
      <title>模仿引号</title>
      <link>https://ohmysummer.github.io/post/2020-07-24-mimicing-quotes/</link>
      <pubDate>Sun, 02 Aug 2020 19:01:20 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-24-mimicing-quotes/</guid>
      <description>我对缩短代码的追求进展顺利。有一件事还是挺啰嗦的，那就是对象创建。为了让管道充满生命，我们需要 Proc::Async 的实例。</description>
    </item>
    
    <item>
      <title>摆脱模板</title>
      <link>https://ohmysummer.github.io/post/2020-07-18-deboilerplating/</link>
      <pubDate>Sun, 19 Jul 2020 06:11:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-18-deboilerplating/</guid>
      <description>我同意 Damian 的观点，link:https://youtu.</description>
    </item>
    
    <item>
      <title>无论何时何地</title>
      <link>https://ohmysummer.github.io/post/2019-05-31-whatever-whenever-does/</link>
      <pubDate>Tue, 07 Jul 2020 10:09:19 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-05-31-whatever-whenever-does/</guid>
      <description>Jnthn 回答了为什么 $*IN.</description>
    </item>
    
    <item>
      <title>显示缺席</title>
      <link>https://ohmysummer.github.io/post/2020-07-06-indicating-absence/</link>
      <pubDate>Tue, 07 Jul 2020 09:35:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-06-indicating-absence/</guid>
      <description>我不能在 Stackoverflow 上自作聪明，因为我和他们使用的许可证不兼容。但这并不能阻止我阅读 uzlxxxx 提出的问题。在他最后的知识收获中，他试图用 Nil 来表示链接列表末尾没有值。Nil 是这个博客的老朋友了，我花了很长时间才喜欢上它。</description>
    </item>
    
    <item>
      <title>非递归</title>
      <link>https://ohmysummer.github.io/post/2020-07-06-unrecursing/</link>
      <pubDate>Mon, 06 Jul 2020 19:40:45 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-06-unrecursing/</guid>
      <description>Moritz 不满意 Raku 给他的权力，让他与名单搏斗。他说的没错。如果简单的事情很容易，就不需要摔跤了。这让我想到了我在上一篇博文中构建的数据结构。它是一个列表和一个 Proc::Async 的对。</description>
    </item>
    
    <item>
      <title>Wat Freeness</title>
      <link>https://ohmysummer.github.io/post/2020-06-22-wat-freeness/</link>
      <pubDate>Mon, 06 Jul 2020 18:59:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-22-wat-freeness/</guid>
      <description>遗憾的是，我不能参加云端会议，因为我把翅膀借给了一个天使，而那个吸盘没有把翅膀带回来。但没有什么&amp;ndash;哪怕是瘟疫&amp;ndash;可以阻止我写一篇博文。</description>
    </item>
    
    <item>
      <title>感觉像一个 bug</title>
      <link>https://ohmysummer.github.io/post/2020-06-20-it-felt-like-a-bug/</link>
      <pubDate>Mon, 06 Jul 2020 18:51:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-20-it-felt-like-a-bug/</guid>
      <description>IO::Path 提供了不少关于文件的信息。缺少的是它的真实类型。文件的结尾是有欺骗性的。在文件的操作系统上，我们可以得到一个清晰的图像。Shelling 用 file -b -i 获取 mimetype 有点慢，所以我试着在文件名列表上添加一个 .</description>
    </item>
    
    <item>
      <title>监控新访客</title>
      <link>https://ohmysummer.github.io/post/2020-05-26-watching-new-arrivals/</link>
      <pubDate>Mon, 06 Jul 2020 17:29:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-26-watching-new-arrivals/</guid>
      <description>任何枯燥的重复性工作都必须尽可能地简单，否则就会被忽视。我很确定这就是我们发明电脑的原因。备份是挺无聊的。事实上，当涉及到备份时，你要避免任何形式的刺激。所以它们必须尽可能的简单。我有一个脚本，当一个新设备被添加时，由 udev 规则触发。当插入一个磁盘时，这个脚本工作得很好。(这很好用。)我有一个 USB 集线器，里面有几个U盘，形成了一个 btrfs raid5，每当我打开U盘集线器的时候，就可以对我的 $home 进行快速备份。在某些情况下，这并不能正常工作。找一个 bash 脚本来检查是否有一个硬盘丢失了，这可不好玩。主要是因为只有合适的语言才会有 Set。我们确实有一种合适的语言。</description>
    </item>
    
    <item>
      <title>Spinning Up Sort</title>
      <link>https://ohmysummer.github.io/post/2020-07-06-spinning-up-sort/</link>
      <pubDate>Mon, 06 Jul 2020 09:23:16 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-06-spinning-up-sort/</guid>
      <description>我的 Linux 盒子正在从 mp4 转码 到 av1 像一个老板。我想，缩小空间的霸主减半是便宜，然后一倍的磁盘空间。用20.</description>
    </item>
    
    <item>
      <title>管道变得简单</title>
      <link>https://ohmysummer.github.io/post/2020-07-04-piping-made-easy/</link>
      <pubDate>Sat, 04 Jul 2020 19:32:53 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-04-piping-made-easy/</guid>
      <description>哈梅林的魔笛手是有史以来最强大的超级英雄之一。他可以通过在烟斗上吹奏一首曲子来带领一大群孩子离开。大多数父母都很难带领一个孩子离开电视。我很确定这就是为什么在 *nix 上被称为烟斗的原因。这也意味着，超级英雄电影只是童话故事。</description>
    </item>
    
    <item>
      <title>REPL</title>
      <link>https://ohmysummer.github.io/post/2020-07-01-repl/</link>
      <pubDate>Wed, 01 Jul 2020 10:19:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-07-01-repl/</guid>
      <description>Raku 中的 REPL 现在有一些令人迷惑的行为, 和直接使用 raku filename.</description>
    </item>
    
    <item>
      <title>数列</title>
      <link>https://ohmysummer.github.io/post/2020-06-30-sequence/</link>
      <pubDate>Tue, 30 Jun 2020 13:33:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-30-sequence/</guid>
      <description>斐波那契数列(Fibonacci sequence) lazy my \sequence = 1, 1, {$^a + $^b } .</description>
    </item>
    
    <item>
      <title>我们可以做得更多</title>
      <link>https://ohmysummer.github.io/post/2020-06-26-we-can-do-more/</link>
      <pubDate>Fri, 26 Jun 2020 19:25:49 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-26-we-can-do-more/</guid>
      <description>DataKinds 继续着他对 Python 之道的教育翻译，以蝴蝶的方式。他的追求是展示如何在 Raku 中做一些在 Python 中完成的事情。一如既往，TIMTOWTDI 适用。</description>
    </item>
    
    <item>
      <title>Raku 谜语</title>
      <link>https://ohmysummer.github.io/post/2020-06-24-a-raku-riddle/</link>
      <pubDate>Wed, 24 Jun 2020 19:20:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-24-a-raku-riddle/</guid>
      <description>在思考 DataKinds 博文的时候，我想到了一个最奇特的谜语。它的内容如下。</description>
    </item>
    
    <item>
      <title>成群的异常</title>
      <link>https://ohmysummer.github.io/post/2020-06-14-swarms-of-exceptions/</link>
      <pubDate>Sun, 14 Jun 2020 18:41:31 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-14-swarms-of-exceptions/</guid>
      <description>在拉里看来，懒惰是一种美德。让我们看看 Rakudo 是否同意。</description>
    </item>
    
    <item>
      <title>主题就是主题</title>
      <link>https://ohmysummer.github.io/post/2020-06-12-the-topic-is-the-topic/</link>
      <pubDate>Fri, 12 Jun 2020 18:15:49 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-12-the-topic-is-the-topic/</guid>
      <description>我在上一篇文章中感叹，我们缺少初学者的资料。我给出的理由是，写这种指南很难。这就有一个问题，为什么会那么难。在堵住文档的漏洞时，我发现很多地方都出现了很多语言的特点。Raku 和自己是交织在一起的。对于初学者来说，你会希望从一些简单的东西开始，然后在此基础上建立，直到你达到最大的复杂性。有什么能比谦逊的 if 语句更简单呢？事实上，有很多。原因是主题。这将是这篇文章的主题。</description>
    </item>
    
    <item>
      <title>替换的相似性</title>
      <link>https://ohmysummer.github.io/post/2020-06-08-replacement-similarities/</link>
      <pubDate>Mon, 08 Jun 2020 18:06:04 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-08-replacement-similarities/</guid>
      <description>我在上一篇文章中说，我博客的文章点击率比去年上升了20%。我查的原因显然是虚荣心作祟。那天我查的原因是一篇关于 Rust 越来越受欢迎的文章。作为一种精神上的练习，我把那些抛弃他们所使用的语言的程序员所给出的不同理由变成了一个检查清单。</description>
    </item>
    
    <item>
      <title>掉入错误的兔子洞</title>
      <link>https://ohmysummer.github.io/post/2020-06-06-down-the-error-rabbit-hole/</link>
      <pubDate>Sat, 06 Jun 2020 17:29:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-06-06-down-the-error-rabbit-hole/</guid>
      <description>好的错误信息是有用的，因为它们告诉我们，当出错时，我们不必检查什么。(见：LTA)我通过尝试用 Raku 替换 Bash 得出了这个结论。让我们来看看一些无辜的代码。</description>
    </item>
    
    <item>
      <title>沉默不语</title>
      <link>https://ohmysummer.github.io/post/2020-05-27-ungolden-silence/</link>
      <pubDate>Wed, 27 May 2020 17:29:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-27-ungolden-silence/</guid>
      <description>在我寻求用 Raku 替换 Bash 的过程中，我尝试使用 qx，但失败了。对我来说，它没有工作，因为 qx 失败的方式是错误的。在底层，Rakudo 通过一些语法魔法来实现它，在 core.</description>
    </item>
    
    <item>
      <title>归还正确的数量</title>
      <link>https://ohmysummer.github.io/post/2020-05-25-returning-the-right-amount/</link>
      <pubDate>Mon, 25 May 2020 17:19:51 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-25-returning-the-right-amount/</guid>
      <description>你知道当你带着买错的东西回来时，你的另一半的表情吗？告诉你吧，我们会为此写一个脚本！</description>
    </item>
    
    <item>
      <title>神秘的中缀运算符</title>
      <link>https://ohmysummer.github.io/post/2020-05-24-the-mysterious-infix/</link>
      <pubDate>Sun, 24 May 2020 17:06:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-24-the-mysterious-infix/</guid>
      <description>瓦迪姆-贝尔曼告诉我们，他开始了一个在控制台中编写图形用户界面(GUI)应用程序的模块。这让我一下子回到了九十年代。看着示例代码，我又有了下一次的回想。如果你需要一个按钮，你需要子类。事实上，如果你需要任何东西，你都需要子类。在一个有词法作用域的动态语言中，这可能真的有用。</description>
    </item>
    
    <item>
      <title>自动切割日志</title>
      <link>https://ohmysummer.github.io/post/2020-05-14-autorotating-logs/</link>
      <pubDate>Thu, 14 May 2020 16:48:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2020-05-14-autorotating-logs/</guid>
      <description>当我把我的备份脚本从 bash 翻译到 Raku 的时候，我偷看了一下 /var/log/，震惊地发现有 650MB 的东西我从来没有看过。不出所料，/var/log/journal 是最大的犯罪者。遗憾的是，我必须说 systemd 一贯不太好用。2008 年我就出过糗。我之所以还在继续用它完全是因为 Debian 系统。尽管它没有 xrdp.</description>
    </item>
    
    <item>
      <title>Nil Shall Warn or Fail but Not Both</title>
      <link>https://ohmysummer.github.io/post/2019-05-14-nil-shall-warn-or-fail-but-not-both/</link>
      <pubDate>Thu, 14 May 2020 10:45:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-05-14-nil-shall-warn-or-fail-but-not-both/</guid>
      <description>正如之前宣布的那样，我去写了一个模块，让 Nil.</description>
    </item>
    
    <item>
      <title>Parse with Raku Regexes and Grammars</title>
      <link>https://ohmysummer.github.io/post/2019-07-31-parse-with-raku-regexes-and-grammars/</link>
      <pubDate>Wed, 31 Jul 2019 20:22:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-07-31-parse-with-raku-regexes-and-grammars/</guid>
      <description>启动翻译。</description>
    </item>
    
    <item>
      <title>Encode-Decode</title>
      <link>https://ohmysummer.github.io/post/2019-07-16-encode-decode/</link>
      <pubDate>Tue, 16 Jul 2019 18:56:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-07-16-encode-decode/</guid>
      <description>http://blogs.perl.org/users/damian_conway/2019/07/vigenere-vs-vigenere.html</description>
    </item>
    
    <item>
      <title>追踪缺失的东西</title>
      <link>https://ohmysummer.github.io/post/2019-07-07-tracing-whats-missing/</link>
      <pubDate>Sun, 07 Jul 2019 10:05:30 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-07-07-tracing-whats-missing/</guid>
      <description>我有一个如下形式的日志文件，我想分析一下。</description>
    </item>
    
    <item>
      <title>Raku 中的 奇偶排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-29-odd-even-sort-in-raku/</link>
      <pubDate>Sat, 29 Jun 2019 19:37:39 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-29-odd-even-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的煎饼排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-27-pancake-sort-in-raku/</link>
      <pubDate>Sat, 29 Jun 2019 19:36:02 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-27-pancake-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的 Gnome sort</title>
      <link>https://ohmysummer.github.io/post/2019-06-28-gnome-sort-in-raku/</link>
      <pubDate>Fri, 28 Jun 2019 19:37:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-28-gnome-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的 Stooge Sort</title>
      <link>https://ohmysummer.github.io/post/2019-06-26-stooge-sort-in-raku/</link>
      <pubDate>Wed, 26 Jun 2019 19:35:43 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-26-stooge-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的合并排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-25-merge-sort-in-raku/</link>
      <pubDate>Tue, 25 Jun 2019 19:35:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-25-merge-sort-in-raku/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Raku 中的插入排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-24-insertion-sort-in-raku/</link>
      <pubDate>Mon, 24 Jun 2019 19:19:06 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-24-insertion-sort-in-raku/</guid>
      <description>今天，我们研究插入排序算法及其在 Raku 中的可能实现。算法的复杂性是 O(n2)，但它是练习 Raku 的一个很好的选择。</description>
    </item>
    
    <item>
      <title>Raku 中的快速排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-23-quick-sort-in-raku/</link>
      <pubDate>Sun, 23 Jun 2019 19:16:15 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-23-quick-sort-in-raku/</guid>
      <description>今天，我们来看看另一个，也许是最着名的数据排序方法，快速排序。</description>
    </item>
    
    <item>
      <title>Raku 中的冒泡排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-22-bubble-sort-in-raku/</link>
      <pubDate>Sat, 22 Jun 2019 10:59:47 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-22-bubble-sort-in-raku/</guid>
      <description>嘿大家好，让我们在 Raku 中实现一些算法。</description>
    </item>
    
    <item>
      <title>Raku 中的选择排序</title>
      <link>https://ohmysummer.github.io/post/2019-06-21-selection-sort-in-raku/</link>
      <pubDate>Fri, 21 Jun 2019 16:26:46 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-21-selection-sort-in-raku/</guid>
      <description>sub find-smallest(@arr) { my $smallest = @arr[0]; my $smallest_index = 0; for @arr.</description>
    </item>
    
    <item>
      <title>Raku 实现二分查找</title>
      <link>https://ohmysummer.github.io/post/2019-06-01-binary-search-in-raku/</link>
      <pubDate>Sat, 01 Jun 2019 14:09:49 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-06-01-binary-search-in-raku/</guid>
      <description>sub binary_search(@list, $item) { my $low = 0; # low 和 high 用于跟踪要在其中查找的列表部分 my $high = @list.</description>
    </item>
    
    <item>
      <title>Monkey See No Nil</title>
      <link>https://ohmysummer.github.io/post/2019-05-04-monkey-see-no-nil/</link>
      <pubDate>Sat, 04 May 2019 10:50:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-05-04-monkey-see-no-nil/</guid>
      <description>在 for 循环中，Nil 变成了一个 List，其中有一个元素恰好是 Any。这让我很不爽，所以我去找原因。结果发现罪魁祸首就是 Nil 的定义是 Cool。为了能够把任何一个值变成一个 List，Cool 实现了方法 list()。它接受一个单一的值，并将这个值变成一个有这一个值的 List。Nil 表示不存在一个值，把它变成一个值是没有意义的。幸运的是我们可以改变这一点。</description>
    </item>
    
    <item>
      <title>Parallel Permutations</title>
      <link>https://ohmysummer.github.io/post/2019-04-27-parallel-permutations/</link>
      <pubDate>Sat, 27 Apr 2019 10:53:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-04-27-parallel-permutations/</guid>
      <description>Jo Christian Oterhals 要求为挑战2提供一个并行的解决方案。我相信他自己也有问题，因为他的代码中有不少 for 循环。通过将这些循环改为方法调用链，我们可以使用 .</description>
    </item>
    
    <item>
      <title>Nil Is a Pessimist</title>
      <link>https://ohmysummer.github.io/post/2019-04-24-nil-is-a-pessimist/</link>
      <pubDate>Wed, 24 Apr 2019 10:56:39 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-04-24-nil-is-a-pessimist/</guid>
      <description>Guifa 对 $xml.</description>
    </item>
    
    <item>
      <title>Wrapping a Scope</title>
      <link>https://ohmysummer.github.io/post/2019-04-21-wrapping-a-scope/</link>
      <pubDate>Sun, 21 Apr 2019 11:00:16 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-04-21-wrapping-a-scope/</guid>
      <description>像 *望远镜 这样复杂的仪器对温度敏感。把它们包在一些舒适的绝缘体中会有帮助。在 Perl 6 中，情况恰恰相反。当我们封装一个 Callable 时，我们需要添加绝缘体来保护在不同作用域中的任何东西。</description>
    </item>
    
    <item>
      <title>Raku Colonoscopy</title>
      <link>https://ohmysummer.github.io/post/2019-03-26-perl6-colonoscopy/</link>
      <pubDate>Tue, 26 Mar 2019 09:33:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-03-26-perl6-colonoscopy/</guid>
      <description>Raku Colonoscopy I promise, this will not hurt.</description>
    </item>
    
    <item>
      <title>I Like Rakudo 100x</title>
      <link>https://ohmysummer.github.io/post/2019-03-25-i-like-rakudo-100x/</link>
      <pubDate>Mon, 25 Mar 2019 11:03:13 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-03-25-i-like-rakudo-100x/</guid>
      <description>我的一个脚本在没有经过我的手修改的情况下停止了工作，并出现了一个非常奇特的错误信息。</description>
    </item>
    
    <item>
      <title>Perl 5 to Raku guide - special variables</title>
      <link>https://ohmysummer.github.io/post/2019-02-24-special-variables/</link>
      <pubDate>Mon, 25 Feb 2019 13:33:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-02-24-special-variables/</guid>
      <description>描述 一个（希望）全面的 Perl 5 特殊变量列表及其 Raku 等价物，并在必要时记录它们之间的变化。</description>
    </item>
    
    <item>
      <title>Python to Raku - nutshell</title>
      <link>https://ohmysummer.github.io/post/2019-02-25-python-to-raku-nutshell/</link>
      <pubDate>Mon, 25 Feb 2019 09:41:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-02-25-python-to-raku-nutshell/</guid>
      <description>此页面试图为来自 Python 背景的人们提供学习 Raku 的方法。我们在 Raku 中讨论了许多 Python 构造和惯用法的等价语法。</description>
    </item>
    
    <item>
      <title>Threading Nqp Through a Channel</title>
      <link>https://ohmysummer.github.io/post/2019-02-03-threading-nqp-through-a-channel/</link>
      <pubDate>Sun, 03 Feb 2019 11:07:23 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-02-03-threading-nqp-through-a-channel/</guid>
      <description>考虑到 nqp 比普通 Perl 6 和线程快，两者结合起来应该会给我们带来不错的速度。在上一篇文章中承诺的使用 Supply 并没有真正的帮助。emit 会阻塞，直到 Supply 的内部队列被清空。如果我们想递归处理文件，文件系统可能会在递归线程被解除阻塞后停滞。如果我们在消费者中对文件系统施加压力，我们最好使用一个能迅速填满文件路径的 Channel。</description>
    </item>
    
    <item>
      <title>nqp Is Faster Then Threads</title>
      <link>https://ohmysummer.github.io/post/2019-02-02-nqp-is-faster-then-threads/</link>
      <pubDate>Sat, 02 Feb 2019 11:10:45 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-02-02-nqp-is-faster-then-threads/</guid>
      <description>在使用了20年的老文件系统和unix命令无法处理奇数文件名之后，我决定用 Perl 6 脚本代替 find /somewhere -type f | xargs -P 10 -n 1 do-stuff。</description>
    </item>
    
    <item>
      <title>a Picky Caller</title>
      <link>https://ohmysummer.github.io/post/2019-01-23-a-picky-caller/</link>
      <pubDate>Wed, 23 Jan 2019 11:16:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-01-23-a-picky-caller/</guid>
      <description>我通过在我的 linux 盒子上设置一个 bcache，把一个快速的sd和一个可观的磁盘结合起来，给自己买了一个矛盾的硬盘。现在我得到了一个硬盘，它的速度非常快，但文件却很小。bcache 通过 sysfs 提供了一些统计数据。要看这些数据，需要读取一些文本文件。一个很适合 slurp 的任务。我最后得到了一堆尖号块，是这样的。</description>
    </item>
    
    <item>
      <title>Iterating Past the Finish</title>
      <link>https://ohmysummer.github.io/post/2019-01-11-iterating-past-the-finish/</link>
      <pubDate>Fri, 11 Jan 2019 11:21:31 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2019-01-11-iterating-past-the-finish/</guid>
      <description>前段时间有人提出如何增强(augment) Any 的问题。事实证明，增强部分是有效的，但新增加的方法并没有传播给内置类型的子类型。可以通过对所有类型对象调用 .</description>
    </item>
    
    <item>
      <title>第二十五天 - 以数之名</title>
      <link>https://ohmysummer.github.io/post/2018-12-25-calling-number-names/</link>
      <pubDate>Tue, 25 Dec 2018 08:55:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-25-calling-number-names/</guid>
      <description>这个学期学期我参加了我的第一个校对课程，题为“数学证明研讨会简介”。在学习了其他数学课程（微积分，矩阵代数等）之后，我觉得我没有那么多的数学基础，到目前为止，我所做的只是纯粹的计算数学，到处撒上了一些证明。回想起来，我发现课程非常有趣，并且学习不同的定理及其证明，主要来自数论，给了我一个新的数学视角。</description>
    </item>
    
    <item>
      <title>第二十四天 - 使用 Raku 进行主题建模</title>
      <link>https://ohmysummer.github.io/post/what-is-advent/</link>
      <pubDate>Mon, 24 Dec 2018 08:09:24 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/what-is-advent/</guid>
      <description>嗨，大家好。</description>
    </item>
    
    <item>
      <title>第二十三天 - Blin，很快就到圣诞节了！</title>
      <link>https://ohmysummer.github.io/post/2018-12-23-blin-it-is-christmas-soon/</link>
      <pubDate>Sun, 23 Dec 2018 09:02:45 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-23-blin-it-is-christmas-soon/</guid>
      <description>两年前我已经在出现一篇 advent 文章里提到过 Bisectable，但自那时以来发生了很多变化，所以我觉得是时候简要介绍一下 bisectable 机器人和它的朋友们了。</description>
    </item>
    
    <item>
      <title>第二十二天 - 测试 Cro HTTP API</title>
      <link>https://ohmysummer.github.io/post/2018-12-22-testing-cro-http-apis/</link>
      <pubDate>Sat, 22 Dec 2018 10:28:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-22-testing-cro-http-apis/</guid>
      <description>测试Cro HTTP API 今年我花了大量的工作时间用于构建一些 Raku 应用程序。经过为 Raku 编译器和运行时开发贡献代码十年之后，最终使用它来提供解决实际问题的生产解决方案感觉很棒。我还不确定在我创建的IDE中编写代码，使用我设计的HTTP库，由我实现大部分的编译器编译，并在我扮演架构师的VM上运行，是否会使我成为世界上最差的“尚未发明”的案例，或者只是真正的全栈。</description>
    </item>
    
    <item>
      <title>第二十一天 - 一个红色的圣诞老人</title>
      <link>https://ohmysummer.github.io/post/2018-12-21-a-red-secret-santa/</link>
      <pubDate>Fri, 21 Dec 2018 18:25:21 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-21-a-red-secret-santa/</guid>
      <description>这一年即将结束，我们有很多值得庆祝的事情！与家人和朋友相比，庆祝今年年底更好的方式是什么？为了帮助实现这一目标，在我家，我们决定开办秘密圣诞老人游戏！所以，我的目标是写一个秘密圣诞老人计划！这就是我可以使用这个名为Red的精彩项目的地方。</description>
    </item>
    
    <item>
      <title>第二十天 - Raku 中的命题组合</title>
      <link>https://ohmysummer.github.io/post/2018-12-20-raku%E4%B8%AD%E7%9A%84%E5%91%BD%E9%A2%98%E7%BB%84%E5%90%88/</link>
      <pubDate>Thu, 20 Dec 2018 09:38:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-20-raku%E4%B8%AD%E7%9A%84%E5%91%BD%E9%A2%98%E7%BB%84%E5%90%88/</guid>
      <description>来临是一个激动人心的时刻，是一个期待的时刻。不仅对我们人类而言 - 正是精灵变得最具创造力的时候。今天，我想在圣诞节压力下休闲一些时间来报道礼品包装领域正在开展的一些开创性工作。即使你没有预料到任何消息，这份报告仍然可以帮助你改进你的技术，因为 - 我不必提醒你 - 圣诞节快到了。</description>
    </item>
    
    <item>
      <title>第十九天 - 交互式桌面应用</title>
      <link>https://ohmysummer.github.io/post/2018-12-19-interactive-desktop-apps/</link>
      <pubDate>Wed, 19 Dec 2018 10:37:00 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-19-interactive-desktop-apps/</guid>
      <description>我是地下城与龙等角色扮演游戏的忠实粉丝。这些游戏中的大多数都有屏幕来帮助你隐藏你在运行游戏时所做的事情，并为你提供游戏中使用的一些图表，以减少书中的内容。</description>
    </item>
    
    <item>
      <title>第十八天 - 一棵 AVG 格式的圣诞树</title>
      <link>https://ohmysummer.github.io/post/2018-12-18-an-avg-christmas-tree/</link>
      <pubDate>Tue, 18 Dec 2018 12:14:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-18-an-avg-christmas-tree/</guid>
      <description>圣诞树是一种传统的象征，可以追溯到欧洲四百多年前，所以对于一篇关于创造圣诞树图像的出现文章来说，这可能更好。</description>
    </item>
    
    <item>
      <title>第十七天 - 通往幸福的编译之路</title>
      <link>https://ohmysummer.github.io/post/2018-12-17-compiling-our-way-to-happiness/</link>
      <pubDate>Mon, 17 Dec 2018 10:35:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-17-compiling-our-way-to-happiness/</guid>
      <description>第17天 - 通往幸福的编译道路 如果我们选择接受它，我们的任务就是解决SEND + MORE = MONEY代码中的问题。不，请等一下，让我这样说吧：</description>
    </item>
    
    <item>
      <title>第十六天 - 检查你的列表俩次</title>
      <link>https://ohmysummer.github.io/post/2018-12-16-checking-your-list-twice/</link>
      <pubDate>Sun, 16 Dec 2018 18:08:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-16-checking-your-list-twice/</guid>
      <description>从命令行了解 Raku 这是 Sniffles the Elf 的大好机会！在丝带矿山经过多年的苦差事后，他们终于被提升到了清单管理部门。作为一名闪亮的新助理尼斯名单审核员，Sniffles 正在走向重要时刻。</description>
    </item>
    
    <item>
      <title>第十五天 - 使用Raku构建(小型)航天器</title>
      <link>https://ohmysummer.github.io/post/2018-12-15-building-a-little-spacecraft-with-raku/</link>
      <pubDate>Sat, 15 Dec 2018 14:41:59 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-15-building-a-little-spacecraft-with-raku/</guid>
      <description>炫耀长耳朵 在上一篇文章中，我们遇到了某种特殊精灵的魔力：</description>
    </item>
    
    <item>
      <title>第十四天 - 使用 Raku 设计(小)航天器</title>
      <link>https://ohmysummer.github.io/post/2018-12-14-%E4%BD%BF%E7%94%A8raku%E8%AE%BE%E8%AE%A1%E5%B0%8F%E8%88%AA%E5%A4%A9%E5%99%A8/</link>
      <pubDate>Fri, 14 Dec 2018 10:13:30 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-14-%E4%BD%BF%E7%94%A8raku%E8%AE%BE%E8%AE%A1%E5%B0%8F%E8%88%AA%E5%A4%A9%E5%99%A8/</guid>
      <description>寻找共同点 大家好！</description>
    </item>
    
    <item>
      <title>第十三天 - 使用 Cro 和 Debian 从头构建 Web 服务</title>
      <link>https://ohmysummer.github.io/post/2018-12-13-web-server-from-scratch-with-cro-and-debian/</link>
      <pubDate>Thu, 13 Dec 2018 10:43:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-13-web-server-from-scratch-with-cro-and-debian/</guid>
      <description>我和圣诞老人​​谈过，他说他不知道如何在 Debian 上安装 Cro，所以我对自己说：我要帮助他。</description>
    </item>
    
    <item>
      <title>第十二天 - 构建灵活的 grammar</title>
      <link>https://ohmysummer.github.io/post/2018-12-12-building-a-flexible-grammar/</link>
      <pubDate>Wed, 12 Dec 2018 09:54:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-12-building-a-flexible-grammar/</guid>
      <description>圣诞老人夫人写了一个基础的 Grammar，以配合 GDPR 无知精灵从世界各地收集的有关今年 naughty 或 nice 的人的简单列表。</description>
    </item>
    
    <item>
      <title>第十一天 - 使用 Raku 测试你的时刻表</title>
      <link>https://ohmysummer.github.io/post/2018-12-11-testing-your-times-tables-with-raku/</link>
      <pubDate>Tue, 11 Dec 2018 13:27:58 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-11-testing-your-times-tables-with-raku/</guid>
      <description>这几乎是在北极附近的精灵小学冬季学期结束之时。对于精灵而言，敏锐的人物头脑非常重要，而小精灵的数学老师 Hopper 女士希望确保他们在任期的倒数第二天保持他们的算术技能。（学期的最后一天保留用于观看电影和玩耍 - 很嗨皮）。</description>
    </item>
    
    <item>
      <title>第十天 - 跳转, 开启你的工作流</title>
      <link>https://ohmysummer.github.io/post/2018-12-10-jmp-starting-your-work-flow/</link>
      <pubDate>Mon, 10 Dec 2018 10:19:53 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-10-jmp-starting-your-work-flow/</guid>
      <description>这是另一个版本的 jmp 供你在圣诞节前解开。</description>
    </item>
    
    <item>
      <title>第九天 - Raku 中的常量</title>
      <link>https://ohmysummer.github.io/post/2018-12-09-constants-in-perl6/</link>
      <pubDate>Sun, 09 Dec 2018 10:19:12 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-09-constants-in-perl6/</guid>
      <description>我自豪地告诉人们在伦敦 Perl 工作室前一天我写了我的第一个 Raku 程序（也就是一个能工作的程序）。 所以，JJ 说：“为什么不为 Raku 写一个 Advent 日历帖？”</description>
    </item>
    
    <item>
      <title>第八天 — 让你的 Raku grammar 紧凑一点</title>
      <link>https://ohmysummer.github.io/post/2018-12-08-make-your-perl6-grammar-compact/</link>
      <pubDate>Sat, 08 Dec 2018 12:44:15 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-08-make-your-perl6-grammar-compact/</guid>
      <description>欢迎来到今年的 Raku Advent Calendar 的第8天！</description>
    </item>
    
    <item>
      <title>第七天 – 细胞自动机</title>
      <link>https://ohmysummer.github.io/post/2018-12-07-automatic-on-a-cellular-level/</link>
      <pubDate>Fri, 07 Dec 2018 13:11:51 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-07-automatic-on-a-cellular-level/</guid>
      <description>今天的降临日历帖子涉及Cellular Automata。</description>
    </item>
    
    <item>
      <title>第六天 - 懒惰精灵与勤劳精灵</title>
      <link>https://ohmysummer.github.io/post/2018-12-06-lazy-and-industrious-elves/</link>
      <pubDate>Thu, 06 Dec 2018 09:33:12 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-06-lazy-and-industrious-elves/</guid>
      <description>对圣诞老人来说，圣诞节总是一年中最忙碌的时刻。 幸运的是，圣诞老人有很多帮手。 他们总是做一些小工作和家务，只是为了创造最好的假日季节体验！</description>
    </item>
    
    <item>
      <title>第五天 - 变量</title>
      <link>https://ohmysummer.github.io/post/2018-12-05-variables/</link>
      <pubDate>Wed, 05 Dec 2018 12:17:44 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-05-variables/</guid>
      <description>这么简单的事，不是吗？ 变量是一个保存着值的名字。</description>
    </item>
    
    <item>
      <title>第四天 - 献给新年的 Raku Pod 新功能</title>
      <link>https://ohmysummer.github.io/post/2018-12-04-new-raku-pod-features-for-the-new-year/</link>
      <pubDate>Tue, 04 Dec 2018 22:37:48 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-04-new-raku-pod-features-for-the-new-year/</guid>
      <description>介绍 Rakudo NQP 文件包含解析 Raku 输入文件并将其转换为正在运行的 Raku 程序的代码。 本文将重点介绍最近使用 Rakudo NQP 文件时的经验所学到的一些细节。 这项工作涉及实现一些尚未实现的（NYI）Raku POD 功能，我希望尽快合并这些更改。</description>
    </item>
    
    <item>
      <title>第三天 – Raku – 跳转到那儿</title>
      <link>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</link>
      <pubDate>Mon, 03 Dec 2018 09:54:10 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-03-jmp2it/</guid>
      <description>jmp是一个Raku驱动的命令行程序，我每天都使用它来浏览成堆的Perl并快速跳转到我的$EDITOR。 我尝试在编码时保持流状态，并且能够快速搜索文件然后直接跳转到编辑器中。</description>
    </item>
    
    <item>
      <title>第二天 – 写文档</title>
      <link>https://ohmysummer.github.io/post/2018-12-02-document-every-thing/</link>
      <pubDate>Sun, 02 Dec 2018 11:01:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-02-document-every-thing/</guid>
      <description>Like 6 Perls in a Pod: document everything 圣诞节即将到来，圣诞老人很沮丧。 他的收件箱被来自全国各地的男孩和女孩的来信塞爆了。</description>
    </item>
    
    <item>
      <title>第一天 - 移植 Vigilance, 将 Raku 与标准工具集成在一起</title>
      <link>https://ohmysummer.github.io/post/2018-12-01-porting-vigilance/</link>
      <pubDate>Sat, 01 Dec 2018 21:49:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-12-01-porting-vigilance/</guid>
      <description>移植 Vigilance，将Raku与标准工具集成在一起 大家好，今天我们将采用基础设施脚本并将其从Perl 5移植到Raku.</description>
    </item>
    
    <item>
      <title>Send-Data-to-Socket</title>
      <link>https://ohmysummer.github.io/post/2018-11-23-send-data-to-socket/</link>
      <pubDate>Fri, 23 Nov 2018 16:18:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-11-23-send-data-to-socket/</guid>
      <description>发送数据到 Socket 的 3333 端口，并把所发送的数据保存到文件中。</description>
    </item>
    
    <item>
      <title>Make Empty</title>
      <link>https://ohmysummer.github.io/post/2018-11-15-make-empty/</link>
      <pubDate>Thu, 15 Nov 2018 23:46:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-11-15-make-empty/</guid>
      <description>my $str = q :to/EOF/; Raku,Rust -- this is a comment Rakudo,Raku -- this is another comment Camelia,Camel EOF grammar MakeEmpty { token TOP { ^ &amp;lt;sentence&amp;gt;+ % &amp;lt;comment&amp;gt; $} token sentence { &amp;lt;words&amp;gt;+ % &#39;,&#39; \n } token comment { &#39;-- &#39; &amp;lt;words&amp;gt;+ % &#39; &#39; \n } token words { \w+ } } class Action { method TOP($/) { make $/.</description>
    </item>
    
    <item>
      <title>原生调用接口</title>
      <link>https://ohmysummer.github.io/post/2018-11-12-perl6-native-call-interface/</link>
      <pubDate>Mon, 12 Nov 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-11-12-perl6-native-call-interface/</guid>
      <description>原生调用接口 入门指南 能想象出的最简单的 NativeCall 用法应该类似于这样的东西：</description>
    </item>
    
    <item>
      <title>Traps to Avoid</title>
      <link>https://ohmysummer.github.io/post/2018-10-07-traps-to-avoid/</link>
      <pubDate>Sun, 07 Oct 2018 21:10:29 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-07-traps-to-avoid/</guid>
      <description>在学习一门编程语言时，可能有熟悉另一门编程语言的背景，总有一些事情会让您感到惊讶，并且可能会耗费宝贵的调试和发现时间。</description>
    </item>
    
    <item>
      <title>Raku 中的命令行参数</title>
      <link>https://ohmysummer.github.io/post/2018-10-05-command-line-arguments-in-raku/</link>
      <pubDate>Fri, 05 Oct 2018 21:33:03 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-05-command-line-arguments-in-raku/</guid>
      <description>Sub MAIN 在 Raku 中，命令行参数的解析是通过 MAIN 子例程完成的，MAIN 子例程是一种特殊的子例程，它根据 MAIN 子例程的签名解析命令行参数。与其他子例程一样，MAIN 子例程可以具有命名参数和位置参数、可选(和必需)参数、多重分派等等。</description>
    </item>
    
    <item>
      <title>Rmarkdown 中的 Raku 代码</title>
      <link>https://ohmysummer.github.io/post/2018-10-04-raku-code-in-rmarkdown/</link>
      <pubDate>Thu, 04 Oct 2018 21:32:27 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-04-raku-code-in-rmarkdown/</guid>
      <description>安装 首先，首先安装 R 编程语言。在此之后，运行 R 并执行以下命令来安装 rmarkdown: install.</description>
    </item>
    
    <item>
      <title>Raku 面向对象简单入门</title>
      <link>https://ohmysummer.github.io/post/2018-10-03-a-naive-introduction-to-object-orientation-in-perl-6/</link>
      <pubDate>Wed, 03 Oct 2018 21:13:31 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-10-03-a-naive-introduction-to-object-orientation-in-perl-6/</guid>
      <description>序言 介绍 本教程最多只关注 Raku 中的面向对象编程(OOP)的基本知识。因此，对语句/表达式、变量、条件、循环、子例程(函数)等有一个基本的了解是很重要的，如果不在 Raku 中，至少在另一种编程语言中是这样的。此外，您至少应该对类、属性和方法有一般的了解。作为对 Raku 的介绍，我强烈推荐 Raku introduction。下一步是 Raku 文档。</description>
    </item>
    
    <item>
      <title>How Naming of Variables Works in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-09-28-how-naming-of-variables-works-in-raku/</link>
      <pubDate>Fri, 28 Sep 2018 20:18:30 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-28-how-naming-of-variables-works-in-raku/</guid>
      <description>在本系列的第 5 篇文章中，比较 Perl 5 和 Raku，了解在 Raku 中使用 sigils。</description>
    </item>
    
    <item>
      <title>第二十一章. 结论</title>
      <link>https://ohmysummer.github.io/post/2018-09-21-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0.-%E7%BB%93%E8%AE%BA/</link>
      <pubDate>Fri, 21 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-21-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0.-%E7%BB%93%E8%AE%BA/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第二十章. 高级话题</title>
      <link>https://ohmysummer.github.io/post/2018-09-20-%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AB%A0.-%E9%AB%98%E7%BA%A7%E8%AF%9D%E9%A2%98/</link>
      <pubDate>Thu, 20 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-20-%E7%AC%AC%E4%BA%8C%E5%8D%81%E7%AB%A0.-%E9%AB%98%E7%BA%A7%E8%AF%9D%E9%A2%98/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十九章. 控制其他程序</title>
      <link>https://ohmysummer.github.io/post/2018-09-19-%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AB%A0.-%E6%8E%A7%E5%88%B6%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 19 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-19-%E7%AC%AC%E5%8D%81%E4%B9%9D%E7%AB%A0.-%E6%8E%A7%E5%88%B6%E5%85%B6%E4%BB%96%E7%A8%8B%E5%BA%8F/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十八章.  Supplies, Channels 和 Promises</title>
      <link>https://ohmysummer.github.io/post/2018-09-18-%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0.-supplies-channels-%E5%92%8C-promises/</link>
      <pubDate>Tue, 18 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-18-%E7%AC%AC%E5%8D%81%E5%85%AB%E7%AB%A0.-supplies-channels-%E5%92%8C-promises/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十七章. Grammars</title>
      <link>https://ohmysummer.github.io/post/2018-09-17-%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0.-grammars/</link>
      <pubDate>Mon, 17 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-17-%E7%AC%AC%E5%8D%81%E4%B8%83%E7%AB%A0.-grammars/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十六章. 更漂亮的正则表达式</title>
      <link>https://ohmysummer.github.io/post/2018-09-16-%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0.-%E6%9B%B4%E6%BC%82%E4%BA%AE%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sun, 16 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-16-%E7%AC%AC%E5%8D%81%E5%85%AD%E7%AB%A0.-%E6%9B%B4%E6%BC%82%E4%BA%AE%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十五章. 正则表达式</title>
      <link>https://ohmysummer.github.io/post/2018-09-15-%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0.-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Sat, 15 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-15-%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0.-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>Toptic Variable</title>
      <link>https://ohmysummer.github.io/post/2018-09-13-toptic-variable/</link>
      <pubDate>Fri, 14 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-13-toptic-variable/</guid>
      <description>$_ 变量 $_ 是主题变量。它是没有显式签名的块的默认参数，因此 for @array {.</description>
    </item>
    
    <item>
      <title>第十四章. Junctions 和集合</title>
      <link>https://ohmysummer.github.io/post/2018-09-14-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0.-junctions-%E4%B8%8E%E9%9B%86%E5%90%88/</link>
      <pubDate>Fri, 14 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-14-%E7%AC%AC%E5%8D%81%E5%9B%9B%E7%AB%A0.-junctions-%E4%B8%8E%E9%9B%86%E5%90%88/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十三章. 角色</title>
      <link>https://ohmysummer.github.io/post/2018-09-13-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0.-%E8%A7%92%E8%89%B2/</link>
      <pubDate>Thu, 13 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-13-%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0.-%E8%A7%92%E8%89%B2/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十二章. 类</title>
      <link>https://ohmysummer.github.io/post/2018-09-12-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0.-%E7%B1%BB/</link>
      <pubDate>Wed, 12 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-12-%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0.-%E7%B1%BB/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十一章. 子例程</title>
      <link>https://ohmysummer.github.io/post/2018-09-11-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0.-%E5%AD%90%E4%BE%8B%E7%A8%8B/</link>
      <pubDate>Tue, 11 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-11-%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0.-%E5%AD%90%E4%BE%8B%E7%A8%8B/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第十章. 使用模块</title>
      <link>https://ohmysummer.github.io/post/2018-09-10-%E7%AC%AC%E5%8D%81%E7%AB%A0.-%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 10 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-10-%E7%AC%AC%E5%8D%81%E7%AB%A0.-%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第九章. Associatives</title>
      <link>https://ohmysummer.github.io/post/2018-09-09-%E7%AC%AC%E4%B9%9D%E7%AB%A0.-associatives/</link>
      <pubDate>Sun, 09 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-09-%E7%AC%AC%E4%B9%9D%E7%AB%A0.-associatives/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第八章. 文件和目录,输入和输出</title>
      <link>https://ohmysummer.github.io/post/2018-09-08-%E7%AC%AC%E5%85%AB%E7%AB%A0.-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</link>
      <pubDate>Sat, 08 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-08-%E7%AC%AC%E5%85%AB%E7%AB%A0.-%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第七章. 当出错的时候</title>
      <link>https://ohmysummer.github.io/post/2018-09-07-%E7%AC%AC%E4%B8%83%E7%AB%A0.-%E5%BD%93%E5%87%BA%E9%94%99%E7%9A%84%E6%97%B6%E5%80%99/</link>
      <pubDate>Fri, 07 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-07-%E7%AC%AC%E4%B8%83%E7%AB%A0.-%E5%BD%93%E5%87%BA%E9%94%99%E7%9A%84%E6%97%B6%E5%80%99/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第六章. Positionals</title>
      <link>https://ohmysummer.github.io/post/2018-09-06-%E7%AC%AC%E5%85%AD%E7%AB%A0.-positionals/</link>
      <pubDate>Thu, 06 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-06-%E7%AC%AC%E5%85%AD%E7%AB%A0.-positionals/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第五章. 创建块</title>
      <link>https://ohmysummer.github.io/post/2018-09-05-%E7%AC%AC%E4%BA%94%E7%AB%A0.-%E5%88%9B%E5%BB%BA%E5%9D%97/</link>
      <pubDate>Wed, 05 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-05-%E7%AC%AC%E4%BA%94%E7%AB%A0.-%E5%88%9B%E5%BB%BA%E5%9D%97/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第四章. 字符串</title>
      <link>https://ohmysummer.github.io/post/2018-09-04-%E7%AC%AC%E5%9B%9B%E7%AB%A0.-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Tue, 04 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-04-%E7%AC%AC%E5%9B%9B%E7%AB%A0.-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第三章. 数字</title>
      <link>https://ohmysummer.github.io/post/2018-09-03-%E7%AC%AC%E4%B8%89%E7%AB%A0.-%E6%95%B0%E5%AD%97/</link>
      <pubDate>Mon, 03 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-03-%E7%AC%AC%E4%B8%89%E7%AB%A0.-%E6%95%B0%E5%AD%97/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第二章. 猜数字</title>
      <link>https://ohmysummer.github.io/post/2018-09-02-%E7%AC%AC%E4%BA%8C%E7%AB%A0.-%E7%8C%9C%E6%95%B0%E5%AD%97/</link>
      <pubDate>Sun, 02 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-02-%E7%AC%AC%E4%BA%8C%E7%AB%A0.-%E7%8C%9C%E6%95%B0%E5%AD%97/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>第一章. 介绍</title>
      <link>https://ohmysummer.github.io/post/2018-09-01-%E7%AC%AC%E4%B8%80%E7%AB%A0.-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 01 Sep 2018 00:10:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-09-01-%E7%AC%AC%E4%B8%80%E7%AB%A0.-%E4%BB%8B%E7%BB%8D/</guid>
      <description>声明 本章翻译仅用于 Raku 学习和研究, 请支持电子版或纸质版。</description>
    </item>
    
    <item>
      <title>Raku 中的容器</title>
      <link>https://ohmysummer.github.io/post/2018-08-29-raku%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 29 Aug 2018 19:55:09 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-29-raku%E4%B8%AD%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>在本系列的第一篇文章中，将 Perl 5 与 Raku 进行了比较，我们研究了将代码迁移到 Raku 时可能遇到的一些问题。在第二篇文章中，我们研究了垃圾收集在 Raku 中的工作原理。第三篇文章，我们将重点介绍 Perl 5 的引用以及如何在 Raku 中处理它们，并介绍绑定和容器的概念。</description>
    </item>
    
    <item>
      <title>Command Line Arguments in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-08-07-command-line-arguments-in-raku/</link>
      <pubDate>Tue, 07 Aug 2018 19:54:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-07-command-line-arguments-in-raku/</guid>
      <description>MAIN 子例程 命名参数和位置参数  命名参数 位置参数 Multi dispatch 组合命名参数和位置参数   可选参数和必选参数 别名或备用命名参数 USAGE 子例程  Sub MAIN 在 Raku 中，命令行参数的解析是使用 MAIN 子例程完成的，MAIN 子例程是一个特殊的子例程，它根据签名解析命令行参数。与其他子程序一样，您可以使用命名参数和位置参数，可选（和必需）参数，multiple dispatch 等。 通过定义 MAIN 子例程，编译器会自动生成 USAGE 子例程。可以修改此子例程以返回自定义的 usage 信息。所有的命令行参数也可以在特殊变量 @*ARGS 中使用，它可以在 MAIN 处理之前进行更改。</description>
    </item>
    
    <item>
      <title>Intro Into Raku Regexes and Grammars</title>
      <link>https://ohmysummer.github.io/post/2018-08-04-intro-into-raku-regexes-and-grammars/</link>
      <pubDate>Sat, 04 Aug 2018 20:33:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-04-intro-into-raku-regexes-and-grammars/</guid>
      <description>tpm-regex.raku.party</description>
    </item>
    
    <item>
      <title>Ping Pang in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-08-03-ping-pang-in-raku/</link>
      <pubDate>Fri, 03 Aug 2018 21:08:25 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-03-ping-pang-in-raku/</guid>
      <description>Ping Pang in Raku 使用 channels 在线程之间传递消息是一种管理并发的简单方法。</description>
    </item>
    
    <item>
      <title>使用 Cro 创建单页应用程序</title>
      <link>https://ohmysummer.github.io/post/2018-08-02-%E4%BD%BF%E7%94%A8cro%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 02 Aug 2018 22:54:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-08-02-%E4%BD%BF%E7%94%A8cro%E5%88%9B%E5%BB%BA%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>使用 Cro 创建单页应用 本教程将介绍如何使用 Cro 作为后端构建简单的单页应用程序。对于前端，我们将使用 webpack，ES6，React 和 Redux。你不需要事先了解这些信息，但如果您想在自己的应用程序中很好地使用它们，则需要进一步阅读。</description>
    </item>
    
    <item>
      <title>使用 Raku 连接 Kafka</title>
      <link>https://ohmysummer.github.io/post/2018-07-20-%E4%BD%BF%E7%94%A8raku%E8%BF%9E%E6%8E%A5kafka/</link>
      <pubDate>Fri, 20 Jul 2018 20:14:28 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-20-%E4%BD%BF%E7%94%A8raku%E8%BF%9E%E6%8E%A5kafka/</guid>
      <description>有这样一个场景, 数据发送方将压缩文件读成字节数组后发往 Kafka, 然后第三方的 Kafka Client 从中读取字节数组解压缩, 每条 message 对应一个压缩文件, 每个压缩文件中包含 _log.</description>
    </item>
    
    <item>
      <title>Io Guide</title>
      <link>https://ohmysummer.github.io/post/2018-07-14-io-guide/</link>
      <pubDate>Sat, 14 Jul 2018 22:35:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-14-io-guide/</guid>
      <description>基础知识 绝大多数常见的 IO 工作都是由 [IO::Path](https://docs.</description>
    </item>
    
    <item>
      <title>Cro Http Test</title>
      <link>https://ohmysummer.github.io/post/2018-07-14-cro-http-test/</link>
      <pubDate>Sat, 14 Jul 2018 17:14:59 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-14-cro-http-test/</guid>
      <description>Cro::HTTP::Test 原则上可以通过使用 Cro::HTTP::Server托管应用程序, 使用 Cro::HTTP::Client向其发出请求, 并使用标准 Test 库检查结果来编写 Cro HTTP 服务的测试。该库使编写此类测试更容易, 并通过以下方式更快地执行它们：</description>
    </item>
    
    <item>
      <title>Class Channel</title>
      <link>https://ohmysummer.github.io/post/2018-07-08-class-channel/</link>
      <pubDate>Sun, 08 Jul 2018 16:11:52 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-08-class-channel/</guid>
      <description>class Channel {} Channel 是一个线程安全的队列，可帮助你将一个或多个生产者的一系列对象发送给一个或多个消费者。每个对象将仅到达由调度程序选择的一个这样的消费者。如果只有一个消费者和一个生产者，则保证保留对象的顺序。在 Channel 上发送是非阻塞的。</description>
    </item>
    
    <item>
      <title>class Supply</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-class-supply/</link>
      <pubDate>Sun, 08 Jul 2018 00:00:07 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-class-supply/</guid>
      <description>class Supply {} supply 是一种线程安全的异步数据流，如 Channel，但它可以有多个订阅者（taps: 水龙头），所有订阅者都可以获得流经 supply 的相同值。</description>
    </item>
    
    <item>
      <title>Raku Pod</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-raku-pod/</link>
      <pubDate>Sat, 07 Jul 2018 18:16:19 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-raku-pod/</guid>
      <description>Raku Pod 是一种易于使用的标记语言。 Pod 可用于编写语言文档，用于文档化程序和模块，以及其他类型的文档组合。</description>
    </item>
    
    <item>
      <title>Doing Math With Raku</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-doing-math-with-perl6/</link>
      <pubDate>Sat, 07 Jul 2018 15:08:06 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-doing-math-with-perl6/</guid>
      <description>Sets Raku 包括 Set 数据类型，以及对大多数 set 操作的支持。并集和交集不仅是原生操作，它们使用自然符号 ∩ 和 ∪。例如，此代码将检查有限数量集的集算术的基本定律：</description>
    </item>
    
    <item>
      <title>Date and Time Functions</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</link>
      <pubDate>Sat, 07 Jul 2018 13:33:35 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-date-and-time-functions/</guid>
      <description>Raku 包括几个处理时态信息的类：Date，DateTime，Instant 和 Duration。前三个是 dateish，所以它们混合了 Dateish 角色，它定义了处理日期的类应该采用的所有方法和属性。它还包括以 X::Temporal 为根的异常的类层次结构。</description>
    </item>
    
    <item>
      <title>Hashes and Maps</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-hashes-and-maps/</link>
      <pubDate>Sat, 07 Jul 2018 10:56:38 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-hashes-and-maps/</guid>
      <description>关联角色和关联类 关联角色是 Hash 和 Map 以及 MixHash 等其他类的基础。它定义了将在关联类中使用的两种类型; 默认情况下，您可以使用任何内容（字面意思，因为任何 Any 子类的类都可以使用）作为键和 keyof 方法。</description>
    </item>
    
    <item>
      <title>Proc Async</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-proc-async/</link>
      <pubDate>Fri, 06 Jul 2018 21:14:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-proc-async/</guid>
      <description>class Proc::Async {} 注意: 目前只有 Rakudo 的 MoarVM 后端实现了 [Proc::Async](https://docs.</description>
    </item>
    
    <item>
      <title>我为什么学习Raku</title>
      <link>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0raku/</link>
      <pubDate>Fri, 06 Jul 2018 00:27:08 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-07-%E6%88%91%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0raku/</guid>
      <description>http://www.evanmiller.org/why-im-learning-perl-6.html</description>
    </item>
    
    <item>
      <title>Raku 概览</title>
      <link>https://ohmysummer.github.io/post/2018-07-06-raku%E6%A6%82%E8%A7%88/</link>
      <pubDate>Fri, 06 Jul 2018 00:23:57 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-06-raku%E6%A6%82%E8%A7%88/</guid>
      <description>http://www.evanmiller.org/a-review-of-perl-6.html</description>
    </item>
    
    <item>
      <title>散列的散列</title>
      <link>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</link>
      <pubDate>Thu, 05 Jul 2018 00:29:18 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-07-05-%E6%95%A3%E5%88%97%E7%9A%84%E6%95%A3%E5%88%97/</guid>
      <description>如何在 Raku 中声明散列的数字散列？ 默认情况下，散列将所有键转换为字符串。当你的键是可能接近的数字时，会导致问题：</description>
    </item>
    
    <item>
      <title>Raku Colon Pair</title>
      <link>https://ohmysummer.github.io/post/2018-06-19-raku-colon-pair/</link>
      <pubDate>Tue, 19 Jun 2018 19:38:05 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-06-19-raku-colon-pair/</guid>
      <description>原文</description>
    </item>
    
    <item>
      <title>饭否机器人教程</title>
      <link>https://ohmysummer.github.io/post/2018-06-03-a-guide-to-fanfou-robot/</link>
      <pubDate>Sun, 03 Jun 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-06-03-a-guide-to-fanfou-robot/</guid>
      <description>使用 Raku 轻松活泼地写饭否机器人 安装 Raku Raku 是一门很有趣的语言。</description>
    </item>
    
    <item>
      <title>饭否客户端</title>
      <link>https://ohmysummer.github.io/post/2018-05-10-%E9%A5%AD%E5%90%A6%E5%AE%A2%E6%88%B7%E7%AB%AF/</link>
      <pubDate>Thu, 10 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-10-%E9%A5%AD%E5%90%A6%E5%AE%A2%E6%88%B7%E7%AB%AF/</guid>
      <description>Inspired by fanfou-py</description>
    </item>
    
    <item>
      <title>Deconstructing Simple Grammars</title>
      <link>https://ohmysummer.github.io/post/2018-05-10-deconstructing-simple-grammars/</link>
      <pubDate>Thu, 10 May 2018 11:27:22 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-10-deconstructing-simple-grammars/</guid>
      <description>去年我写了一个鸡蛋定时器，它的解析命令行参数类似于 GNU sleep。我对这个解析器的严格形式很满意，如下。</description>
    </item>
    
    <item>
      <title>Raku CookBook</title>
      <link>https://ohmysummer.github.io/post/2018-05-08-perl6cookbook/</link>
      <pubDate>Tue, 08 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-08-perl6cookbook/</guid>
      <description>Raku CookBook(inspired by Python cookbook)</description>
    </item>
    
    <item>
      <title>Dateish</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-dateish/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-dateish/</guid>
      <description>role Dateish { .</description>
    </item>
    
    <item>
      <title>Make</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-make/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-make/</guid>
      <description>方法 make 的文档由以下类型组装而成：</description>
    </item>
    
    <item>
      <title>Slip</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-slip/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-slip/</guid>
      <description>有时您想要将列表的元素插入到另一个列表中。这可以通过称为 Slip 的特殊类型的列表完成。</description>
    </item>
    
    <item>
      <title>类和对象</title>
      <link>https://ohmysummer.github.io/post/2018-05-06-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Sun, 06 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-06-%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/</guid>
      <description>Raku 有一个丰富的内置语法来定义和使用类。</description>
    </item>
    
    <item>
      <title>DateTime</title>
      <link>https://ohmysummer.github.io/post/2018-05-05-datetime/</link>
      <pubDate>Sat, 05 May 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-05-05-datetime/</guid>
      <description>DateTime class DateTime does Dateish {}对于在国内处理点数，DateTime 对象存储年，月，日，小时，分钟（全部为 Int），秒（可能为小数）和时区。</description>
    </item>
    
    <item>
      <title>Awesome Async Interfaces with Raku</title>
      <link>https://ohmysummer.github.io/post/2018-04-27-raku%E4%B8%AD%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%8F%B9%E7%9A%84%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Thu, 26 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-27-raku%E4%B8%AD%E4%BB%A4%E4%BA%BA%E6%83%8A%E5%8F%B9%E7%9A%84%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3/</guid>
      <description>2015 年圣诞节前后, 我写了我的第一个 Raku 程序 - 新年 IRC 派对机器人。这项工作包括发布了 IRC::Client 模块。我从这个语言中找到了童年的乐趣并且在假期喝了不少酒, 结果就是这个模块最终足够疯狂。</description>
    </item>
    
    <item>
      <title>Cro::HTTP::Client</title>
      <link>https://ohmysummer.github.io/post/2018-04-16-cro-http-client/</link>
      <pubDate>Mon, 16 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-16-cro-http-client/</guid>
      <description>Cro::HTTP::Client Cro::HTTP::Client 类提供了一个灵活的 HTTP 和 HTTPS 客户端实现，可以从简单到更复杂的情况进行扩展。它可以通过两种方式消费：</description>
    </item>
    
    <item>
      <title>使用 flip-flop 和 gather-take 提取文本块儿</title>
      <link>https://ohmysummer.github.io/post/2018-04-15-flip-flop/</link>
      <pubDate>Sun, 15 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-15-flip-flop/</guid>
      <description>使用 flip-flop 和 gather-take 提取文本块儿 my $excerpt = q:to/END/; Here&#39;s some unimportant text.</description>
    </item>
    
    <item>
      <title>Raku 中散列的键和值</title>
      <link>https://ohmysummer.github.io/post/2018-04-14-keys-values-of-hashes-in-raku/</link>
      <pubDate>Sat, 14 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-14-keys-values-of-hashes-in-raku/</guid>
      <description>Raku 中散列的键和值 今天，我们将看看 Hash 类的几个返回散列所有键或值或同时返回键和值的方法:</description>
    </item>
    
    <item>
      <title>Raku 中的列表解析</title>
      <link>https://ohmysummer.github.io/post/2018-04-13-raku%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 13 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-13-raku%E4%B8%AD%E7%9A%84%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>Raku 中的列表解析 看一看 Python 中关于列表推导的页面。</description>
    </item>
    
    <item>
      <title>在 Raku 中设置超时</title>
      <link>https://ohmysummer.github.io/post/2018-04-12-setting-timeouts-in-raku/</link>
      <pubDate>Thu, 12 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-12-setting-timeouts-in-raku/</guid>
      <description>在 Raku 中设置超时 在 Perl 5 中，我曾经使用信号设置超时（至少，这是一种简单且可预测的方式）。在 Raku 中，您可以使用 promise。让我们看看如何做到这一点。</description>
    </item>
    
    <item>
      <title>Typed hashes in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-04-11-typed-hashes-in-raku/</link>
      <pubDate>Wed, 11 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-11-typed-hashes-in-raku/</guid>
      <description>Typed hashes in Raku 在 Raku 中, 你可以通过指定变量的类型来限制变量容器的内容, 例如：</description>
    </item>
    
    <item>
      <title>Raku 中的 gist 方法</title>
      <link>https://ohmysummer.github.io/post/2018-04-10-what-does-gist-do-in-raku/</link>
      <pubDate>Tue, 10 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-10-what-does-gist-do-in-raku/</guid>
      <description>当你打印对象的时候, 例如 say $x, Raku 调用 gist 方法.</description>
    </item>
    
    <item>
      <title>Raku 中的 Superscripts</title>
      <link>https://ohmysummer.github.io/post/2018-04-09-raku%E4%B8%AD%E7%9A%84%E4%B8%8A%E6%A0%87/</link>
      <pubDate>Mon, 09 Apr 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-04-09-raku%E4%B8%AD%E7%9A%84%E4%B8%8A%E6%A0%87/</guid>
      <description>Raku 中的 Superscripts 在 Raku 中，可以使用上标索引来计算数字的幂数，例如:</description>
    </item>
    
    <item>
      <title> More on the proto keyword in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-21-more-on-the-proto-keyword-in-raku/</link>
      <pubDate>Wed, 21 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-21-more-on-the-proto-keyword-in-raku/</guid>
      <description>在深入研究 EVAL 子例程的细节之前，我们必须揭示一些关于 protos 原型和多重分派的更多信息。检查以下程序：</description>
    </item>
    
    <item>
      <title>Examining the Real role of Raku, part 2</title>
      <link>https://ohmysummer.github.io/post/2018-02-18-examining-the-real-role-of-raku-part-2/</link>
      <pubDate>Sun, 18 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-18-examining-the-real-role-of-raku-part-2/</guid>
      <description>今天，我们继续对几天前开始的 Real 角色进行初步探索。</description>
    </item>
    
    <item>
      <title>Everyone Loves Porgs</title>
      <link>https://ohmysummer.github.io/post/2018-02-17-everyone-loves-porgs/</link>
      <pubDate>Sat, 17 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-17-everyone-loves-porgs/</guid>
      <description>这个想法有一阵子了。我在完成的各个阶段都有几个发文的想法，有时候很难优先考虑这个问题。所以我想我要开始发布我一直在玩的更短的想法和事情，以免这个博客变成那些永不更新的博客之一。所以，我们开始吧。</description>
    </item>
    
    <item>
      <title>A word on polymod in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-16-a-word-on-polymod-in-raku/</link>
      <pubDate>Fri, 16 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-16-a-word-on-polymod-in-raku/</guid>
      <description>在转到 Real 角色的第二部分之前，让我们停下来研究一下 Int 类的中的 polymod 方法。</description>
    </item>
    
    <item>
      <title>如何在 Raku 中对散列进行排序</title>
      <link>https://ohmysummer.github.io/post/2018-02-16-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%AF%B9%E6%95%A3%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Fri, 16 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-16-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%AF%B9%E6%95%A3%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F/</guid>
      <description>要在 Raku 中对散列进行排序，首先你要知道什么是占位符变量。一旦这个概念变得清晰，对散列排序就变得非常简单。</description>
    </item>
    
    <item>
      <title>Examining the Real role of Raku, part 1</title>
      <link>https://ohmysummer.github.io/post/2018-02-15-examining-the-real-role-of-perl-6-part-1/</link>
      <pubDate>Thu, 15 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-15-examining-the-real-role-of-perl-6-part-1/</guid>
      <description>在过去的几天里，我们谈了很多关于 Real 这个角色。让我们更仔细地看看它。该代码位于 src/core/Real.</description>
    </item>
    
    <item>
      <title>FatRat vs Rat in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-15-fatrat-vs-rat-in-raku/</link>
      <pubDate>Thu, 15 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-15-fatrat-vs-rat-in-raku/</guid>
      <description>昨天，Solomon Foster 在 Facebook 的 Raku 小组上发布了一个例子:</description>
    </item>
    
    <item>
      <title>A bit more on Rat vs FatRat in Raku</title>
      <link>https://ohmysummer.github.io/post/2018-02-14-a-bit-more-on-rat-vs-fatrat-in-perl-6/</link>
      <pubDate>Wed, 14 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-14-a-bit-more-on-rat-vs-fatrat-in-perl-6/</guid>
      <description>昨天，我们正在深入研究 Rakudo Raku，以了解Rat值成为Num值的时间。事实证明，如果该值变得太小，这意味着它的分母变得越来越大，Rakudo开始使用Num值而不是Rat。</description>
    </item>
    
    <item>
      <title>Going over the Bridge, part 2. Let’s get rid of it</title>
      <link>https://ohmysummer.github.io/post/2018-02-12-going-over-the-bridge-part-2/</link>
      <pubDate>Mon, 12 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-12-going-over-the-bridge-part-2/</guid>
      <description>今天，我们继续在 Rakudo Raku 中使用 Bridge 方法。昨天，我们在几个预定义的数据类型中看到了方法的定义。现在是时候看看如何使用该方法。</description>
    </item>
    
    <item>
      <title>Going over the Bridge, part 1</title>
      <link>https://ohmysummer.github.io/post/2018-02-11-going-over-the-bridge-part-1/</link>
      <pubDate>Sun, 11 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-11-going-over-the-bridge-part-1/</guid>
      <description>在处理 Raku 中的数字的类中，我们看到了 Bridge 方法，该方法以多态方式使用。让我们花一些时间，并试图了解 1）它是如何工作的，2）是否有必要。</description>
    </item>
    
    <item>
      <title>Raku 中的命名参数</title>
      <link>https://ohmysummer.github.io/post/2018-02-10-raku%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</link>
      <pubDate>Sat, 10 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-10-raku%E4%B8%AD%E7%9A%84%E5%91%BD%E5%90%8D%E5%8F%82%E6%95%B0/</guid>
      <description>Raku 中的函数（和类方法）能够接受命名参数。最简单的方法是用箭头分隔名称和值：</description>
    </item>
    
    <item>
      <title>Raku Grammar 中的冒号对儿</title>
      <link>https://ohmysummer.github.io/post/2018-02-08-raku-grammar%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7%E5%AF%B9%E5%84%BF/</link>
      <pubDate>Thu, 08 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-08-raku-grammar%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7%E5%AF%B9%E5%84%BF/</guid>
      <description>欢迎来到这个系列的第 50 篇文章!</description>
    </item>
    
    <item>
      <title>Raku 中的数据类型 Bag</title>
      <link>https://ohmysummer.github.io/post/2018-02-07-raku%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bbag/</link>
      <pubDate>Wed, 07 Feb 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-07-raku%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8Bbag/</guid>
      <description>数据类型 Bag 是一种 Perl 5 中没有的新的数据类型。</description>
    </item>
    
    <item>
      <title>Raku Rakudo 和 NQP 内部研讨(二)</title>
      <link>https://ohmysummer.github.io/post/2018-01-29-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</link>
      <pubDate>Mon, 29 Jan 2018 23:01:01 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-01-29-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</guid>
      <description>title: Rakudo and NQP Internals subtitle: The guts tormented implementers made author: Jonathan Worthington</description>
    </item>
    
    <item>
      <title>Raku Core Hacking: QASTalicious</title>
      <link>https://ohmysummer.github.io/post/2018-01-28-raku-core-hacking-qastalicious/</link>
      <pubDate>Sun, 28 Jan 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-01-28-raku-core-hacking-qastalicious/</guid>
      <description>在过去的一个月中，我在 Rakudo 的 QAST 地区花了一些时间写了一些优化，修复了包含警告的错误，并且用一个单一的提交压缩了一个10个thunk范围的bug的怪物蜂巢。 在今天的文章中，我们将详细介绍最后一个专长，以及了解QAST是什么以及如何使用它。</description>
    </item>
    
    <item>
      <title>Raku logo</title>
      <link>https://ohmysummer.github.io/post/2018-01-28-perl-6-logo/</link>
      <pubDate>Sun, 28 Jan 2018 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-01-28-perl-6-logo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Expensive Egg Timers</title>
      <link>https://ohmysummer.github.io/post/2017-12-31-expensive-egg-timers/</link>
      <pubDate>Sun, 31 Dec 2017 11:32:50 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-31-expensive-egg-timers/</guid>
      <description>如果你使用 CLI，你可能已经做了一些类似的事情。</description>
    </item>
    
    <item>
      <title>第二十五天-圣诞奖金 - 并发HTTP服务器实施和scripter的方法</title>
      <link>https://ohmysummer.github.io/post/2017-12-25-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E5%A4%A9-%E5%B9%B6%E5%8F%91http%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 25 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-25-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%94%E5%A4%A9-%E5%B9%B6%E5%8F%91http%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0/</guid>
      <description>Bonus Xmas – Concurrent HTTP Server implementation and the scripter’s approach 首先，我想强调 Jonathan Worthington 在 Rakudo Raku 和 IO::Socket::Async 中的工作。谢谢 Jon！</description>
    </item>
    
    <item>
      <title>第二十四天-解魔方</title>
      <link>https://ohmysummer.github.io/post/2017-12-24-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%A4%A9-%E8%A7%A3%E9%AD%94%E6%96%B9/</link>
      <pubDate>Sun, 24 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-24-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%9B%9B%E5%A4%A9-%E8%A7%A3%E9%AD%94%E6%96%B9/</guid>
      <description>Day 24 – Solving a Rubik’s Cube 介绍 我在圣诞节的愿望清单上有一个速度魔方，我真的很兴奋。 :)我想分享一些Raku代码的热情。</description>
    </item>
    
    <item>
      <title>Playing with the code of Rakudo Raku</title>
      <link>https://ohmysummer.github.io/post/2017-12-23-playing-with-the-code-of-raku/</link>
      <pubDate>Sat, 23 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-23-playing-with-the-code-of-raku/</guid>
      <description>昨天，我们查看了返回字符串的 Bool 类的两个方法。函数产生的字符串表示在源代码中被硬编码。</description>
    </item>
    
    <item>
      <title>第二十三天-Raku 高尔夫</title>
      <link>https://ohmysummer.github.io/post/2017-12-23-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E5%A4%A9-raku-6%E9%AB%98%E5%B0%94%E5%A4%AB/</link>
      <pubDate>Sat, 23 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-23-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%89%E5%A4%A9-raku-6%E9%AB%98%E5%B0%94%E5%A4%AB/</guid>
      <description>Day 23 – The Wonders of Raku Golf 啊，圣诞节！还有什么比和你的朋友与家人一起坐在桌子旁边玩高尔夫球代码还好呢！ &amp;hellip;等等，什么？</description>
    </item>
    
    <item>
      <title>Exploring the Bool type in Raku, part 1</title>
      <link>https://ohmysummer.github.io/post/2017-12-22-exploring-the-bool-type-in-raku-part-1/</link>
      <pubDate>Fri, 22 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-22-exploring-the-bool-type-in-raku-part-1/</guid>
      <description>今天，我们将使用 GitHub 上提供的 Rakudo 源代码挖掘 Bool 类型的内部。</description>
    </item>
    
    <item>
      <title>第二十二天-Raku.d 的特性</title>
      <link>https://ohmysummer.github.io/post/2017-12-22-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E5%A4%A9-raku-6.d%E7%9A%84%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 22 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-22-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%BA%8C%E5%A4%A9-raku-6.d%E7%9A%84%E7%89%B9%E6%80%A7/</guid>
      <description>Day 22 – Features of Raku.</description>
    </item>
    
    <item>
      <title>Raku 中的 proto 关键字</title>
      <link>https://ohmysummer.github.io/post/2017-12-21-raku-%E4%B8%AD%E7%9A%84-proto-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Thu, 21 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-21-raku-%E4%B8%AD%E7%9A%84-proto-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>今天，我们正在关注 proto 关键字。它向编译器提供了关于你打算创建 multi-subs 的提示。</description>
    </item>
    
    <item>
      <title>第二十一天-数独与Junctions和集合</title>
      <link>https://ohmysummer.github.io/post/2017-12-21-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9-%E6%95%B0%E7%8B%AC%E4%B8%8Ejunctions%E5%92%8C%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 21 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-21-%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E5%A4%A9-%E6%95%B0%E7%8B%AC%E4%B8%8Ejunctions%E5%92%8C%E9%9B%86%E5%90%88/</guid>
      <description>Day 21 – Sudoku with Junctions and Sets Raku 中有许多核心元素为您提供强大的工具，以简洁而强大的方式完成任务。其中两个是具有许多特征的联结和集合，但也是截然不同的。为了演示这些功能，我将介绍如何将它们用于一个简单的问题，Sudoku拼图。</description>
    </item>
    
    <item>
      <title>第二十天-宏的进阶</title>
      <link>https://ohmysummer.github.io/post/2017-12-20-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%A4%A9-%E5%AE%8F%E7%9A%84%E8%BF%9B%E9%98%B6/</link>
      <pubDate>Wed, 20 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-20-%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%A4%A9-%E5%AE%8F%E7%9A%84%E8%BF%9B%E9%98%B6/</guid>
      <description>Day 20: Advancements in Macrotechnologies 你好！</description>
    </item>
    
    <item>
      <title>第十九天-Language Independent Validation Rules (LIVR) for Raku</title>
      <link>https://ohmysummer.github.io/post/2017-12-19-%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%A4%A9-language-independent-validation-rules-livr-for-raku/</link>
      <pubDate>Tue, 19 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-19-%E7%AC%AC%E5%8D%81%E4%B9%9D%E5%A4%A9-language-independent-validation-rules-livr-for-raku/</guid>
      <description>Language Independent Validation Rules (LIVR) for Raku 我刚刚将 LIVR 移植到了 Raku。在 Raku 中编写代码非常有趣。而且，LIVR 的测试套件让我能够在 Raku 的 Email::Valid 模块中发现 bug，而在 Rakudo 中则发现另一个 bug。更有趣的是，不仅仅实现了一个模块，而且还帮助其他开发人员进行了一些测试:)</description>
    </item>
    
    <item>
      <title>第十八天-Raku 支持的工作流</title>
      <link>https://ohmysummer.github.io/post/2017-12-18-%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A4%A9-raku%E6%94%AF%E6%8C%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</link>
      <pubDate>Mon, 18 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-18-%E7%AC%AC%E5%8D%81%E5%85%AB%E5%A4%A9-raku%E6%94%AF%E6%8C%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid>
      <description>Day 18: Raku powered work flow 保持流畅的编码可能是一个挑战。分心和讨厌的句法错误是潜在的流量瓶颈。</description>
    </item>
    
    <item>
      <title>第十七天-关于消息传递</title>
      <link>https://ohmysummer.github.io/post/2017-12-17-%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A4%A9-%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/</link>
      <pubDate>Sun, 17 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-17-%E7%AC%AC%E5%8D%81%E4%B8%83%E5%A4%A9-%E5%85%B3%E4%BA%8E%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92/</guid>
      <description>Day 17: Something about messaging (but I couldn’t think of a snappier title.</description>
    </item>
    
    <item>
      <title>第十六天-Raku 性能改进</title>
      <link>https://ohmysummer.github.io/post/2017-12-16-%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9-raku%E6%80%A7%E8%83%BD%E6%94%B9%E8%BF%9B/</link>
      <pubDate>Sat, 16 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-16-%E7%AC%AC%E5%8D%81%E5%85%AD%E5%A4%A9-raku%E6%80%A7%E8%83%BD%E6%94%B9%E8%BF%9B/</guid>
      <description>Day 16 – 🎶 Deck The Halls With Perf Improvements 🎶 在英国，我们缺乏感恩节给圣诞节带来了新的一年，感谢和反思。为此，我想围绕Raku性能的状态放置一些我已经坐了一段时间的零碎片断，这些片断强调了这个过程需要付出多少努力。我不确定更广泛的编程社区对正在发生的努力的速度和数量表示赞赏。</description>
    </item>
    
    <item>
      <title>第十五天-带有 Promise 的简单网络爬虫</title>
      <link>https://ohmysummer.github.io/post/2017-12-15-%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9-%E5%B8%A6%E6%9C%89promise%E7%9A%84%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</link>
      <pubDate>Fri, 15 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-15-%E7%AC%AC%E5%8D%81%E4%BA%94%E5%A4%A9-%E5%B8%A6%E6%9C%89promise%E7%9A%84%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</guid>
      <description>Day 15 – A Simple Web Spider With Promises 承诺，承诺 去年夏天，我申请了一项编程工作，面试官要求我编写一个程序来抓取给定的域，只在该域中的链接之后，找到它引用的所有页面。我被允许以任何语言编写程序，但我选择使用Go语言执行任务，因为这是该公司使用的主要语言。这对于并发编程来说是一个理想的任务，并且Go具有非常好的现代化功能，即使有些低级别的并发支持。网络蜘蛛中的主要工作是执行与在域中发现的唯一锚链接相同的次数，即在每个页面上执行HTTP GET并解析页面文本以获取新链接。这个任务可以并行安全地完成，因为没有可能（除非你做得很糟糕），任何调用爬取代码都会干扰其他任何调用。</description>
    </item>
    
    <item>
      <title>第十四天-在 Raku 中构建和测试 Big Grammars</title>
      <link>https://ohmysummer.github.io/post/2017-12-14-%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9-%E5%9C%A8raku%E4%B8%AD%E6%9E%84%E5%BB%BA%E5%92%8C%E6%B5%8B%E8%AF%95%E5%A4%A7grammars/</link>
      <pubDate>Thu, 14 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-14-%E7%AC%AC%E5%8D%81%E5%9B%9B%E5%A4%A9-%E5%9C%A8raku%E4%B8%AD%E6%9E%84%E5%BB%BA%E5%92%8C%E6%B5%8B%E8%AF%95%E5%A4%A7grammars/</guid>
      <description>The Little Match Girl: Building and Testing Big Grammars in Raku Raku Grammars 很棒，但在项目中使用它们会是什么样呢？在圣诞节前和圣诞节后，我的经历是一个令人心酸的故事。你可以在这里找到版本库。我不是来自计算机科学背景，所以也许它看起来很简陋，但是当我学习 Raku Grammars 时，这是我的困难和胜利。</description>
    </item>
    
    <item>
      <title>第十三天 - 使用 Raku 挖掘维基百科</title>
      <link>https://ohmysummer.github.io/post/2017-12-13-%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9-%E4%BD%BF%E7%94%A8-raku-%E6%8C%96%E6%8E%98%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/</link>
      <pubDate>Wed, 13 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-13-%E7%AC%AC%E5%8D%81%E4%B8%89%E5%A4%A9-%E4%BD%BF%E7%94%A8-raku-%E6%8C%96%E6%8E%98%E7%BB%B4%E5%9F%BA%E7%99%BE%E7%A7%91/</guid>
      <description>介绍 大家好!</description>
    </item>
    
    <item>
      <title>第十二天 – The Year of Raku Books</title>
      <link>https://ohmysummer.github.io/post/2017-12-12-%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9the-year-of-raku-books/</link>
      <pubDate>Tue, 12 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-12-%E7%AC%AC%E5%8D%81%E4%BA%8C%E5%A4%A9the-year-of-raku-books/</guid>
      <description>https://rakuadvent.wordpress.com/2017/12/12/day-12-the-year-of-perl-6-books/</description>
    </item>
    
    <item>
      <title>第十一天-Raku 中所有的星号</title>
      <link>https://ohmysummer.github.io/post/2017-12-11-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9raku%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9A%84%E6%98%9F%E5%8F%B7/</link>
      <pubDate>Mon, 11 Dec 2017 12:50:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-11-%E7%AC%AC%E5%8D%81%E4%B8%80%E5%A4%A9raku%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9A%84%E6%98%9F%E5%8F%B7/</guid>
      <description>在今年的 Raku Advent Calendar 中, 雪花被今天的博客文章承包了。 我们将检阅使用了 * 字符的结构。 在 Raku 中，根据上下文的不同，您可以叫它星星（或者，如果你愿意的话，可以叫它星号）或者 whatever。</description>
    </item>
    
    <item>
      <title>第十天 – Wrapping Rats</title>
      <link>https://ohmysummer.github.io/post/2017-12-10-%E7%AC%AC%E5%8D%81%E5%A4%A9wrapping-rats/</link>
      <pubDate>Sun, 10 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-10-%E7%AC%AC%E5%8D%81%E5%A4%A9wrapping-rats/</guid>
      <description>Day 10 – Wrapping Rats 沿着烟囱向下是一件危险的事情。</description>
    </item>
    
    <item>
      <title>第九天 – HTTP and Web Sockets with Cro</title>
      <link>https://ohmysummer.github.io/post/2017-12-09-%E7%AC%AC%E4%B9%9D%E5%A4%A9http-and-web-sockets-with-cro/</link>
      <pubDate>Sat, 09 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-09-%E7%AC%AC%E4%B9%9D%E5%A4%A9http-and-web-sockets-with-cro/</guid>
      <description>Day 9 – HTTP and Web Sockets with Cro 礼物不仅仅是圣诞节的时候才有。今年夏天，在瑞士 Perl 工作室 - 精美地坐落在阿尔卑斯山 - 我有幸透露了 Cro。 Cro 是一组用于在 Raku 中构建服务的库，以及一些用于 stub，run 和跟踪服务的开发工具。 Cro 主要关注使用 HTTP（包括HTTP/2.</description>
    </item>
    
    <item>
      <title>第八天 – Adventures in NQP Land: Hacking the Rakudo Compiler</title>
      <link>https://ohmysummer.github.io/post/2017-12-08-%E7%AC%AC%E5%85%AB%E5%A4%A9adventures-in-nqp-land-hacking-the-rakudo-compiler/</link>
      <pubDate>Fri, 08 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-08-%E7%AC%AC%E5%85%AB%E5%A4%A9adventures-in-nqp-land-hacking-the-rakudo-compiler/</guid>
      <description>Day 8 – Adventures in NQP Land: Hacking the Rakudo Compiler/ 对旧圣诞节经典“圣诞节十二天”的道歉，我给你一个 Raku 版本的第一行：</description>
    </item>
    
    <item>
      <title>第七天 – Test All The Things</title>
      <link>https://ohmysummer.github.io/post/2017-12-07-%E7%AC%AC%E4%B8%83%E5%A4%A9test-all-the-things/</link>
      <pubDate>Thu, 07 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-07-%E7%AC%AC%E4%B8%83%E5%A4%A9test-all-the-things/</guid>
      <description>https://rakuadvent.wordpress.com/2017/12/07/day-7-test-all-the-things/</description>
    </item>
    
    <item>
      <title>第六天-Raku 书评</title>
      <link>https://ohmysummer.github.io/post/2017-12-06-%E7%AC%AC%E5%85%AD%E5%A4%A9-raku-%E4%B9%A6%E8%AF%84/</link>
      <pubDate>Wed, 06 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-06-%E7%AC%AC%E5%85%AD%E5%A4%A9-raku-%E4%B9%A6%E8%AF%84/</guid>
      <description>https://rakuadvent.wordpress.com/2017/12/06/</description>
    </item>
    
    <item>
      <title>第五天 - 使用 Raku 签名解构参数</title>
      <link>https://ohmysummer.github.io/post/2017-12-05-%E7%AC%AC%E4%BA%94%E5%A4%A9-%E4%BD%BF%E7%94%A8raku%E7%AD%BE%E5%90%8D%E8%A7%A3%E6%9E%84%E5%8F%82%E6%95%B0/</link>
      <pubDate>Tue, 05 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-05-%E7%AC%AC%E4%BA%94%E5%A4%A9-%E4%BD%BF%E7%94%A8raku%E7%AD%BE%E5%90%8D%E8%A7%A3%E6%9E%84%E5%8F%82%E6%95%B0/</guid>
      <description>第五天 - 使用 Raku 签名解构参数 在许多其他关键的 Raku 特性中，我认为 Signatures 是众多&amp;quot;杀手级&amp;quot;特性之一。 它们的功能如此丰富而强大，我怀疑关于如何使用它们可以写一整本书。 我想探索一下我原来忽略但是非常珍惜的一些特定功能。</description>
    </item>
    
    <item>
      <title>第四天-使用 Grammars 进行解析</title>
      <link>https://ohmysummer.github.io/post/2017-12-04-%E7%AC%AC%E5%9B%9B%E5%A4%A9-%E4%BD%BF%E7%94%A8grammars%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 04 Dec 2017 10:08:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-04-%E7%AC%AC%E5%9B%9B%E5%A4%A9-%E4%BD%BF%E7%94%A8grammars%E8%BF%9B%E8%A1%8C%E8%A7%A3%E6%9E%90/</guid>
      <description>第四天-使用 Grammars 进行解析 下面是从 Parsing with Raku Regexes and Grammars: A Recursive Descent into Parsing 这本书里面提取出来的一章, 作者是 Moritz Lenz, 由 Apress Media 出版社出版。版权经过允许。</description>
    </item>
    
    <item>
      <title>第三天 – LetterOps with Raku</title>
      <link>https://ohmysummer.github.io/post/2017-12-03-%E7%AC%AC%E4%B8%89%E5%A4%A9letterops-with-raku/</link>
      <pubDate>Sun, 03 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-03-%E7%AC%AC%E4%B8%89%E5%A4%A9letterops-with-raku/</guid>
      <description>Day 3 – LetterOps with Raku 规模 “规模！规模就是一切！“。</description>
    </item>
    
    <item>
      <title>第二天-Raku: 符号, 变量和容器</title>
      <link>https://ohmysummer.github.io/post/2017-12-02-%E7%AC%AC%E4%BA%8C%E5%A4%A9-raku%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sat, 02 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-02-%E7%AC%AC%E4%BA%8C%E5%A4%A9-raku%E4%B8%AD%E7%9A%84%E7%AC%A6%E5%8F%B7%E5%8F%98%E9%87%8F%E5%92%8C%E5%AE%B9%E5%99%A8/</guid>
      <description>第二天-Raku: 符号, 变量和容器 对容器的基本理解对于在 Raku 中进行愉快的编程是至关重要的。它们无处不在，不仅影响你获得的变量类型，还决定了 List 和 Map 在迭代时的行为方式。</description>
    </item>
    
    <item>
      <title>第一天 – Raku 鬼精灵: 圣诞节实用指南</title>
      <link>https://ohmysummer.github.io/post/2017-12-01-%E7%AC%AC%E4%B8%80%E5%A4%A9-raku%E9%AC%BC%E7%B2%BE%E7%81%B5-%E5%9C%A3%E8%AF%9E%E8%8A%82%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 01 Dec 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-12-01-%E7%AC%AC%E4%B8%80%E5%A4%A9-raku%E9%AC%BC%E7%B2%BE%E7%81%B5-%E5%9C%A3%E8%AF%9E%E8%8A%82%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>第一天 – Raku 鬼精灵: 圣诞节实用指南 看看他们！同事、朋友和亲近的家人都在开心地笑着。他们都在享受着使用 Raku 的 6.</description>
    </item>
    
    <item>
      <title>Racing Rakudo</title>
      <link>https://ohmysummer.github.io/post/2017-11-05-racing-rakudo/</link>
      <pubDate>Sun, 05 Nov 2017 11:44:56 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-11-05-racing-rakudo/</guid>
      <description>在许多赛车运动中，遥测在提高速度方面起着重要作用。 感谢lizmat的大量提交，你现在也可以使用遥测了。</description>
    </item>
    
    <item>
      <title>There Is More Than One Way at the Same Time</title>
      <link>https://ohmysummer.github.io/post/2017-10-22-there-is-more-than-one-way-at-the-same-time/</link>
      <pubDate>Sun, 22 Oct 2017 12:26:51 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-10-22-there-is-more-than-one-way-at-the-same-time/</guid>
      <description>Perl 6 Rosattacode 中用于并行计算的部分已经非常过时，而且缺少了过去几周中添加或修复的所有好东西。通过这篇文章，我想为 Rosettacode 提出一个更新的版本。如果你认为我遗漏了什么，请在下面评论。请记住，Rosettacode 是用来炫耀的，而不是用来全面的。</description>
    </item>
    
    <item>
      <title>根据select结果生成insert语句</title>
      <link>https://ohmysummer.github.io/post/2017-09-16-%E6%A0%B9%E6%8D%AEselect%E7%BB%93%E6%9E%9C%E7%94%9F%E6%88%90insert%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Sat, 16 Sep 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-09-16-%E6%A0%B9%E6%8D%AEselect%E7%BB%93%E6%9E%9C%E7%94%9F%E6%88%90insert%E8%AF%AD%E5%8F%A5/</guid>
      <description>想根据 MySQL select 语句的结果生成 insert 语句。</description>
    </item>
    
    <item>
      <title>The Siege Can Continue</title>
      <link>https://ohmysummer.github.io/post/2017-09-16-the-siege-can-continue/</link>
      <pubDate>Sat, 16 Sep 2017 12:38:45 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-09-16-the-siege-can-continue/</guid>
      <description>一位睿智的网络飞船海盗曾写道：&amp;ldquo;抱怨能让你得到东西。这就是为什么人类处于食物链的顶端&amp;rdquo;。我的抱怨让我得到了一个修复，它结束了对 http 请求做出反应的长期运行脚本的 segfaults。</description>
    </item>
    
    <item>
      <title>开启 Disqus 评论</title>
      <link>https://ohmysummer.github.io/post/2017-09-15-%E5%BC%80%E5%90%AFdisqus%E8%AF%84%E8%AE%BA/</link>
      <pubDate>Fri, 15 Sep 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-09-15-%E5%BC%80%E5%90%AFdisqus%E8%AF%84%E8%AE%BA/</guid>
      <description>要开启 Disqus 评论, 需要先在 Disqus 官网注册账号, 获得 disqusShortname。</description>
    </item>
    
    <item>
      <title>Goto the Last Fifo</title>
      <link>https://ohmysummer.github.io/post/2017-09-13-goto-the-last-fifo/</link>
      <pubDate>Wed, 13 Sep 2017 12:41:45 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-09-13-goto-the-last-fifo/</guid>
      <description>我一直很欣赏 sysfs 的优雅。你把一个文本写到一个文件里，然后和运行在内核空间的函数对话。只要你知道如何处理文件，你就可以改变系统的行为和重用访问控制机制，而不需要任何特殊的工具。脚本和转储（部分）系统状态是非常容易的。</description>
    </item>
    
    <item>
      <title>Preparations for Your</title>
      <link>https://ohmysummer.github.io/post/2017-08-20-preparations-for-your/</link>
      <pubDate>Sun, 20 Aug 2017 12:45:36 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-08-20-preparations-for-your/</guid>
      <description>在他出色的演讲中，Damian Conway 展示了如何实现一个新的声明符，他把这个声明符称为 your，它会把任何值的变化输出到容器中进行调试。整件事让我担心 Perl 5 可能会超越 Perl 6，导致更多的命名混乱，因为我们已经得到了。所以我又开始让我们领先一点。</description>
    </item>
    
    <item>
      <title>on Good Terms With Constants</title>
      <link>https://ohmysummer.github.io/post/2017-08-13-on-good-terms-with-constants/</link>
      <pubDate>Sun, 13 Aug 2017 12:50:14 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-08-13-on-good-terms-with-constants/</guid>
      <description>在构建一个小助手模块来获取网络电台的时候，我发现自己想要提供一个常量的命名参数。不少 DateTime 的方法都有一个命名的参数，而 $*TZ 就不对了。事实证明，这在 Perl 6 中真的很简单。</description>
    </item>
    
    <item>
      <title>It&#39;s Classes All the Way Down</title>
      <link>https://ohmysummer.github.io/post/2017-08-08-it-s-classes-all-the-way-down/</link>
      <pubDate>Tue, 08 Aug 2017 12:32:26 +0800</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-08-08-it-s-classes-all-the-way-down/</guid>
      <description>当我在为一个网络 api 构建缓存时，我发现自己在同一个数据上走了两遍，以解决缺乏正确的输入法的问题。JSON 只知道字符串，尽管大部分字段都是整数和时间戳。我在用 JSON::Fast 解析JSON后，通过强制 .</description>
    </item>
    
    <item>
      <title>Seq 和摇滚</title>
      <link>https://ohmysummer.github.io/post/2017-07-31-seq%E5%92%8C%E6%91%87%E6%BB%9A/</link>
      <pubDate>Mon, 31 Jul 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-07-31-seq%E5%92%8C%E6%91%87%E6%BB%9A/</guid>
      <description>这是这个系列的第二部分！请确保你已经阅读过第一部分, 在那里我们讨论了什么是 Seq, 并且怎么来缓存它们。</description>
    </item>
    
    <item>
      <title>Raku Sheet</title>
      <link>https://ohmysummer.github.io/post/2017-05-19-sheet/</link>
      <pubDate>Fri, 19 May 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-05-19-sheet/</guid>
      <description>正则表达式 Raku 的正则表达式允许你为你自定义的字符类混进 Unicode 属性！</description>
    </item>
    
    <item>
      <title>Raku Dispatch 解密</title>
      <link>https://ohmysummer.github.io/post/2017-04-02-dispath%E8%A7%A3%E5%AF%86/</link>
      <pubDate>Sun, 02 Apr 2017 14:24:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-04-02-dispath%E8%A7%A3%E5%AF%86/</guid>
      <description>Raku 的一个很好的特性是 multi-dispatch, 即多重分派。它允许你在函数, 方法或 Grammar token 中使用相同的名字并让它们所处理的数据的类型来决定执行哪一个。下面是一个 factorial postfix 操作符, 用两个 multies 来实现:</description>
    </item>
    
    <item>
      <title>Regexes</title>
      <link>https://ohmysummer.github.io/post/2017-03-18-regexes/</link>
      <pubDate>Sat, 18 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-18-regexes/</guid>
      <description>正则表达式, 简称 regexes, 是描述文本模式的字符序列。模式匹配就是将这些模式和实际的文本进行匹配的过程。</description>
    </item>
    
    <item>
      <title>Raku 中的笑脸</title>
      <link>https://ohmysummer.github.io/post/2017-03-11-raku%E4%B8%AD%E7%9A%84%E7%AC%91%E8%84%B8/</link>
      <pubDate>Sat, 11 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-11-raku%E4%B8%AD%E7%9A%84%E7%AC%91%E8%84%B8/</guid>
      <description>在 Raku 中在调用者的类型身上使用 :D 或 :U 类型笑脸来制造 type/instance 方法:</description>
    </item>
    
    <item>
      <title>Raku Gramamr 指南</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-raku-grammar-%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-raku-grammar-%E6%8C%87%E5%8D%97/</guid>
      <description>开始之前 为什么是 grammars?</description>
    </item>
    
    <item>
      <title>通过模块学习 Grammar</title>
      <link>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Sun, 05 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-05-%E4%BD%BF%E7%94%A8grammar%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>学习 Raku Grammar 的一个很好的地方是 GitHub 上的模块仓库, 里面有不少模块使用了 Grammar 来编写。下面我们列举出哪些模块值得我们学习。</description>
    </item>
    
    <item>
      <title>4 种风格的模板引擎</title>
      <link>https://ohmysummer.github.io/post/2017-03-04-4%E7%A7%8D%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</link>
      <pubDate>Sat, 04 Mar 2017 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-03-04-4%E7%A7%8D%E9%A3%8E%E6%A0%BC%E7%9A%84%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</guid>
      <description>4 种风格的模板引擎.</description>
    </item>
    
    <item>
      <title>Raku 中的 *, $_ 和 $</title>
      <link>https://ohmysummer.github.io/post/2017-02-04-whatever-star-vs.-_-vs-/</link>
      <pubDate>Sat, 04 Feb 2017 22:55:48 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-02-04-whatever-star-vs.-_-vs-/</guid>
      <description>cale2 问了一个很难的问题 今天卡尔2拒绝问简单的问题。我们来看它今天问了什么难题：</description>
    </item>
    
    <item>
      <title>2017 StackOverFlow-sort,deepmap,flat</title>
      <link>https://ohmysummer.github.io/post/2017-01-02-stackoverflow/</link>
      <pubDate>Mon, 02 Jan 2017 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-01-02-stackoverflow/</guid>
      <description>raku What is the best way to match any of a group of words?</description>
    </item>
    
    <item>
      <title>Raku Rakudo 和 NQP 内部研讨(一)</title>
      <link>https://ohmysummer.github.io/post/2017-01-01-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</link>
      <pubDate>Sun, 01 Jan 2017 23:01:01 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-01-01-rakudo-%E5%92%8C-nqp-%E5%86%85%E9%83%A8%E7%A0%94%E8%AE%A8/</guid>
      <description>标题: Rakudo and NQP Internals 子标题: The guts tormented implementers made 作者: Jonathan Worthington</description>
    </item>
    
    <item>
      <title>Raku Tips - 创建可重用的数据类型</title>
      <link>https://ohmysummer.github.io/post/2016-12-31-raku-tips-%E5%88%9B%E5%BB%BA%E5%8F%AF%E9%87%8D%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 31 Dec 2016 23:14:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-31-raku-tips-%E5%88%9B%E5%BB%BA%E5%8F%AF%E9%87%8D%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>Quick Tip #19: 创建可重用的数据类型 Raku 允许你使用类型来约束变量值，但是你不必拘泥于内置类型。一旦你定义了自己的类型，它们就表现得像内置类型一样。</description>
    </item>
    
    <item>
      <title>Raku 时间戳转换器命令行版</title>
      <link>https://ohmysummer.github.io/post/2016-12-31-raku%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88/</link>
      <pubDate>Sat, 31 Dec 2016 23:14:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-31-raku%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%8D%A2%E5%99%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%89%88/</guid>
      <description>Raku By Example: Datetime Conversion for the Command Line 我偶尔会在数据库中存储 UNIX 时间戳, 即从 1970-01-01 开始的秒数。我在按照日期查询数据库中的数据时, 需要将 UNIX 时间戳转换为人类可读的时间, 所以我写了个很小的工具来帮助我在 UNIX 时间戳和日期/时间之间来回转换:</description>
    </item>
    
    <item>
      <title>2016 年末总结</title>
      <link>https://ohmysummer.github.io/post/2016-12-31-2016-%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 31 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-31-2016-%E5%B9%B4%E6%9C%AB%E6%80%BB%E7%BB%93/</guid>
      <description> 不想总结。 总结个大西瓜。 有什么好总结的。 说多了都是泪。 还是不要总结了。  </description>
    </item>
    
    <item>
      <title>Raku Tips - 排列组合</title>
      <link>https://ohmysummer.github.io/post/2016-12-30-raku-tips-%E6%8E%A2%E7%B4%A2%E7%BB%84%E5%90%88/</link>
      <pubDate>Fri, 30 Dec 2016 23:14:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-30-raku-tips-%E6%8E%A2%E7%B4%A2%E7%BB%84%E5%90%88/</guid>
      <description>Quick Tip #16: 探索组合</description>
    </item>
    
    <item>
      <title>Raku 中的 Setty 和 Baggy 类型</title>
      <link>https://ohmysummer.github.io/post/2016-12-11-raku%E7%9A%84-setty-%E5%92%8C-baggy-%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 11 Dec 2016 23:50:12 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-12-11-raku%E7%9A%84-setty-%E5%92%8C-baggy-%E7%B1%BB%E5%9E%8B/</guid>
      <description>有一个很常见的计数场景。比如说计算 DNA 中各个碱基的个数:</description>
    </item>
    
    <item>
      <title>Raku Grammar 之分割结构化文本</title>
      <link>https://ohmysummer.github.io/post/2016-11-01-raku-grammar%E4%B9%8B%E5%88%86%E5%89%B2%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC/</link>
      <pubDate>Tue, 01 Nov 2016 02:05:48 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-11-01-raku-grammar%E4%B9%8B%E5%88%86%E5%89%B2%E7%BB%93%E6%9E%84%E5%8C%96%E6%96%87%E6%9C%AC/</guid>
      <description>如何使用 Grammar 分割一个有规律的文本文件?</description>
    </item>
    
    <item>
      <title>Raku 中的包</title>
      <link>https://ohmysummer.github.io/post/2016-10-28-raku%E4%B8%AD%E7%9A%84%E5%8C%85/</link>
      <pubDate>Fri, 28 Oct 2016 23:17:11 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-28-raku%E4%B8%AD%E7%9A%84%E5%8C%85/</guid>
      <description>Packages - Organizing and referencing namespaced program elements</description>
    </item>
    
    <item>
      <title>Raku 中列表、序列和数组</title>
      <link>https://ohmysummer.github.io/post/2016-10-27-raku%E4%B8%AD%E5%88%97%E8%A1%A8%E5%BA%8F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Thu, 27 Oct 2016 22:33:17 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-27-raku%E4%B8%AD%E5%88%97%E8%A1%A8%E5%BA%8F%E5%88%97%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>列表一直是计算机的核心部分，因为之前有计算机，在这段时间里，许多恶魔占据了他们的细节。 它们实际上是 Raku 设计中最难的部分之一，但是通过坚持和耐心，Raku 已经使用了一个优雅的系统来处理它们。</description>
    </item>
    
    <item>
      <title>第 10000 个素数</title>
      <link>https://ohmysummer.github.io/post/2016-10-26-%E7%AC%AC10000%E4%B8%AA%E7%B4%A0%E6%95%B0/</link>
      <pubDate>Wed, 26 Oct 2016 16:41:13 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-26-%E7%AC%AC10000%E4%B8%AA%E7%B4%A0%E6%95%B0/</guid>
      <description>到目前为止(2016.10.26), Raku 的速度相比 Perl 5/Python 的差距还是很大的。以打印从 1 开始计数的第 10000 个素数为例, 使用如下版本的 Rakudo:</description>
    </item>
    
    <item>
      <title>Raku 中的 require</title>
      <link>https://ohmysummer.github.io/post/2016-10-26-raku%E4%B8%AD%E7%9A%84require/</link>
      <pubDate>Wed, 26 Oct 2016 16:37:31 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-26-raku%E4%B8%AD%E7%9A%84require/</guid>
      <description>有时你必须不择手段地得到一个东西。 如果它是一个文件，你可以使用 Jonathan Stowes 的 URI::FetchFile。 所述模块检查四个模块中的任何一个是否可用，并且采用第一个将 URI 保存为磁盘上的文件。 在他的代码中有一个有趣的触发了 ENODOC 的行。</description>
    </item>
    
    <item>
      <title>关于 Raku 你要知道的 10 件事</title>
      <link>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eraku%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Sat, 22 Oct 2016 00:52:52 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-22-%E5%85%B3%E4%BA%8Eraku%E4%BD%A0%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%8410%E4%BB%B6%E4%BA%8B/</guid>
      <description>Ten Things You Need To Know about Raku Jeffrey Goff, Evozon Systems LLC OSCON London 2016 https://github.</description>
    </item>
    
    <item>
      <title>我在查找文件时所学到的</title>
      <link>https://ohmysummer.github.io/post/2016-10-20-%E6%88%91%E5%9C%A8%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E6%97%B6%E6%89%80%E5%AD%A6%E5%88%B0%E7%9A%84/</link>
      <pubDate>Thu, 20 Oct 2016 14:19:52 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-20-%E6%88%91%E5%9C%A8%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E6%97%B6%E6%89%80%E5%AD%A6%E5%88%B0%E7%9A%84/</guid>
      <description>Things I found out while finding</description>
    </item>
    
    <item>
      <title>Raku 中的 with</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84with/</link>
      <pubDate>Wed, 19 Oct 2016 19:17:03 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84with/</guid>
      <description>with orwith without with 语句就像 if 但是是为了测试是否定义而非真假。此外, 它主题化了条件, 这很像 given:</description>
    </item>
    
    <item>
      <title>Raku 模块分析 - 并行查找文件</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-%E5%B9%B6%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 19 Oct 2016 19:12:22 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90-%E5%B9%B6%E8%A1%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6/</guid>
      <description>并行查找文件 如果你没有使用 panda 或 zef 安装该模块, 你可以下载到本地：</description>
    </item>
    
    <item>
      <title>Raku 中的 Block</title>
      <link>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84block/</link>
      <pubDate>Wed, 19 Oct 2016 00:22:27 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-19-raku%E4%B8%AD%E7%9A%84block/</guid>
      <description>Raku 中的 Block class Block is Code { } Block 是用于小规模代码复用的代码对象。 Block 由花括号括起来的一组语句创建。</description>
    </item>
    
    <item>
      <title>Raku 中的函数</title>
      <link>https://ohmysummer.github.io/post/2016-10-17-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 17 Oct 2016 21:13:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-17-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/</guid>
      <description>Raku 中的函数 例程（Routines）是 Raku 中代码重用的最小手段。它们有几种形式，最明显的是属于类和角色并与对象相关联的方法，还有函数, 也叫做子例程或短子程序，它们独立于对象而存在。</description>
    </item>
    
    <item>
      <title>Raku From Ruby - Nutshell</title>
      <link>https://ohmysummer.github.io/post/2016-10-17-rakufromruby/</link>
      <pubDate>Mon, 17 Oct 2016 17:55:34 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-17-rakufromruby/</guid>
      <description>Raku from Ruby - Nutshell</description>
    </item>
    
    <item>
      <title>stackoverflowWeekly1014</title>
      <link>https://ohmysummer.github.io/post/2016-10-14-stackoverflowweekly1014/</link>
      <pubDate>Fri, 14 Oct 2016 15:09:54 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-14-stackoverflowweekly1014/</guid>
      <description>Raku List Concatenation without Slip Raku List Concatenation without Slip 在 Perl 5 中 , 操作符用来连接列表; 然而在 Raku 中需要使用 | 操作符, 即 slip 操作符。</description>
    </item>
    
    <item>
      <title>在手机中运行 Raku</title>
      <link>https://ohmysummer.github.io/post/2016-10-14-%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%AD%E8%BF%90%E8%A1%8Craku/</link>
      <pubDate>Fri, 14 Oct 2016 11:15:24 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-14-%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%AD%E8%BF%90%E8%A1%8Craku/</guid>
      <description>准备工作  一只 Root 过的安卓智能手机(例如 Smartisan T1) 下载并安装 busybox.</description>
    </item>
    
    <item>
      <title>Raku 中的 subst</title>
      <link>https://ohmysummer.github.io/post/2016-10-05-raku%E4%B8%AD%E7%9A%84subst/</link>
      <pubDate>Wed, 05 Oct 2016 23:32:51 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-05-raku%E4%B8%AD%E7%9A%84subst/</guid>
      <description>(Str) 方法 subst subst 取的是单词 substitution(替换)的前5个字符, 意为替换之意。</description>
    </item>
    
    <item>
      <title>Raku 中的并发</title>
      <link>https://ohmysummer.github.io/post/2016-10-03-raku%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Mon, 03 Oct 2016 20:43:15 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-10-03-raku%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91/</guid>
      <description>Concurrency</description>
    </item>
    
    <item>
      <title>gather-take</title>
      <link>https://ohmysummer.github.io/post/2016-09-28-gather-take/</link>
      <pubDate>Wed, 28 Sep 2016 17:48:14 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-28-gather-take/</guid>
      <description>控制流 gather/take gather 是一个语句或者能返回一序列值的 block 前缀。该值来自于 gather 块中的动态作用域的 take 调用。</description>
    </item>
    
    <item>
      <title>解析命令行输出</title>
      <link>https://ohmysummer.github.io/post/2016-09-27-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA/</link>
      <pubDate>Tue, 27 Sep 2016 07:51:05 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-27-%E8%A7%A3%E6%9E%90%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%87%BA/</guid>
      <description>哦, 列, 你在哪里?</description>
    </item>
    
    <item>
      <title>I left my keys in a side-channel</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-i-left-my-keys-in-a-side-channel/</link>
      <pubDate>Mon, 26 Sep 2016 12:17:59 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-i-left-my-keys-in-a-side-channel/</guid>
      <description>当我尝试把选项聚合到一个模块中时我无意中发现了一个常见问题的简洁解决办法。我想拥有一个子例程作为吞噬具名参数、做一些检查、并且要么返回 True 以满足那个 where 从句, 要么死掉并抛出一个合适的错误信息的 where 从句。 那很简单但是不彻底。那个 where 从句没有提供它所检查的参数的名字, 这需要拥有一个合适的错误信息。我们来简化下代码。</description>
    </item>
    
    <item>
      <title>These keys are LTA</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-these-keys-are-lta/</link>
      <pubDate>Mon, 26 Sep 2016 12:15:14 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-these-keys-are-lta/</guid>
      <description>在折腾枚举作为子例程布尔选项的时候, 我发现默认的错误信息不够酷。</description>
    </item>
    
    <item>
      <title>键是可选的</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-%E9%94%AE%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84/</link>
      <pubDate>Mon, 26 Sep 2016 12:04:56 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-%E9%94%AE%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84/</guid>
      <description>Keys are optional Keys are optional</description>
    </item>
    
    <item>
      <title>这些是你的键吗</title>
      <link>https://ohmysummer.github.io/post/2016-09-26-%E8%BF%99%E4%BA%9B%E6%98%AF%E4%BD%A0%E7%9A%84%E9%94%AE%E5%90%97/</link>
      <pubDate>Mon, 26 Sep 2016 12:01:22 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-26-%E8%BF%99%E4%BA%9B%E6%98%AF%E4%BD%A0%E7%9A%84%E9%94%AE%E5%90%97/</guid>
      <description>Are these your keys?</description>
    </item>
    
    <item>
      <title>Whatever Star</title>
      <link>https://ohmysummer.github.io/post/2016-09-25-whatever-star/</link>
      <pubDate>Sun, 25 Sep 2016 16:14:05 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-25-whatever-star/</guid>
      <description>Whatever 是什么?</description>
    </item>
    
    <item>
      <title>Raku 中的冒号</title>
      <link>https://ohmysummer.github.io/post/2016-09-24-raku%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</link>
      <pubDate>Sat, 24 Sep 2016 20:55:11 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-24-raku%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</guid>
      <description>Raku Colons 在 Raku 中到处都是冒号, 我搜集了你在 Raku 中使用冒号的所有方式。</description>
    </item>
    
    <item>
      <title>Learning Raku - sets</title>
      <link>https://ohmysummer.github.io/post/2016-09-19-learning-raku-sets/</link>
      <pubDate>Mon, 19 Sep 2016 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-19-learning-raku-sets/</guid>
      <description>Quick Tip #8: Raku sets Set – a collection of unique thingys Bag - a collection of unique thingys,but weighted for the count of the number of times something is put the bag Mix - a bag that allows fractional weights</description>
    </item>
    
    <item>
      <title>Python Vs Raku</title>
      <link>https://ohmysummer.github.io/post/2016-09-19-python-vs-raku/</link>
      <pubDate>Mon, 19 Sep 2016 09:15:54 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-19-python-vs-raku/</guid>
      <description>Python Vs Raku, 比较哪个写法更优雅简洁。</description>
    </item>
    
    <item>
      <title>feed 操作符</title>
      <link>https://ohmysummer.github.io/post/2016-09-18-feed%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Sun, 18 Sep 2016 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-18-feed%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Sequencer Precedence</description>
    </item>
    
    <item>
      <title>对象哈希</title>
      <link>https://ohmysummer.github.io/post/2016-09-18-raku-calendar-2016-%E7%AC%AC%E4%B8%89%E5%A4%A9%E5%AF%B9%E8%B1%A1%E5%93%88%E5%B8%8C/</link>
      <pubDate>Sun, 18 Sep 2016 22:56:16 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-18-raku-calendar-2016-%E7%AC%AC%E4%B8%89%E5%A4%A9%E5%AF%B9%E8%B1%A1%E5%93%88%E5%B8%8C/</guid>
      <description>第三天　－　对象哈希</description>
    </item>
    
    <item>
      <title>Data Dump</title>
      <link>https://ohmysummer.github.io/post/2016-09-10-data-dump/</link>
      <pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-09-10-data-dump/</guid>
      <description>for Raku 你们选对了, 这就是满足你们快速打印数据需要的.</description>
    </item>
    
    <item>
      <title>Raku Shortcuts(第一部分)</title>
      <link>https://ohmysummer.github.io/post/2016-08-31-raku-shortcuts%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-31-raku-shortcuts%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/</guid>
      <description>查看原文</description>
    </item>
    
    <item>
      <title>哇, Raku!</title>
      <link>https://ohmysummer.github.io/post/2016-08-14-%E5%93%87raku/</link>
      <pubDate>Sun, 14 Aug 2016 13:14:00 +0100</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-14-%E5%93%87raku/</guid>
      <description>前言 Slides 地址 视频地址</description>
    </item>
    
    <item>
      <title>大列表重构</title>
      <link>https://ohmysummer.github.io/post/2016-08-12-%E5%A4%A7%E5%88%97%E8%A1%A8%E9%87%8D%E6%9E%84/</link>
      <pubDate>Fri, 12 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-12-%E5%A4%A7%E5%88%97%E8%A1%A8%E9%87%8D%E6%9E%84/</guid>
      <description>Raku 最近(2015.</description>
    </item>
    
    <item>
      <title>Abundant and Deficient Numbers</title>
      <link>https://ohmysummer.github.io/post/2016-08-11-abundant-and-deficient-numbers/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-11-abundant-and-deficient-numbers/</guid>
      <description>问题描述 abundant 数是其所有因子的和大于该数，而deficient数是其因子的和小于该数。</description>
    </item>
    
    <item>
      <title>引号结构</title>
      <link>https://ohmysummer.github.io/post/2016-08-09-%E5%BC%95%E5%8F%B7%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 09 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-09-%E5%BC%95%E5%8F%B7%E7%BB%93%E6%9E%84/</guid>
      <description>The Q Lang 在 Raku 中, 字符串通常使用一些引号结构来表示.</description>
    </item>
    
    <item>
      <title>智能匹配</title>
      <link>https://ohmysummer.github.io/post/2016-08-03-%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-03-%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</guid>
      <description>智能匹配 智能匹配通常作用在当前”主题”(topic)上, 即作用在 $_ 变量上.</description>
    </item>
    
    <item>
      <title>Raku Types--成人之美</title>
      <link>https://ohmysummer.github.io/post/2016-08-02-raku-types-%E6%88%90%E4%BA%BA%E4%B9%8B%E7%BE%8E/</link>
      <pubDate>Tue, 02 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-02-raku-types-%E6%88%90%E4%BA%BA%E4%B9%8B%E7%BE%8E/</guid>
      <description>Raku Types: 成人之美</description>
    </item>
    
    <item>
      <title>unspaces</title>
      <link>https://ohmysummer.github.io/post/2016-08-01-unspaces/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-08-01-unspaces/</guid>
      <description>有些语言例如 C 允许你转义一个换行符使行联合起来.</description>
    </item>
    
    <item>
      <title>学习Raku的一些网站</title>
      <link>https://ohmysummer.github.io/post/2016-07-25-%E5%AD%A6%E4%B9%A0raku%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</link>
      <pubDate>Mon, 25 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-25-%E5%AD%A6%E4%B9%A0raku%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BD%91%E7%AB%99/</guid>
      <description>Blog  rakuintro raku.</description>
    </item>
    
    <item>
      <title>HOW 方法</title>
      <link>https://ohmysummer.github.io/post/2016-07-22-how%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 22 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-22-how%E6%96%B9%E6%B3%95/</guid>
      <description>Why can&amp;rsquo;t I call the methods method on a Raku&amp;rsquo;s ClassHOW object?</description>
    </item>
    
    <item>
      <title>The Awesome Errors of Raku</title>
      <link>https://ohmysummer.github.io/post/2016-07-20-the-awesome-errors-of-raku/</link>
      <pubDate>Wed, 20 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-20-the-awesome-errors-of-raku/</guid>
      <description>The Awesome Errors of Raku 如果你一直在读技术相关的东西，你现在可能知道 Rust 里面的令人惊喜的错误报告能力。 既然 Raku 也因它的绝妙的错误处理而闻名, mst 查询了一些例子来炫耀 rust 的错误处理能力, 但是不幸的是我没有发现。</description>
    </item>
    
    <item>
      <title>roundrobin</title>
      <link>https://ohmysummer.github.io/post/2016-07-18-roundrobin/</link>
      <pubDate>Mon, 18 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-18-roundrobin/</guid>
      <description>定义为</description>
    </item>
    
    <item>
      <title>副词的Pair形式</title>
      <link>https://ohmysummer.github.io/post/2016-07-16-%E5%89%AF%E8%AF%8D%E7%9A%84pair%E5%BD%A2%E5%BC%8F/</link>
      <pubDate>Sat, 16 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-16-%E5%89%AF%E8%AF%8D%E7%9A%84pair%E5%BD%A2%E5%BC%8F/</guid>
      <description>副词的 Pair 形式 S02-literals/adverbs.</description>
    </item>
    
    <item>
      <title>given when</title>
      <link>https://ohmysummer.github.io/post/2016-07-09-given-when/</link>
      <pubDate>Sat, 09 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-09-given-when/</guid>
      <description>given-when 有两个小的改变, 并且这俩改变都是开启新行为的, 而不是限制已存在的行为。</description>
    </item>
    
    <item>
      <title>It&#39;s blocks all the way down</title>
      <link>https://ohmysummer.github.io/post/2016-07-07-its-blocks-all-the-way-down/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-07-its-blocks-all-the-way-down/</guid>
      <description>It’s blocks all the way down</description>
    </item>
    
    <item>
      <title>Raku 中的梳子!</title>
      <link>https://ohmysummer.github.io/post/2016-07-07-raku%E4%B8%AD%E7%9A%84%E6%A2%B3%E5%AD%90/</link>
      <pubDate>Thu, 07 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-07-07-raku%E4%B8%AD%E7%9A%84%E6%A2%B3%E5%AD%90/</guid>
      <description>Raku 中的梳子!</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(二)</title>
      <link>https://ohmysummer.github.io/post/2016-06-29-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%8C/</link>
      <pubDate>Wed, 29 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-29-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%8C/</guid>
      <description>允许的修饰符 有些修饰符能在所有允许的地方出现, 但并非所有的都这样.</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2011)</title>
      <link>https://ohmysummer.github.io/post/2016-06-28-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2011/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-28-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2011/</guid>
      <description>2011  The Flip-Flop operator  Perl5有一个二元操作符叫做flip-flop,它为假直到它的第一个参数被计算为真，然后它保持真(反转)，直到第二个参数计算为真，然后在那里它又变成假(flop)。 这真是太有用了，以至于Raku也有flip-flop,只是它拼写为ff,并有一些变异：</description>
    </item>
    
    <item>
      <title>S06-Subroutines</title>
      <link>https://ohmysummer.github.io/post/2016-06-27-s06-subroutines/</link>
      <pubDate>Mon, 27 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-27-s06-subroutines/</guid>
      <description>原文Subroutines</description>
    </item>
    
    <item>
      <title>给标题添加换行</title>
      <link>https://ohmysummer.github.io/post/2016-06-19-%E7%BB%99%E6%A0%87%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%8D%A2%E8%A1%8C/</link>
      <pubDate>Sun, 19 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-19-%E7%BB%99%E6%A0%87%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%8D%A2%E8%A1%8C/</guid>
      <description>简书太扯了, 不管是什么空格都替换掉了。 开门见山, 废话不多说。如果非标题行在标题行上面, 那么这俩行之间会有一段空白, 但是你肯定遇到过:</description>
    </item>
    
    <item>
      <title>Raku FAQ</title>
      <link>https://ohmysummer.github.io/post/2016-06-06-raku-faq/</link>
      <pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-06-raku-faq/</guid>
      <description>源文件可以在 github 或 raku.</description>
    </item>
    
    <item>
      <title>Raku 中的 Subscripts</title>
      <link>https://ohmysummer.github.io/post/2016-06-01-raku%E4%B8%AD%E7%9A%84subscripts/</link>
      <pubDate>Wed, 01 Jun 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-06-01-raku%E4%B8%AD%E7%9A%84subscripts/</guid>
      <description>Subscripts 通过索引或键访问数据结构中的元素。</description>
    </item>
    
    <item>
      <title>如何在Raku中创建Grammar</title>
      <link>https://ohmysummer.github.io/post/2016-05-14-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%88%9B%E5%BB%BAgrammar/</link>
      <pubDate>Sat, 14 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-14-%E5%A6%82%E4%BD%95%E5%9C%A8raku%E4%B8%AD%E5%88%9B%E5%BB%BAgrammar/</guid>
      <description>检查 module 的名字是否 遵循 Raku 的命名规范。模块的名字可以是使用 2 个冒号分割的标识符, 例如 File::Compare 。标识符必须以字母字符 (a-z) 或下划线开头， 后面跟着 0 个 或多个字母数字字符。但是并没有那么简单, 有些模块的名字只有一个标识符而没有冒号，例如 Bailador ， 而其它模块可能有多个标识符和 :: 组成。这看起来正符合 grammar 的胃口！</description>
    </item>
    
    <item>
      <title>Actions 和抽象语法树</title>
      <link>https://ohmysummer.github.io/post/2016-05-12-actions%E5%92%8C%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</link>
      <pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-12-actions%E5%92%8C%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</guid>
      <description>有一段结构化的文本, 写一个 Grammar 来解析它：</description>
    </item>
    
    <item>
      <title>列表解析</title>
      <link>https://ohmysummer.github.io/post/2016-05-11-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-11-%E5%88%97%E8%A1%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>列表解析 列表解析即 List Comprehensions。</description>
    </item>
    
    <item>
      <title>输入Unicode字符</title>
      <link>https://ohmysummer.github.io/post/2016-05-11-%E8%BE%93%E5%85%A5unicode%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-11-%E8%BE%93%E5%85%A5unicode%E5%AD%97%E7%AC%A6/</guid>
      <description>输入 Unicode 字符 Raku 允许把 unicode 字符用作变量名.</description>
    </item>
    
    <item>
      <title>Raku 中的操作符(二)</title>
      <link>https://ohmysummer.github.io/post/2016-05-02-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BA%8C/</link>
      <pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-05-02-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%BA%8C/</guid>
      <description>infix:&amp;lt;&amp;hellip;&amp;gt;, 序列操作符.</description>
    </item>
    
    <item>
      <title>Raku From Wikipedia</title>
      <link>https://ohmysummer.github.io/post/2016-04-26-raku-from-wikipedia/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-26-raku-from-wikipedia/</guid>
      <description>Raku 是 Perl 编程语言家族中的一员.</description>
    </item>
    
    <item>
      <title>Meta Operator</title>
      <link>https://ohmysummer.github.io/post/2016-04-25-meta-operator/</link>
      <pubDate>Mon, 25 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-25-meta-operator/</guid>
      <description>快速构造散列  &amp;gt; my %hash = @lowers Z=&amp;gt; @numsa =&amp;gt; 1, b =&amp;gt; 2, c =&amp;gt; 3未完待续</description>
    </item>
    
    <item>
      <title>Raku 中的特性(一)</title>
      <link>https://ohmysummer.github.io/post/2016-04-22-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%80/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-22-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%80/</guid>
      <description>基础  数组  切片, 索引, Zen</description>
    </item>
    
    <item>
      <title>Raku 中的签名</title>
      <link>https://ohmysummer.github.io/post/2016-04-12-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/</link>
      <pubDate>Tue, 12 Apr 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-12-raku%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D/</guid>
      <description>签名也是对象 class Signature {}签名是代码对象参数列表的静态描述。即, 签名描述了你需要什么参数和多少参数传递给代码或函数以调用它们。</description>
    </item>
    
    <item>
      <title>reddit编程题-詹妮的水果篮</title>
      <link>https://ohmysummer.github.io/post/2016-04-12-reddit%E7%BC%96%E7%A8%8B%E9%A2%98-%E8%A9%B9%E5%A6%AE%E7%9A%84%E6%B0%B4%E6%9E%9C%E7%AF%AE/</link>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-12-reddit%E7%BC%96%E7%A8%8B%E9%A2%98-%E8%A9%B9%E5%A6%AE%E7%9A%84%E6%B0%B4%E6%9E%9C%E7%AF%AE/</guid>
      <description>问题描述  小詹妮拿着 5 美元去超市买东西, 为新搬来的邻居买水果篮礼物。因为她是个勤奋并缺乏想象力的孩纸, 她打算正好花 5 美元, 不多也不少。</description>
    </item>
    
    <item>
      <title>正则替换</title>
      <link>https://ohmysummer.github.io/post/2016-04-07-%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2/</link>
      <pubDate>Thu, 07 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-04-07-%E6%AD%A3%E5%88%99%E6%9B%BF%E6%8D%A2/</guid>
      <description>想把 Desgin Raku 中的 pod/html 转为 Markdown 格式, Raku 的 pod2markdown 不能用, 只能下载 html 格式的了, 然后用 pandoc test.</description>
    </item>
    
    <item>
      <title>Raku 中的术语</title>
      <link>https://ohmysummer.github.io/post/2016-03-26-raku%E4%B8%AD%E7%9A%84%E6%9C%AF%E8%AF%AD/</link>
      <pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-26-raku%E4%B8%AD%E7%9A%84%E6%9C%AF%E8%AF%AD/</guid>
      <description>匿名  子例程、方法或子方法，当它们不能通过名字调用时，就被称为匿名的</description>
    </item>
    
    <item>
      <title>Raku 中的操作符(三)</title>
      <link>https://ohmysummer.github.io/post/2016-03-23-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%89/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-23-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%89/</guid>
      <description>范围和范围迭代器语法 .</description>
    </item>
    
    <item>
      <title>Raku 中的 Bailador Web 框架(简介)</title>
      <link>https://ohmysummer.github.io/post/2016-03-20-raku%E4%B8%AD%E7%9A%84bailadorweb%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Sun, 20 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-20-raku%E4%B8%AD%E7%9A%84bailadorweb%E6%A1%86%E6%9E%B6%E7%AE%80%E4%BB%8B/</guid>
      <description>开始 Bailador Bailador 是对 Perl Dancer Web 开发框架的模仿。 安装方法：</description>
    </item>
    
    <item>
      <title>用类来排序数组</title>
      <link>https://ohmysummer.github.io/post/2016-03-15-%E7%94%A8%E7%B1%BB%E6%9D%A5%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-15-%E7%94%A8%E7%B1%BB%E6%9D%A5%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/</guid>
      <description>有多列数据, 序号, 学校, 课程 … 年份这几列。要如果学校和课程相同就根据年份倒序排列。</description>
    </item>
    
    <item>
      <title>Using Raku(二)</title>
      <link>https://ohmysummer.github.io/post/2016-03-14-using-raku%E4%BA%8C/</link>
      <pubDate>Mon, 14 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-14-using-raku%E4%BA%8C/</guid>
      <description>捕获 签名不仅仅是语法，它们是含有一列参数对象的 first-class 对象 。同样地，有一种含有参数集的数据结构,叫捕获。捕获有位置和命名两个部分，表现的就像列表和散列。像列表的那部分含有位置参数，而像散列的那部分含有命名参数。</description>
    </item>
    
    <item>
      <title>匿名状态变量的工作原理</title>
      <link>https://ohmysummer.github.io/post/2016-03-12-%E5%8C%BF%E5%90%8D%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Sat, 12 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-12-%E5%8C%BF%E5%90%8D%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <description>Anonymous State Variables And How They Work 当调试代码的时候, 我经常添加一个计数变量以用于循环, 所以我能跟踪发生了什么, 或我能在代码片段中处理正迭代的部分数据集:</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2009)</title>
      <link>https://ohmysummer.github.io/post/2016-03-11-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2009/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-11-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2009/</guid>
      <description>2009 有用的和有意思的循环 让我们来看一个基本的例子.</description>
    </item>
    
    <item>
      <title>token 和 rule 的区别</title>
      <link>https://ohmysummer.github.io/post/2016-03-11-token%E5%92%8Crule%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-11-token%E5%92%8Crule%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>在 grammar 中, 有两个 regex 的变体, rule 和 token。rule 默认不会回溯.</description>
    </item>
    
    <item>
      <title>Raku 中的模式匹配</title>
      <link>https://ohmysummer.github.io/post/2016-03-09-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Wed, 09 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-09-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>模式匹配 my $name = &amp;quot;twostraws&amp;quot;;given $name {when &amp;quot;bilbo&amp;quot; { say &amp;quot;Hello, Bilbo Baggins!</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(一)</title>
      <link>https://ohmysummer.github.io/post/2016-03-08-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80/</link>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-03-08-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80/</guid>
      <description>标题 Synopsis 5: Regexes and Rules</description>
    </item>
    
    <item>
      <title>Raku 中的动态变量</title>
      <link>https://ohmysummer.github.io/post/2016-02-29-raku%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%98%E9%87%8F/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-29-raku%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E5%8F%98%E9%87%8F/</guid>
      <description>Raku 中的动态变量</description>
    </item>
    
    <item>
      <title>bless</title>
      <link>https://ohmysummer.github.io/post/2016-02-26-bless/</link>
      <pubDate>Fri, 26 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-26-bless/</guid>
      <description>bless 方法 method bless(*%attrinit) returns Mu:D相比 new方法来说更低层级别的对象构造方法。</description>
    </item>
    
    <item>
      <title>Array language</title>
      <link>https://ohmysummer.github.io/post/2016-02-23-reddit-array-language/</link>
      <pubDate>Tue, 23 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-23-reddit-array-language/</guid>
      <description>[2015-12-09] Challenge #244 [Easy]er - Array language (part 3) - J Forks</description>
    </item>
    
    <item>
      <title>Raku 中的智能匹配</title>
      <link>https://ohmysummer.github.io/post/2016-02-19-raku%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-19-raku%E4%B8%AD%E7%9A%84%E6%99%BA%E8%83%BD%E5%8C%B9%E9%85%8D/</guid>
      <description>智能匹配 这儿有一个标准 Raku（即在你的编译单元开始的时候所生效的 Perl 方言） 的智能匹配表格。智能匹配通常作用在当前「主题」(topic)上, 即作用在 $_ 变量上.</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2013)</title>
      <link>https://ohmysummer.github.io/post/2016-02-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2013/</link>
      <pubDate>Mon, 15 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2013/</guid>
      <description>2013  Heredocs, Theredocs, Everywheredocs docs  So let’s say you’ve got a bit of documentation to print out, a help statement perhaps.</description>
    </item>
    
    <item>
      <title>Raku Examples</title>
      <link>https://ohmysummer.github.io/post/2016-02-14-raku-examples/</link>
      <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-14-raku-examples/</guid>
      <description>斐波拉契数列（Fibonacci Sequence）   analytic  use v6;sub fibonacci (Int $n where 0.</description>
    </item>
    
    <item>
      <title>S07-Lists</title>
      <link>https://ohmysummer.github.io/post/2016-02-12-s07-lists/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-12-s07-lists/</guid>
      <description>push 和 append 的表现不同, push 一次只添加单个参数到列表末端, append 一次可以添加多个参数。</description>
    </item>
    
    <item>
      <title>适当的使用proto</title>
      <link>https://ohmysummer.github.io/post/2016-02-11-%E6%81%B0%E5%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8proto/</link>
      <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-11-%E6%81%B0%E5%BD%93%E7%9A%84%E4%BD%BF%E7%94%A8proto/</guid>
      <description>原文在此Apropos proto: Raku.</description>
    </item>
    
    <item>
      <title>given when和模式匹配</title>
      <link>https://ohmysummer.github.io/post/2016-02-06-given-when%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-06-given-when%E5%92%8C%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>Raku 中的模式匹配</description>
    </item>
    
    <item>
      <title>Grammars</title>
      <link>https://ohmysummer.github.io/post/2016-02-05-raku-grammars/</link>
      <pubDate>Fri, 05 Feb 2016 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-05-raku-grammars/</guid>
      <description>Grammars Grammars - 一组具名 regexes 组成正式的 grammar</description>
    </item>
    
    <item>
      <title>comb - 操作字符串的利器</title>
      <link>https://ohmysummer.github.io/post/2016-02-03-comb-%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A9%E5%99%A8/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-02-03-comb-%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A9%E5%99%A8/</guid>
      <description>comb - 操作字符串的利器</description>
    </item>
    
    <item>
      <title>Raku 中的 S/// 操作符</title>
      <link>https://ohmysummer.github.io/post/2016-01-28-raku%E4%B8%AD%E7%9A%84s%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-28-raku%E4%B8%AD%E7%9A%84s%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>Raku: S/// 操作符 By Zoffix Znet</description>
    </item>
    
    <item>
      <title>Roles</title>
      <link>https://ohmysummer.github.io/post/2016-01-21-roles/</link>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-21-roles/</guid>
      <description>Protocol 在 Swift 中是一组方法和属性的集合, 可用于代码复用。 Raku 中有与之类似的结构, 叫做 Role, 下面转换一个 Swift 的 Protocol 为 Raku 的 Role, 把部门人员的相关信息打印为一个表格:</description>
    </item>
    
    <item>
      <title>Fallout Hacking Game</title>
      <link>https://ohmysummer.github.io/post/2016-01-12-fallout-hacking-game/</link>
      <pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-12-fallout-hacking-game/</guid>
      <description>流行游戏辐射3: New Vegas 有一台计算机, 玩家必须正确地从同样长度的单词列表中猜出正确的密码。你的挑战是你自己实现这个游戏。</description>
    </item>
    
    <item>
      <title>从正则表达式到Grammars - Part 2</title>
      <link>https://ohmysummer.github.io/post/2016-01-04-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-2/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-04-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-2/</guid>
      <description>省略啰嗦的一堆。</description>
    </item>
    
    <item>
      <title>使用Raku的subsets和multiple辨别年龄</title>
      <link>https://ohmysummer.github.io/post/2016-01-04-%E4%BD%BF%E7%94%A8raku%E7%9A%84subsets%E5%92%8Cmultiple%E8%BE%A8%E5%88%AB%E5%B9%B4%E9%BE%84/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-04-%E4%BD%BF%E7%94%A8raku%E7%9A%84subsets%E5%92%8Cmultiple%E8%BE%A8%E5%88%AB%E5%B9%B4%E9%BE%84/</guid>
      <description>举个例子, 假设 person 有一个 age 属性.</description>
    </item>
    
    <item>
      <title>Raku 博文收集</title>
      <link>https://ohmysummer.github.io/post/2016-01-02-raku-%E5%8D%9A%E6%96%87%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sat, 02 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-02-raku-%E5%8D%9A%E6%96%87%E6%94%B6%E9%9B%86/</guid>
      <description>本文意在收集 Raku 方面的博文, 如有侵权请告知删除。</description>
    </item>
    
    <item>
      <title>Raku 核心骇客--词法的胡言乱语</title>
      <link>https://ohmysummer.github.io/post/2016-01-01-raku-%E6%A0%B8%E5%BF%83%E9%AA%87%E5%AE%A2-%E8%AF%8D%E6%B3%95%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2016-01-01-raku-%E6%A0%B8%E5%BF%83%E9%AA%87%E5%AE%A2-%E8%AF%8D%E6%B3%95%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/</guid>
      <description>Raku 核心骇客: 词法的胡言乱语</description>
    </item>
    
    <item>
      <title>rakuintro 翻译</title>
      <link>https://ohmysummer.github.io/post/2015-12-21-raku-intro-%E7%BF%BB%E8%AF%91/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-21-raku-intro-%E7%BF%BB%E8%AF%91/</guid>
      <description>第八章 函数式编程  在本章中，我们将看看一些有利于函数式编程的功能。</description>
    </item>
    
    <item>
      <title>stackoverflow0902</title>
      <link>https://ohmysummer.github.io/post/2015-12-18-stackoverflow0902/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-18-stackoverflow0902/</guid>
      <description>How do I chain to an inline block in Raku?</description>
    </item>
    
    <item>
      <title>给数字添加千分位分割符</title>
      <link>https://ohmysummer.github.io/post/2015-12-14-%E7%BB%99%E6%95%B0%E5%AD%97%E6%B7%BB%E5%8A%A0%E5%8D%83%E5%88%86%E4%BD%8D%E5%88%86%E5%89%B2%E7%AC%A6/</link>
      <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-14-%E7%BB%99%E6%95%B0%E5%AD%97%E6%B7%BB%E5%8A%A0%E5%8D%83%E5%88%86%E4%BD%8D%E5%88%86%E5%89%B2%E7%AC%A6/</guid>
      <description>使用链式函数调用 考虑最简单的一种情况, 不带小数点的数字:</description>
    </item>
    
    <item>
      <title>类中的twigils</title>
      <link>https://ohmysummer.github.io/post/2015-12-11-%E7%B1%BB%E4%B8%AD%E7%9A%84twigils/</link>
      <pubDate>Fri, 11 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-12-11-%E7%B1%BB%E4%B8%AD%E7%9A%84twigils/</guid>
      <description>Raku中的 .</description>
    </item>
    
    <item>
      <title>扩展 Raku 中的类型</title>
      <link>https://ohmysummer.github.io/post/2015-11-25-%E6%89%A9%E5%B1%95raku%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-25-%E6%89%A9%E5%B1%95raku%E4%B8%AD%E7%9A%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>扩展 Raku 中的类型 使用继承 class BetterInt is Int {method even { self %% 2 }}my BetterInt $x .</description>
    </item>
    
    <item>
      <title>简单字符串解析</title>
      <link>https://ohmysummer.github.io/post/2015-11-25-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-25-%E7%AE%80%E5%8D%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</guid>
      <description>简单字符串解析 我已经以好几种方式使用 Raku 解析用引号引起的字符串了。 但是我想知道有没有更好更干净的方法。下面有一个为引起的字符串准备的小型 grammar 而且还有一些测试:</description>
    </item>
    
    <item>
      <title>项</title>
      <link>https://ohmysummer.github.io/post/2015-11-21-%E9%A1%B9/</link>
      <pubDate>Sat, 21 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-21-%E9%A1%B9/</guid>
      <description>Raku 中的大部分句法结构能归类为项和操作符.</description>
    </item>
    
    <item>
      <title>Guess Who</title>
      <link>https://ohmysummer.github.io/post/2015-11-20-reddit-guess-who/</link>
      <pubDate>Fri, 20 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-20-reddit-guess-who/</guid>
      <description>你是一个刚成立的小公司里的一名软件工程师, 有天晚上你收到了一封来自CEO 的电子邮件:</description>
    </item>
    
    <item>
      <title>Raku 中的可变 Grammar</title>
      <link>https://ohmysummer.github.io/post/2015-11-16-raku%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98grammar/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-16-raku%E4%B8%AD%E7%9A%84%E5%8F%AF%E5%8F%98grammar/</guid>
      <description>## A Mutable Grammar For Raku Rules  Rules 就像 perl5的 regexes，并且更好。它们像子例程和方法那样申明，并且还能调用其它 rules</description>
    </item>
    
    <item>
      <title>roles冲突</title>
      <link>https://ohmysummer.github.io/post/2015-11-16-roles%E5%86%B2%E7%AA%81/</link>
      <pubDate>Mon, 16 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-16-roles%E5%86%B2%E7%AA%81/</guid>
      <description>学会了怎么创建类, 我们继续用它来构建我们的中心内容:</description>
    </item>
    
    <item>
      <title>圆括号和方括号在创建数组时的区别</title>
      <link>https://ohmysummer.github.io/post/2015-11-14-%E5%9C%86%E6%8B%AC%E5%8F%B7%E5%92%8C%E6%96%B9%E6%8B%AC%E5%8F%B7%E5%9C%A8%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E6%97%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 14 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-14-%E5%9C%86%E6%8B%AC%E5%8F%B7%E5%92%8C%E6%96%B9%E6%8B%AC%E5%8F%B7%E5%9C%A8%E5%88%9B%E5%BB%BA%E6%95%B0%E7%BB%84%E6%97%B6%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>[ ] 和 ( ) 的区别 # 无法正常排序my @s = [2443,5,33, 90, -9, 2, 764];say @s.</description>
    </item>
    
    <item>
      <title>在 Raku 中怎么为已存在的类添加方法</title>
      <link>https://ohmysummer.github.io/post/2015-11-11-%E5%9C%A8raku%E4%B8%AD%E6%80%8E%E4%B9%88%E4%B8%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 11 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-11-%E5%9C%A8raku%E4%B8%AD%E6%80%8E%E4%B9%88%E4%B8%BA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95/</guid>
      <description>How do you add a method to an existing class in Raku?</description>
    </item>
    
    <item>
      <title>D 在 Raku 中是什么意思</title>
      <link>https://ohmysummer.github.io/post/2015-11-05-d%E5%9C%A8raku%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-05-d%E5%9C%A8raku%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D/</guid>
      <description>一个裸的 :D、:U、:T 或 :_ 是限制默认类型为定义、未定义、类型对象或任何对象的类型约束。所以</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(三)</title>
      <link>https://ohmysummer.github.io/post/2015-11-05-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%89/</link>
      <pubDate>Thu, 05 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-11-05-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%89/</guid>
      <description>预定义 Subrules 下面这些是为任意 grammar 或 regex 预定义好的 subrules:</description>
    </item>
    
    <item>
      <title>从正则表达式到 Grammar</title>
      <link>https://ohmysummer.github.io/post/2015-10-29-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammar/</link>
      <pubDate>Thu, 29 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-29-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammar/</guid>
      <description>「原文链接」</description>
    </item>
    
    <item>
      <title>IO 操作</title>
      <link>https://ohmysummer.github.io/post/2015-10-11-io%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-11-io%E6%93%8D%E4%BD%9C/</guid>
      <description>文件存在、文件的时间戳、文件的修改时间等等</description>
    </item>
    
    <item>
      <title>proto</title>
      <link>https://ohmysummer.github.io/post/2015-10-06-proto/</link>
      <pubDate>Tue, 06 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-06-proto/</guid>
      <description>proto  proto 意思为原型。proto 从形式上声明了 multi 候选者之间的共性。 proto 充当作能检查但不会修改参数的包裹。看看这个基本的例子:</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2010)</title>
      <link>https://ohmysummer.github.io/post/2015-10-05-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2010/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-10-05-raku-%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2010/</guid>
      <description>2010 第二天:用main函数控制命令行交互 2010 年 Raku 圣诞月历(二)用 main 函数控制命令行交互</description>
    </item>
    
    <item>
      <title>空白格</title>
      <link>https://ohmysummer.github.io/post/2015-09-18-%E7%A9%BA%E7%99%BD%E6%A0%BC/</link>
      <pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-18-%E7%A9%BA%E7%99%BD%E6%A0%BC/</guid>
      <description>空格最少化  在数组或散列的开括号(即下标左边的那个括号)之前不允许有空格, 参数列表的圆开括号前面也是不能有空格的.</description>
    </item>
    
    <item>
      <title>Raku 中的 polymod 方法</title>
      <link>https://ohmysummer.github.io/post/2015-09-17-raku%E4%B8%AD%E7%9A%84polymod%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-17-raku%E4%B8%AD%E7%9A%84polymod%E6%96%B9%E6%B3%95/</guid>
      <description>Raku 中的 .</description>
    </item>
    
    <item>
      <title>日期难题</title>
      <link>https://ohmysummer.github.io/post/2015-09-15-%E6%97%A5%E6%9C%9F%E9%9A%BE%E9%A2%98/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-15-%E6%97%A5%E6%9C%9F%E9%9A%BE%E9%A2%98/</guid>
      <description>reddit 上使用 Raku 处理日期</description>
    </item>
    
    <item>
      <title>Raku Weekly(一)</title>
      <link>https://ohmysummer.github.io/post/2015-09-11-raku-weekly%E4%B8%80/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-11-raku-weekly%E4%B8%80/</guid>
      <description>1、在 Raku 中怎样检查文件的时间戳属性？</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(四)</title>
      <link>https://ohmysummer.github.io/post/2015-09-11-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%9B/</link>
      <pubDate>Fri, 11 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-09-11-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9B%9B/</guid>
      <description>最长 token 匹配 注意，下面进入糟糕区域，如果看不懂请查看英文原文!</description>
    </item>
    
    <item>
      <title>Raku 中的操作符(一)</title>
      <link>https://ohmysummer.github.io/post/2015-08-31-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%80/</link>
      <pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-31-raku%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%80/</guid>
      <description>操作符优先级 S03-operators/arith.</description>
    </item>
    
    <item>
      <title>探索Raku的Signatures,第二部分</title>
      <link>https://ohmysummer.github.io/post/2015-08-29-%E6%8E%A2%E7%B4%A2raku%E7%9A%84signatures%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</link>
      <pubDate>Sat, 29 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-29-%E6%8E%A2%E7%B4%A2raku%E7%9A%84signatures%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86/</guid>
      <description>在我们探索 Raku 签名的第一部分中, 我们了解了怎么使用 Raku 强大而灵活的类型系统来约束具名参数和位置参数是如何被传递给子例程和方法的。我们还涉及了怎么使用 slurp 签名来创建能接收任意具名和位置参数列表的可变函数。</description>
    </item>
    
    <item>
      <title>cookbook</title>
      <link>https://ohmysummer.github.io/post/2015-08-25-cookbook/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-25-cookbook/</guid>
      <description>字符串处理  将每行从第二列到最后一列数值为0的且数目多于6个的行删除</description>
    </item>
    
    <item>
      <title>Raku 中的变量</title>
      <link>https://ohmysummer.github.io/post/2015-08-25-raku%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-25-raku%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F/</guid>
      <description>变量名以一个叫做魔符 sigil 的特殊字符开头, 后面跟着一个可选的第二个叫做 twigil 的特殊字符, 然后是一个标识符.</description>
    </item>
    
    <item>
      <title>Raku 单行程序</title>
      <link>https://ohmysummer.github.io/post/2015-08-25-raku-%E5%8D%95%E8%A1%8C%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-25-raku-%E5%8D%95%E8%A1%8C%E7%A8%8B%E5%BA%8F/</guid>
      <description>Raku 单行程序 这本书在进行之中。我希望你能觉得它有趣，甚至可能有用！如果你想贡献反馈的话，那么很欢迎提问题还有新的或有提升的正则表达式。</description>
    </item>
    
    <item>
      <title>Raku 中的引号</title>
      <link>https://ohmysummer.github.io/post/2015-08-24-raku%E4%B8%AD%E7%9A%84%E5%BC%95%E5%8F%B7/</link>
      <pubDate>Mon, 24 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-24-raku%E4%B8%AD%E7%9A%84%E5%BC%95%E5%8F%B7/</guid>
      <description>除了 q 和 qq 之外，现在还有一种基本形式的 Q，它不会进行插值，除非显式地修改它那样做。所以，q 实际上是 Q:q 的简称，qq 实际上是 Q:qq 的简称。实际上所有的 quote-like 形式都派生自带有副词的 Q 形式：</description>
    </item>
    
    <item>
      <title>Raku Weekly(二)</title>
      <link>https://ohmysummer.github.io/post/2015-08-22-rakuweekly%E7%AC%AC%E4%BA%8C%E6%9C%9F/</link>
      <pubDate>Sat, 22 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-22-rakuweekly%E7%AC%AC%E4%BA%8C%E6%9C%9F/</guid>
      <description>:my $foo 的作用域和用途 在 regex、token 或 rule 中, 定义像下面这样的变量是可能的:</description>
    </item>
    
    <item>
      <title>在 Raku 中为自定义的类添加下标(subscripts)</title>
      <link>https://ohmysummer.github.io/post/2015-08-18-%E5%9C%A8raku%E4%B8%AD%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%A0%87subscripts/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-18-%E5%9C%A8raku%E4%B8%AD%E4%B8%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%B1%BB%E6%B7%BB%E5%8A%A0%E4%B8%8B%E6%A0%87subscripts/</guid>
      <description>为自定义的类添加下标(subscripts) 假如你定义了一个类，你想把类的实例用作散列那样，可以索引其中的元素， 那么你需要让你得自定义遵守 Associative 接口，并重写 AT-KEY 、EXISTS-KEY 、DELETE-KEY 、push 等跟散列有关的方法:</description>
    </item>
    
    <item>
      <title>S12-Objects</title>
      <link>https://ohmysummer.github.io/post/2015-08-09-s12-objects/</link>
      <pubDate>Sun, 09 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-09-s12-objects/</guid>
      <description>标题  大纲 12： 对象(Objects)</description>
    </item>
    
    <item>
      <title>rotor</title>
      <link>https://ohmysummer.github.io/post/2015-08-08-rotor/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-08-rotor/</guid>
      <description>method rotor(*@cycle, Bool() :$partial)rotor 返回一个 list, 这个 list 的元素也是 list, 其中每个子列表由调用者中的元素组成.</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2015)</title>
      <link>https://ohmysummer.github.io/post/2015-08-05-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2015/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-08-05-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2015/</guid>
      <description>Comming Soon!</description>
    </item>
    
    <item>
      <title>Introspection</title>
      <link>https://ohmysummer.github.io/post/2015-07-25-introspection/</link>
      <pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-25-introspection/</guid>
      <description>Raku 支持&amp;quot;泛型, roles 和 多重分发&amp;rdquo;, 它们都是很好的特点, 并且已经在其它 advent calendar 中发布过了。</description>
    </item>
    
    <item>
      <title>元对象协议</title>
      <link>https://ohmysummer.github.io/post/2015-07-16-%E5%85%83%E5%AF%B9%E8%B1%A1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-16-%E5%85%83%E5%AF%B9%E8%B1%A1%E5%8D%8F%E8%AE%AE/</guid>
      <description>自省和 Raku 的对象系统 Raku 是构建在元对象层上面的。那意味着有些对象(元对象)控制着各种面向对象结构(例如类、roles、方法、属性、枚举,…)怎样去表现。</description>
    </item>
    
    <item>
      <title>Raku 中的 Role</title>
      <link>https://ohmysummer.github.io/post/2015-07-15-raku%E4%B8%AD%E7%9A%84role/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-15-raku%E4%B8%AD%E7%9A%84role/</guid>
      <description>Composition and mix-ins Sigils Typed data structures Traits  所以到底什么是 role 呢？ role 是零个或多个方法和属性的集合。</description>
    </item>
    
    <item>
      <title>Raku rotor--列表操作之王</title>
      <link>https://ohmysummer.github.io/post/2015-07-14-raku-rotor-%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E7%8E%8B/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-14-raku-rotor-%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E7%8E%8B/</guid>
      <description>Raku .</description>
    </item>
    
    <item>
      <title>Grammar 笔记</title>
      <link>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-11-grammar%E7%AC%94%E8%AE%B0/</guid>
      <description>一个 Grammar 解析复杂文本的例子。</description>
    </item>
    
    <item>
      <title>MAIN 中的冒号</title>
      <link>https://ohmysummer.github.io/post/2015-07-05-main-%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-07-05-main-%E4%B8%AD%E7%9A%84%E5%86%92%E5%8F%B7/</guid>
      <description>假如我有多个文本文件, 我要写一段脚本来进行替换操作。在命令行中提供一些列选项供配置。文本格式如下:</description>
    </item>
    
    <item>
      <title>散列也是容器</title>
      <link>https://ohmysummer.github.io/post/2015-06-28-%E6%95%A3%E5%88%97%E4%B9%9F%E6%98%AF%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-28-%E6%95%A3%E5%88%97%E4%B9%9F%E6%98%AF%E5%AE%B9%E5%99%A8/</guid>
      <description>散列也是容器 假设我们想计算某个东西的出现次数, 我们通常的做法是弄一个 &amp;ldquo;seen-hash&amp;rdquo; 散列。有时候我们有一组待查询的键, 其中有些键可能不在我们所扫描的数据中。那是一种特殊情况, 但是 Raku 能够完美地解决, 因为散列也是容器, 因此我们能够拥有默认值。</description>
    </item>
    
    <item>
      <title>找到两个文件中共有的行</title>
      <link>https://ohmysummer.github.io/post/2015-06-18-%E6%89%BE%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E5%85%B1%E6%9C%89%E7%9A%84%E8%A1%8C/</link>
      <pubDate>Thu, 18 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-18-%E6%89%BE%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%E5%85%B1%E6%9C%89%E7%9A%84%E8%A1%8C/</guid>
      <description>找出两个文件中共有的行, 顺序无关紧要 在 Perl 5 里, 你可以这样:</description>
    </item>
    
    <item>
      <title>面向对象的 Raku</title>
      <link>https://ohmysummer.github.io/post/2015-06-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84raku/</link>
      <pubDate>Mon, 15 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84raku/</guid>
      <description>https://docs.raku.org/language/objects</description>
    </item>
    
    <item>
      <title>正则表达式一例</title>
      <link>https://ohmysummer.github.io/post/2015-06-14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80%E4%BE%8B/</link>
      <pubDate>Sun, 14 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%80%E4%BE%8B/</guid>
      <description>以指定音量随机播放音频文件：</description>
    </item>
    
    <item>
      <title>class-List</title>
      <link>https://ohmysummer.github.io/post/2015-06-10-class-list/</link>
      <pubDate>Wed, 10 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-06-10-class-list/</guid>
      <description>my class List is Iterable does Positional { .</description>
    </item>
    
    <item>
      <title>Slip一例</title>
      <link>https://ohmysummer.github.io/post/2015-05-19-slip%E4%B8%80%E4%BE%8B/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-19-slip%E4%B8%80%E4%BE%8B/</guid>
      <description>描述 有 7 块板子放在一个&amp;quot;袋子&amp;quot;中, 随机从袋子中移除一个板子展示到玩家面前直到袋子变空。当袋子变空时, 它会被重新装填, 如果需要额外的板子, 则重复前面那个过程。</description>
    </item>
    
    <item>
      <title>怎么在 Raku 中自定义存取器</title>
      <link>https://ohmysummer.github.io/post/2015-05-19-%E6%80%8E%E4%B9%88%E5%9C%A8raku%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%98%E5%8F%96%E5%99%A8/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-19-%E6%80%8E%E4%B9%88%E5%9C%A8raku%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%98%E5%8F%96%E5%99%A8/</guid>
      <description>How does one write custom accessor methods in Raku?</description>
    </item>
    
    <item>
      <title>下标副词</title>
      <link>https://ohmysummer.github.io/post/2015-05-18-%E4%B8%8B%E6%A0%87%E5%89%AF%E8%AF%8D/</link>
      <pubDate>Mon, 18 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-18-%E4%B8%8B%E6%A0%87%E5%89%AF%E8%AF%8D/</guid>
      <description>下标副词 为了使切片下标返回除了值以外的其它东西，那么给下标(subscript)添加合适的副词。</description>
    </item>
    
    <item>
      <title>在 Raku 中异步地执行外部程序</title>
      <link>https://ohmysummer.github.io/post/2015-05-14-%E5%9C%A8raku%E4%B8%AD%E5%BC%82%E6%AD%A5%E5%9C%B0%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 14 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-14-%E5%9C%A8raku%E4%B8%AD%E5%BC%82%E6%AD%A5%E5%9C%B0%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>Execute an external program with timeout in Raku</description>
    </item>
    
    <item>
      <title>Raku 入门指南</title>
      <link>https://ohmysummer.github.io/post/2015-05-08-raku%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 08 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-08-raku%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</guid>
      <description>exit，warn，die  exit</description>
    </item>
    
    <item>
      <title>Sneaky methods</title>
      <link>https://ohmysummer.github.io/post/2015-05-01-sneaky-methods/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-05-01-sneaky-methods/</guid>
      <description>Sneaky methods</description>
    </item>
    
    <item>
      <title>Raku 中的正则表达式(五)</title>
      <link>https://ohmysummer.github.io/post/2015-04-28-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%94/</link>
      <pubDate>Tue, 28 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-28-raku%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BA%94/</guid>
      <description>从匹配中返回值 Match 对象  成功的匹配总是返回一个 Match 对象, 这个对象通常也被放进 $/ 中, (具名 regex, token, 或 rule 是一个子例程, 因此会声明它们自己的本地 $/ 变量, 它通常指 rule 中最近一次的 submatch, 如果有的话)。当前的匹配状态被保存到 regex 的 $¢ 变量中, 当匹配结束时它最终会被绑定到用户的 $/变量中  不成功的匹配会返回 Nil (并把 $/ 设置为 Nil, 如果匹配已经设置了 $/的话)</description>
    </item>
    
    <item>
      <title>从正则表达式到Grammars - Part 1</title>
      <link>https://ohmysummer.github.io/post/2015-04-27-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-1/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-27-%E4%BB%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0grammars-part-1/</guid>
      <description>原文</description>
    </item>
    
    <item>
      <title>Grammars generating grammars</title>
      <link>https://ohmysummer.github.io/post/2015-04-15-grammars-generating-grammars/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-15-grammars-generating-grammars/</guid>
      <description>现在你可能已经习惯了 Raku 中到处出现的前缀&amp;quot;meta&amp;rdquo;。Metaclasses, Metaobjects, Metaoperators, 还有迷一般的 Meta-Object 协议。听起来一点也不可怕, 你都见过了不是吗？今天, 在 Raku Advent Calendar 上, 我们将进行完全的 meta 化(full meta)。我们将拥有能解析 grammars 的 grammars, 然后生成将用于解析 grammars 的 grammars。</description>
    </item>
    
    <item>
      <title>Raku圣诞月历-(2012)</title>
      <link>https://ohmysummer.github.io/post/2015-04-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2012/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-15-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2012/</guid>
      <description>2012  一个日历  #!</description>
    </item>
    
    <item>
      <title>Capture</title>
      <link>https://ohmysummer.github.io/post/2015-04-01-capture/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-04-01-capture/</guid>
      <description>Capture 的定义:</description>
    </item>
    
    <item>
      <title>Raku 中的模块</title>
      <link>https://ohmysummer.github.io/post/2015-03-23-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-23-raku%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97/</guid>
      <description>Modules  Exporting and Selective Importing  is export  packages(包), subroutines(子例程), variables(变量), constants(常量) 和 enums(枚举) , 通过在它们的名字后面添加 is export 特性来导出。</description>
    </item>
    
    <item>
      <title>Sneaking into a loop</title>
      <link>https://ohmysummer.github.io/post/2015-03-23-sneaking-into-a-loop/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-23-sneaking-into-a-loop/</guid>
      <description>Sneaking into a loop [Sneaking into a loop]https://gfldex.</description>
    </item>
    
    <item>
      <title>Raku 的薛定谔的猫--Junctions</title>
      <link>https://ohmysummer.github.io/post/2015-03-22-raku%E7%9A%84%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E7%8C%AB-junctions/</link>
      <pubDate>Sun, 22 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-22-raku%E7%9A%84%E8%96%9B%E5%AE%9A%E8%B0%94%E7%9A%84%E7%8C%AB-junctions/</guid>
      <description>薛定谔欧文应该是喜欢 Raku 的, 因为他的著名的薛定谔的猫可以用 Raku 的 Junction表达:</description>
    </item>
    
    <item>
      <title>Subset</title>
      <link>https://ohmysummer.github.io/post/2015-03-19-subset/</link>
      <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-19-subset/</guid>
      <description>Subset 子集 Subset 可用于声明某一类型的子集。</description>
    </item>
    
    <item>
      <title>操作符</title>
      <link>https://ohmysummer.github.io/post/2015-03-16-%E6%93%8D%E4%BD%9C%E7%AC%A6/</link>
      <pubDate>Mon, 16 Mar 2015 13:16:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-16-%E6%93%8D%E4%BD%9C%E7%AC%A6/</guid>
      <description>操作符 操作符优先级 在像 1 + 2 * 3 这样的表达式中， 2 * 3 被首先计算， 因为中缀操作符 * 的优先级比 + 的优先级高。下面的表中总结了 Perl 6 中 的优先级级别， 从最牢固到最松散：</description>
    </item>
    
    <item>
      <title>Raku 中的特性(二)</title>
      <link>https://ohmysummer.github.io/post/2015-03-16-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%BA%8C/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-16-raku%E4%B8%AD%E7%9A%84%E7%89%B9%E6%80%A7%E4%BA%8C/</guid>
      <description>Set  my $keywords = set &amp;lt;if for unless while&amp;gt;; # create a setsub has-keyword(*@words) {for @words -&amp;gt; $word {return True if $word (elem) $keywords; # 依次检查数组中的元素是否属于集合 $keywords}False;}say has-keyword &#39;not&#39;, &#39;one&#39;, &#39;here&#39;; # Falsesay has-keyword &#39;but&#39;, &#39;here&#39;, &#39;for&#39;; # TrueSeries Operator  my @a=&amp;lt;A G C T&amp;gt;;my $x=@a;for 1 .</description>
    </item>
    
    <item>
      <title>When and Where</title>
      <link>https://ohmysummer.github.io/post/2015-03-15-when%E5%92%8Cwhere/</link>
      <pubDate>Sun, 15 Mar 2015 13:15:00 +0300</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-15-when%E5%92%8Cwhere/</guid>
      <description>When 可以用在主题化($_)的语句中 Perl 里面有个特殊的变量叫 $_, 即主题化变量, the variable in question.</description>
    </item>
    
    <item>
      <title>Using Raku(一)</title>
      <link>https://ohmysummer.github.io/post/2015-03-14-using-raku%E4%B8%80/</link>
      <pubDate>Sat, 14 Mar 2015 13:14:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2015-03-14-using-raku%E4%B8%80/</guid>
      <description>第一章 概要  Comming soon!</description>
    </item>
    
    <item>
      <title>Raku 圣诞月历-(2014)</title>
      <link>https://ohmysummer.github.io/post/2014-12-19-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2014/</link>
      <pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2014-12-19-raku%E5%9C%A3%E8%AF%9E%E6%9C%88%E5%8E%86-2014/</guid>
      <description>2014  Data munging in Raku vs Perl 5  案例学习: 生成成绩报告单</description>
    </item>
    
    <item>
      <title>Raku from Haskell - Nutshell</title>
      <link>https://ohmysummer.github.io/post/2017-04-29-raku-from-haskell-nutshell/</link>
      <pubDate>Fri, 11 Jul 2014 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2017-04-29-raku-from-haskell-nutshell/</guid>
      <description>Haskell 和 Raku 是非常不同的语言。这很明显。 但是，这并不意味着没有相似之处或共同的想法！ 此页面尝试让一个 Haskell 用户启动并运行 Raku。Haskell 用户可能会发现，在用 Raku 编写脚本时，他们不需要放弃所有 Haskelly 的想法。</description>
    </item>
    
    <item>
      <title>Raku Grammars, Part 1</title>
      <link>https://ohmysummer.github.io/post/2018-02-13-raku-grammers-part-1/</link>
      <pubDate>Fri, 11 Jul 2014 10:54:24 +0200</pubDate>
      
      <guid>https://ohmysummer.github.io/post/2018-02-13-raku-grammers-part-1/</guid>
      <description>Raku Grammars, Part 1 Raku 语言内置了对 grammar 的支持。您可以将 grammars 视为众所周知的正则表达式和诸如 yacc 或 bison 等实用程序或更复杂的 grammar 工具（如ANTLR）的组合。所有这些 - 词法分析器，语法分析器和语义处理 - 通常是编译器的独立部分，在 Raku 中它们都是内置的，并且可以通过全新的 Raku 安装 进行开箱即用。</description>
    </item>
    
  </channel>
</rss>